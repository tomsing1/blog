{
  "hash": "4cb3ee092139985f19c794f3f8594f96",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Interacting with box cloud storage: the boxr R package\"\nauthor: \"Thomas Sandmann\"\ndate: \"2024-11-30\"\nexecute:\n  echo: true\n  warning: false\n  message: false\nfreeze: true\ncategories: [R, box, TIL]\neditor:\n  markdown:\n    wrap: 72\nformat:\n  html:\n    anchor-sections: true\n    toc: true\n    toc-depth: 4\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n## tl;dr\n\nThis week, I learned how to create custom apps within the box cloud storage\nservice, and how to read & write files from within R using the awesome \n[boxr R package](https://cran.r-project.org/package=boxr). \n\nI used two different ways of authenticating with box: OAuth 2.0 and Java Web\nTokens (JWT), best suited for interactive or unattended use cases, respectively.\n\n## Overview\n\n[box](https://www.box.com/)\nis a commercial cloud storage provider. Many of my colleagues use it through\nits web interface and share data and metadata files with me.\n\nWhile box doesn't offer an official API for R, the excellent \n[boxr R package](https://cran.r-project.org/package=boxr)\nhas enabled me to read & write files without having to manually download them\nfirst. The `boxr` package has\n[excellent documentation](https://r-box.github.io/boxr/), but I tend to forget\nhow to set it up, especially on a new system, or to assist other colleagues who\nare new to `boxr`. That's why I am documenting my workflow here today.\n\nThis tutorial is split into two main parts, using either\n\n1. An interactive app authenticating via OAuth 2.0 or\n2. A service app authenticating with Java Web Tokens (JWT)\n\nThe former is straightforward to set up and doesn't require\na developer account or authorization by an admin. The latter requires more work\nto set up, but is a great choice for unattended processes. Please refer to \n[this article in the official boxr documentation](https://r-box.github.io/boxr/articles/boxr-apps.html)\nfor more details.\n\n## Creating a box developer account\n\nTo interact with box, you need to create an account first (or ask your \norganization to provide you with one). For individuals, you can sign up for a\n[free developer plan](https://account.box.com/signup/developer).\nwhich is all you need to follow along [^1].\n\nHere, I will assume that you have either already signed up for a box *developer*\naccount or have access to a paid account e.g. through your organiation, \nand that you are familiar with logging into it through your web browser.\n\n[^1]: The main difference between a free *developer* account and a regular free \naccount is that the developer version has access to the administrator console,\nwhich will allow you to authorize JWT and CCG applications ([source](https://community.box.com/sdks-and-tools-7/free-developer-accounts-are-back-29)).\nIf you are part of an organization with dedicated admins, then they can\nauthorize apps that use these authentication methods for you. With a regular\n(e.g. non-developer) free account you can still use OAuth 2.0 for\nauthentication, but won't be able to run the code examples shown in the JWT \nsection of this tutorial.\n\n## Creating a Custom App to interact with box\n\nBox offers multiple different ways to access content computationally. Instead\nof a single API, users can create one or more Apps, and configure them to fit\ntheir needs.\n\nHere, I am creating a \n[Custom App](https://developer.box.com/platform/application-types/#custom-app), \na versatile option that offers \n[three different ways to authenticate](https://developer.box.com/platform/authentication-methods/).\n\n1. *OAuth 2.0*: An _app_ using OAuth 2.0 exposes the same permissions to `boxr`\nthat I have as an  interactive user, e.g. it can browse, read, write and share\nthe same files that I can interact with when I am logged into the box web\nsite. That's a great option e.g. for interactive analyses.\n2. *Java web token*: An _app_ using a *JWT* creates a new service account, which\ncan only access files and folders that have been explicitly shared with it. \n(See below for an example). This allows for more granular access control and is\nmy method of choice for unsupervised dashboards or other automation tasks.\n3. *Client Credentials Grant*: Finally, apps can use a\n[Client Credentials Grant (CCG)](https://developer.box.com/platform/authentication-methods/#client-credentials-grant-ccg),\nbut that's not something I have explored, yet.\n\nIn this walkthrough, I will set up two _Custom Apps_, one using\n[OAuth 2.0](https://auth0.com/intro-to-iam/what-is-oauth-2) \nand another using a \n[JSON Web Token (JWT)](https://en.wikipedia.org/wiki/JSON_Web_Token)\nfor authentication.\n\n## Using OAuth2 for authentication\n\n### Creating a new app: r_oauth\n\nIf you want to connect to box computationally, you need to create an _app_ that\ngoverns how you interact with the box API. The following instructions assume\nthat you don't have any apps, yet, so I will create one from scratch.\n\n- Log into the [box developer console](https://app.box.com/developers/console),\n  with your usual box username & password.\n- If this is the first app you are creating, you will be presented with three\n choices. For my purposes, a `Custom App` is the best choice. (If you already\n created at least one app before, you will see it listed, and can use the \n `Create Platform App` button on the upper right instead, see the JWT section\n below where I create a second app, below.)\n \n::: {.callout-note collapse=\"true\"}\n \n### Screenshot\n![](screenshots/create_app.jpg){#fig-create_app}\n:::\n- Next, I choose a suitable name for the app (e.g. `r_oauth`), and add a brief\n  description before clicking the `Next` button.\n  \n::: {.callout-note collapse=\"true\"}\n  \n### Screenshots \n  \n:::: {layout-ncol=2}\n![](screenshots/custom_app_1.jpg){#fig-custom_app_1}\n  \n![](screenshots/custom_app_2.jpg){#fig-custom_app_2}\n::::\n:::\n\n- On the second page of the modal, I pick `User Authentication (OAuth 2.0)` as\n  the authentication method and then hit the `Create App` button.\n- This takes me to main configuration page of my new `r_oauth` app. \n\n::: {.callout-note collapse=\"true\"}\n \n### Screenshot\n![](screenshots/app_config.jpg){#fig-app_config.jpg}\n:::\n  \n- The `Configuration` tab includes the \n  `OAuth 2.0 Credentials` section that provides me with the `Client ID` and\n  the `Client Secret` strings, which are used in the same way as my `username`\n  and `password` for my box account. (So I will keep the secret and not share\n  them with anybody!)\n  - I can invalidate my current ID / Secret pair and obtain a new set any time\n    by clicking on the `Reset` button.\n- Next, I scroll down to the `OAuth 2.0 Redirect URI` section of the page,\n  paste `http://localhost:1410/` into the `Redirect URI` text box and then\n  hit the blue `Add` button. The new URI is now shown below the text box.\n  \n::: {.callout-note collapse=\"true\"}\n \n### Screenshot\n\n![](screenshots/redirect.jpg){#fig-redirect}\n:::\n  \n- Finally, I scroll down further to the `Application Scopes` section. By \n  default, my app only has the `Read all files and folders in Box` box ticked,\n  providing read-only access. Because I also want to be able to write files and\n  create folders, I also check the `Write all files and folders in Box` option.\n  \n::: {.callout-note collapse=\"true\"}\n \n### Screenshot\n\n![](screenshots/write_access.jpg){#fig-write_access}\n:::\n  \n::: {.callout-warning}\n  \n### $ operator is invalid for atomic vectors\n  \nIf I forget to grant write access to box, operations that try to modify\nfiles or folders fail with the `$ operator is invalid for atomic vectors`\nerror message.\n:::\n\n- To make these change permanent, I click the `Save Changes` button at the\n  top of the Configuration page.\n  \n- I keep this configuration page open, so I can refer back to it below.\n\n\n### Authenticating\n\nLet's start by accessing my box account from within R on my local system, e.g.\nwhere I can open a web browser to complete the authentication process.\n\nFirst, I install the `boxr` package, which is \n[available from CRAN](https://cran.r-project.org/package=boxr).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"boxr\")\n```\n:::\n\n\n\nNext, I attach the package to my R session and use the `box_auth()` function to\nauthenticate with the `r_oauth` app I created above. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(boxr)\noptions(boxr.progress = FALSE, boxr.verbose = FALSE)\n```\n:::\n\n\n\n::: {.callout-tip collapse=\"true\"}\n\n### boxr options\n\nI can fine tune the behavior of the `boxr` package through different\n[options](https://ijlyttle.github.io/boxr/reference/boxr_options.html).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr_options()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$boxr.interactive\n[1] TRUE\n\n$boxr.print_tibble\n[1] FALSE\n\n$boxr.progress\n[1] FALSE\n\n$boxr.verbose\n[1] FALSE\n\n$boxr.wd\n$boxr.wd$id\n[1] 0\n\n$boxr.wd$name\n[1] \"All Files\"\n\n\n$boxr.wd.path\n[1] \"\"\n```\n\n\n:::\n:::\n\n\n\nFor this tutorial, I switch off the progress bar and suppress messages with\nby setting the `boxr.progress` and `boxr.verbose` options to `FALSE`.\n\n:::\n\n### Environmental variables\n\nTo communicate the `Client ID` and `Client Secret` information shown in the \n`Configuration -> OAuth 2.0 Credentials` section of\nmy app's configuration page (see above), I expose them as environmental \nvariables.\n\n::: {.callout-important}\n\nThe Client ID and Client Secret strings shown in this tutorial are no\nlonger valid, so please replace them with your own to follow along.\n\n::::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(BOX_CLIENT_ID=\"0o5h6s0mey2l5f6l89bkjrmk42vjv9g2\")\nSys.setenv(BOX_CLIENT_SECRET=\"Zfv4UX5Fi2rQAK9Cskcf3RgtFlptrH2c\")\n```\n:::\n\n\n\nUsually, I add the `BOX_CLIENT_ID` and `BOX_CLIENT_SECRET` to my `.Renviron`\nfile instead of specifying them via `Sys.setenv()`. That way, `box_auth()` will\nuse them automatically next time and avoid including any credentials\nin my analysis code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr::box_auth()\n```\n:::\n\n\n\nProviding the `BOX_CLIENT_ID` and `BOX_CLIENT_SECRET` strings is not sufficient\nto gain access to my box account, though. To complete the OAuth 2.0 hand-shake, \nI am now directed to a website, which opens in my default web browser, where I \ncan log into my box account interactively (using my usual username and\npassword). Afterward, I confirm that I want to grant my `r_oauth` app access to \nmy files on my behalf.\n\n::: {.callout-note collapse=\"true\"}\n \n### Screenshots\n\n:::: {layout-ncol=2}\n\n![](screenshots/login.jpg){#fig-login}\n  \n![](screenshots/grant_access.jpg){#fig-grant_access}\n::::\n:::\n\n::: {.callout-tip}\n\nA call to `box_auth()` is required every time I want to interact with box\nin an R session, e.g. I include the following two lines at the top of each of\nmy R markdown / quarto documents:\n\n```\nlibrary(boxr)\nbox_auth()\n```\n:::\n\n\n### The cache file\n\nWhen `box_auth()` runs successfully for the first time, it creates a\ncache file (by default as the hidden `~/.box-oauth` file in my home \ndirectory)[^2]. The next call to `box_auth()` will refresh the information\nstored in the cache file instead of prompting me to sign in via the box\nwebsite again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.info(\"~/.boxr-oauth\")[, c(\"size\", \"mode\", \"mtime\", \"ctime\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              size mode               mtime               ctime\n~/.boxr-oauth 5940  600 2024-11-30 10:23:46 2024-11-30 10:23:46\n```\n\n\n:::\n:::\n\n\n\n[^2]: To create cache file under a different path, I could specify it's location\nvia the `cache` argument of the `box_auth()` function. For example, I could\npoint to a network drive that is accessible at the same path from different\ncomputers.\n\n### Writing and reading files from box\n\nNow that I have authenticated with my `r_oauth` app, I can browse the folders\nand files available to me on box. The `box_getwd()` function confirms that\nI am looking at the root directory of my box account, which has the directory ID\n`0`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr::box_getwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\nThe `box_ls` function returns a [boxr_object_list S3 object](https://github.com/r-box/boxr/blob/31d2e7407cc0e6a31a9853fb43f27c48055eb057/R/boxr_s3_classes.R#L27)\nwith all objects that are stored in the location specified by the `dir_id`\nargument. It can be coerced into a data.frame, e.g. to filter the output with\nverbs from the \n[dplyr](https://cran.r-project.org/package=dplyr) or\n[poorman](https://cran.r-project.org/package=poorman)\nR packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobjects <- boxr::box_ls(dir_id = box_getwd())\nclass(objects)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"boxr_object_list\"\n```\n\n\n:::\n:::\n\n\n\n[^3]: The `dir_id` defaults to the output of `box_getwd()` and I only\nspecify it here explicitly to highlight that this argument is available. And\nyes, there is also a `box_setwd()` function to set the remote working directory.\n\nRight now, there is a single folder `tutorial` in my box account[^3]. Its unique\nidentifier is shown in the `id` column and I can refer to objects in my box\naccount (both folders and files) using this identifier.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.frame(objects)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name   type           id  size description                  owner\n1 tutorial folder 296254108479 12754             tomsing1+box@gmail.com\n       path         modified_at content_modified_at sha1 version version_no\n1 All Files 2024-11-30 10:35:37 2024-11-30 10:35:37 <NA>       1          1\n  version_id\n1       <NA>\n```\n\n\n:::\n:::\n\n\n\nI extract the unique identifier of the `tutorial` folder, so I can refer to\nit downstream:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(poorman))\n\nfolder_id <- objects |>\n  as.data.frame() |> \n  poorman::filter(name == \"tutorial\") |> \n  poorman::pull(\"id\")\nfolder_id\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"296254108479\"\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip}\n\nAlternatively, I can also copy this identifier from the end of the URL that is\nshowin in my web browser when I open the `tutorial` folder. Similarly pasting\nthe URL \nhttps://app.box.com/folder/296254108479 \ninto a web browser opens my `tutorial` folder there.\n\n:::\n\nSo let's store a copy of the `mtcars` dataset included in R's `dataset` package\nas a CSV file in the `tutorials` folder (specified by its id, see above). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr::box_write(object = mtcars, file_name = \"mtcars.csv\", dir_id = folder_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nbox.com remote file reference\n\n name        : mtcars.csv \n file id     : 1713588728473 \n version     : V10 \n size        : 1.3 kB \n modified at : 2024-11-30 10:36:46 \n created at  : 2024-11-30 10:36:46 \n uploaded by : tomsing1+box@gmail.com \n owned by    : tomsing1+box@gmail.com \n shared link : None \n\n parent folder name :  tutorial \n parent folder id   :  296254108479 \n```\n\n\n:::\n:::\n\n\n\nTo verify the successful upload, I can list the contents of the `tutorial`\nfolder:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr::box_ls(dir_id = folder_id) |>\n  as.data.frame()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        name type            id size description                  owner\n1 mtcars.csv file 1713588728473 1281             tomsing1+box@gmail.com\n2 mtcars.rds file 1713594291978 1225             tomsing1+box@gmail.com\n                path         modified_at content_modified_at\n1 All Files/tutorial 2024-11-30 10:36:46 2024-11-30 10:36:46\n2 All Files/tutorial 2024-11-30 10:35:37 2024-11-30 10:35:37\n                                      sha1 version version_no    version_id\n1 dfd44f97e2bd9b5efe4bd2e87851cfe717f3fc2f      10         10 1886588891382\n2 c41ea4b33768b6a4ae886e592e13090939fab642       1          1 1886592083178\n```\n\n\n:::\n:::\n\n\n\nTo read the file into my R session, I extract the CSV file's id and \npass it to the `box_read_csv` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_id <- boxr::box_ls(dir_id = folder_id) |>\n  as.data.frame() |>\n  poorman::filter(name == \"mtcars.csv\") |>\n  poorman::pull(id)\nboxr::box_read_csv(file_id) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip collapse=\"false\"}\n\n### Functions to interact with files stored in box\n\nThe `boxr` packages offers \n[convenience functions](https://r-box.github.io/boxr/reference/index.html) \nfor different file types, e.g.\n\n- [box_write()](https://r-box.github.io/boxr/reference/box_write.html)\n- [box_save_rds()](https://r-box.github.io/boxr/reference/box_save_rds.html)\n- [box_save()](https://r-box.github.io/boxr/reference/box_save.html)\n- [box_read_csv()](https://r-box.github.io/boxr/reference/box_read_csv.html)\n- [box_read_tsv()](https://r-box.github.io/boxr/reference/box_read_tsv.html)\n- [box_read_json()](https://r-box.github.io/boxr/reference/box_read_json.html)\n- [box_read_excel()](https://r-box.github.io/boxr/reference/box_read_excel.html)\n- [box_read_rds()](https://r-box.github.io/boxr/reference/box_read_rds.html)\n\nThe `box_write` and `box_read` functions allow me to specify the\nfunction that write / reads the file myself via the `write_fun` and `read_fun`\narguments, respectively.\n\nTo simply copy files from / to box without reading them, I can use the \n[box_dl()](https://r-box.github.io/boxr/reference/box_dl.html)\nand\n[box_ul()](https://r-box.github.io/boxr/reference/box_ul.html),\nrespectively.\n\nFinally, I can also move the file into the trash (from which it will be \nautomatically removed after one month) with the\n[box_delete_file()](https://r-box.github.io/boxr/reference/box_delete_file.html)\nfunction.\n\n:::\n\n\nFor other functions, e.g. to \n[search the box index](https://support.box.com/hc/en-us/articles/360043696314-Search-for-Files-Folders-and-Content),\nplease refer to the\n[boxr reference](https://r-box.github.io/boxr/reference/index.html).\n\n### Success!\n\nGreat! Now I have a working _app_ that allows me to interact with folders\nand files in my box account, all from within the comfort of my R session.\n\n## Using a JSON Web Token for authentication\n\nAnother way of authenticating a _Custom App_ within box is via a \n[JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token). This requires\nthat the \n[jose R package](https://cran.r-project.org/package=jose) \nis installed on your system:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jose)\n```\n:::\n\n\n\nIn this mode, the app authenticates using a signed JWT token, which requires\na public/private key-pair for added security (see below).\n\nTo authenticate via this route, I need to create another app in my\n[box developer console](https://app.box.com/developers/console). Because I\nalready created a first app (see above), the console's home screen now looks\ndifferent, listing my `r_oauth` app. To add another app, I click the blue \n`Create Platform App` in the upper right corner of the page.\n\n::: {.callout-note collapse=\"true\"}\n \n### Screenshot\n\n![](screenshots/second_app.jpg)\n:::\n\nOnce again, I choose to create a `Custom App` and pick a unique name for my\napp, e.g. `r_jwt`. But on the second page of the modal, I now choose\n`Server Authentication (with JWT)` as my authentication method before clicking\nthe `Create App` button.\n\n::: {.callout-note collapse=\"true\"}\n \n### Screenshots\n\n:::: {layout-ncol=2}\n\n![](screenshots/custom_app_1_jwt.jpg){#fig-custom_app_1_jwt}\n  \n![](screenshots/custom_app_2_jwt.jpg){#fig-custom_app_2_jwt}\n::::\n:::\n\nAfterwards, I am redirected to the configuration page of my new `r_jwt` app,\nwhere I make the following changes:\n\n- As in my first example, I allow the app to write / modify files and folders\n  on my behalf (see @fig-write_access).\n- To make these changes permanent, I click the blue `Save Changes` button on\n  the upper right of the Configuration page.\n- To use a `JWT` for authentication, I need one more piece of information: an\n  RSA keypair to sign and authenticate the requests made by my app. I scroll\n  down to the`Add and Manage Public Keys` section.\n  \n  There, I use the `Generate a new Public/Private Key pair` button to generate\n  and download a new key pair for my app.\n  \n::: {.callout-note collapse=\"true\"}\n\n### Screenshot\n\n![](screenshots/keys.jpg){#fig-keys}\n:::\n  \n  The key information is downloaded in a JSON file with content similar to\n  this:\n  \n  ```\n  {\n  \"boxAppSettings\": {\n    \"clientID\": \"jlccq2qe365jy2wo4llm9z9isz9didhv\",\n    \"clientSecret\": \"VSN5WNe9q4hI2h9PJbppQKsIxm8oxJp8\",\n    \"appAuth\": {\n      \"publicKeyID\": \"wvslfab2\",\n      \"privateKey\": \"-----BEGIN ENCRYPTED PRIVATE KEY-----\\nMIIFHDBOBgkqhki[TRUNCATED]RvOqeWR1mg==\\n-----END ENCRYPTED PRIVATE KEY-----\\n\",\n      \"passphrase\": \"87babeaed61e4ad87309f8063918bd04\"\n    }\n  },\n  \"enterpriseID\": \"1246725007\"\n}\n  ```\n  \n  This JSON file contains the\n  \n  - `clientID`: this unique identifier of the app - I will need it to authorize\n    my app in the Admin console (see below).\n  - `clientSecret`: the secret associated with the `clientID`\n  - `appAuth`: the public and private RSA key pair, along with their pass phrase\n  - `enterpriseID`: the unique identifier of my `enterprise`, e.g. the\n  organization that manages my box account[^4]. \n  \n  [^4]: Please note that my `enterpriseID` is set, even though I am a single\n  developer on a free box plan. If your `enterpriseID` is set to \"0\", you\n  probably didn't sign up for a _Developer_ account. (Only free Developer\n  accounts or paid plans can authorize apps via JWT or CCG).\n  \n  The contents (or location) of this file is required to authenticate with\n  box. The \n  [boxr package authors reccommend](https://r-box.github.io/boxr/articles/boxr-app-service.html#using-a-service-app)\n  creating storing this file in a newly created `~/.boxr-auth` folder, and\n  in this tutorial stored the file there under the path \n  `~/.boxr-auth/jwt_config.json` [^6].\n  \n  [^6]: The authors also recommend to keep access to the folder restricted if\n  you are on a system shared with others, e.g. by creating the directory\n  with the `fs::dir_create(\"~/.boxr-auth\", mode = 700)` command.\n  \n::: {.callout-important}\n  \nThe contents of the JSON file is sufficient to access my box account. So I\nneed to keep it secret, and - if in doubt - revoke and replace the key pair\nwith a new one.\n  \n:::\n  \n### Authorizing the JWT-backed app\n\nIn contrast to the OAuth 2.0 app I created above, any JWT-backed app needs to\nbe explicitly authorized by the organization's admin. Here, I am using a free\ndeveloper box account, so I am my own admin and can perform the following steps.\n\n1. I navigate to the [home page of my box account](https://app.box.com/folder/0)\n  and click on the `Admin Console` button on the lower left of the page. (If\n  you don't see an option to access the Admin Console the you either have not\n  signed up for a _Developer_ account, or your organization has dedicated\n  admins[^7] and you are not one of them.)\n  \n::: {.callout-note collapse=\"true\"}\n\n### Screenshot\n![](screenshots/admin_console.jpg){#fig-admin_console}\n\n:::\n\n2. Within the admin console, I select `Integrations` in the left hand menu, and\n  then navigate to the `Platform Apps Manager` tab. Here, I can see all\n  previously authorized apps - but as this is my first JWT app there aren't any\n  listed.\n  \n::: {.callout-note collapse=\"true\"}\n  \n### Screenshot\n  \n![](screenshots/platform_apps_manager_1.jpg){#fig-platform_apps_manager_1}\n  \n:::\n  \n3. To add my new app, I click on the `Add Platform App` button on the upper\n  right of the page.\n  - Within the modal that pops up, I paste my app's `ClientID`, which I can\n    find either in the JSON token file or on the app's configuration page (\n    see above).\n  - After pressing the `Next` button, I can confirm the details and authorize\n    my app.\n\n::: {.callout-note collapse=\"true\"}\n\n### Screenshots\n\n:::: {layout-ncol=2}\n\n![](screenshots/add_platform_app_1.jpg){#fig-add_platform_app_1}\n![](screenshots/add_platform_app_2.jpg){#fig-add_platform_app_2}\n::::\n:::\n\n4. Once the authorization is complete, I can see my `r_jwt` app listed in the\n  `Platform Apps Manager` list.\n  \n::: {.callout-note collapse=\"true\"}\n  \n### Screenshot\n  \n![](screenshots/platform_apps_manager_2.jpg){#fig-platform_apps_manager_2}\n:::\n\n[^7]: If you are part of an organization with dedicated admins, you need to ask\nthem to authorize your app for you, and provide them with its `ClienID`.\n\n### Authenticating with the JSON web-token\n\nFor JWT authentication, the `box_auth_service()` function is used. I can either\npoint its `token_file` argument to the JSON file downloaded above, or provide\nits content as a string via its `token_text` argument [^5]. (Alternatively,\nI could also provide the path to the JSON file via the `BOX_TOKEN_FILE`\nenvironmental variable.)\n\n[^5]: I do some of my analyses using [Saturn Cloud](https://saturncloud.io/), \nwhich offers  convenient ways to inject _secrets_ into cloud instances - either\nas environmental variables or text files. Because the JWT file is plain text, it\nworks very well with that setup.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr::box_auth_service(token_file = \"~/.boxr-auth/jwt_config.json\")\n```\n:::\n\n\n\nOnce the `box_auth_service()` call has completed successfully, I can explore\nthe files and folders in box.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr::box_ls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nbox.com remote object list: Empty (no objects returned)\n```\n\n\n:::\n:::\n\n\n\nWait, the `box_ls()` command does return any objects - where is my \n`tutorials` folder? This bring me to a key difference between OAuth 2.0 and\nJWT backed apps: the former has access to my usual box account. But the \nlatter uses a _service account_, an entirely separate box account that has\naccess to _its own_ file system, but cannot access those of my main account.\n\n### Sharing files and folders with the service account\n\nFor some applications, up- and down-loading files that are _only_ accessible\nvia the service account might be all that is needed. But to collaborate with\nothers (including my interactive account), it is helpful to _share_ files with\nthis new account. That's what \n[collaboration workflows](https://r-box.github.io/boxr/articles/boxr-app-service.html#collaboration-workflows)\nare for.\n\nHere, I will give the service account access to my `tutorial` folder, which is\nowned by my main account (and which I accessed using OAuth 2.0 above).\n\nTo share the folder (e.g. to _create a collaboration_ in box' lingo), I need to\n\n1. Log in to my main account, either interactive via the box website or using\n  OAuth 2.0.\n2. Provide the identifier of the folder I want to share\n3. Provide `user_id` of the service account I want to share the folder with.\n  - This information was returned by the `box_auth_service()` call above. \n    In this example the `user_id` is `38323581037`.\n4. Decide on the `role`, e.g. the set of permissions, I want to grant to the\n  service account.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbox_auth()                                    # <1>\nobjects <- boxr::box_ls()                     # <2>\nfolder_id <- objects |>                       # <3>\n  as.data.frame() |> \n  poorman::filter(name == \"tutorial\") |> \n  poorman::pull(\"id\")\nboxr::box_collab_get(folder_id)               # <4>\nboxr::box_collab_create(                      # <5>\n  dir_id = folder_id, \n  user_id = \"38323581037\", \n  role = \"co-owner\") |>\n  as.data.frame()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           type          id created_by.type created_by.id created_by.name\n1 collaboration 58843247194            user   38300848207 Thomas Sandmann\n        created_by.login                created_at               modified_at\n1 tomsing1+box@gmail.com 2024-11-30T10:36:50-08:00 2024-11-30T10:36:50-08:00\n  expires_at   status accessible_by.type accessible_by.id accessible_by.name\n1       <NA> accepted               user      38323581037              r_jwt\n                                  accessible_by.login accessible_by.is_active\n1 AutomationUser_2316060_8nQ4K9ugzs@boxdevedition.com                    TRUE\n  invite_email     role           acknowledged_at item.type      item.id\n1         <NA> co-owner 2024-11-30T10:36:50-08:00    folder 296254108479\n  item.sequence_id item.etag item.name is_access_only\n1                0         0  tutorial          FALSE\n```\n\n\n:::\n:::\n\n\n\n1. Re-authenticate with my OAuth 2.0 credentials.\n2. List files & folders at the root of my box account.\n3. Extract the identifier of the `tutorial` folder.\n4. Confirm that the folder currently doesn't have collaborators, e.g. is not\n  shared with any other box account (service or otherwise).\n5. Share the `tutorial` folder with the service account, whose use_id is\n   `38323581037`.\n\nNow that the service account has access to the `tutorial` folder, I \nre-authenticate via `box_auth_service(). The `r_jwt` app can now list the \ncontents of the `tutorial` folder:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr::box_auth_service(token_file = \"~/.boxr-auth/jwt_config.json\")\nobjects <- boxr::box_ls(folder_id)\nobjects |> as.data.frame()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        name type            id size description                  owner\n1 mtcars.csv file 1713588728473 1281             tomsing1+box@gmail.com\n2 mtcars.rds file 1713594291978 1225             tomsing1+box@gmail.com\n                path         modified_at content_modified_at\n1 All Files/tutorial 2024-11-30 10:36:46 2024-11-30 10:36:46\n2 All Files/tutorial 2024-11-30 10:35:37 2024-11-30 10:35:37\n                                      sha1 version version_no    version_id\n1 dfd44f97e2bd9b5efe4bd2e87851cfe717f3fc2f      10         10 1886588891382\n2 c41ea4b33768b6a4ae886e592e13090939fab642       1          1 1886592083178\n```\n\n\n:::\n:::\n\n\n\nand it can also write to it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr::box_save_rds(object = mtcars,\n                   dir_id = folder_id, \n                   file_name = \"mtcars.rds\",\n                   description = \"The mtcars dataset serialized as an RDS file\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nbox.com remote file reference\n\n name        : mtcars.rds \n description : The mtcars dataset serialized as an RDS file \n file id     : 1713594291978 \n version     : V3 \n size        : 1.2 kB \n modified at : 2024-11-30 10:36:53 \n created at  : 2024-11-30 10:36:53 \n uploaded by : AutomationUser_2316060_8nQ4K9ugzs@boxdevedition.com \n owned by    : tomsing1+box@gmail.com \n shared link : None \n\n parent folder name :  tutorial \n parent folder id   :  296254108479 \n```\n\n\n:::\n\n```{.r .cell-code}\nboxr::box_ls(dir_id = folder_id) |>\n  as.data.frame()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        name type            id size\n1 mtcars.csv file 1713588728473 1281\n2 mtcars.rds file 1713594291978 1225\n                                   description                  owner\n1                                              tomsing1+box@gmail.com\n2 The mtcars dataset serialized as an RDS file tomsing1+box@gmail.com\n                path         modified_at content_modified_at\n1 All Files/tutorial 2024-11-30 10:36:46 2024-11-30 10:36:46\n2 All Files/tutorial 2024-11-30 10:36:53 2024-11-30 10:36:53\n                                      sha1 version version_no    version_id\n1 dfd44f97e2bd9b5efe4bd2e87851cfe717f3fc2f      10         10 1886588891382\n2 c41ea4b33768b6a4ae886e592e13090939fab642       3          3 1886587197566\n```\n\n\n:::\n:::\n\n\n\n### Modifying collaborations\n\nWe can also revoke the permissions of the service account, by deleting the\ncollaboration, if necessary:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxr::box_auth()                              # <1>\ncollab <- boxr::box_collab_get(folder_id)     # <2>\ncollab_id <- collab |>\n  as.data.frame() |>\n  poorman::pull(id)\nboxr::box_collab_delete(collab_id)\ncollab <- boxr::box_collab_get(folder_id)     # <3>\n```\n:::\n\n\n\n1. Re-authenticate as the original owner of the folder.\n2. Retrieve information about the sharing settings / collaborations of the\n  folder, including the `id` of the collaboration.\n3. Delete the collaboration by specifying its unique id.\n\n\n\n\n\n\n\n## Reproducibility\n\n<details>\n<summary>\nSession Information\n</summary>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Debian GNU/Linux 12 (bookworm)\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.21.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/Los_Angeles\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] jose_1.2.1    openssl_2.2.2 poorman_0.2.7 boxr_0.3.6   \n\nloaded via a namespace (and not attached):\n [1] bit_4.5.0         jsonlite_1.8.9    dplyr_1.1.4       compiler_4.4.1   \n [5] renv_1.0.11       tidyselect_1.2.1  stringr_1.5.1     assertthat_0.2.1 \n [9] yaml_2.3.10       fastmap_1.2.0     mime_0.12         R6_2.5.1         \n[13] generics_0.1.3    curl_6.0.1        knitr_1.49        tibble_3.2.1     \n[17] pillar_1.9.0      R.utils_2.12.3    rlang_1.1.4       utf8_1.2.4       \n[21] stringi_1.8.4     xfun_0.49         fs_1.6.5          bit64_4.5.2      \n[25] cli_3.6.3         magrittr_2.0.3    rio_1.2.3         digest_0.6.37    \n[29] askpass_1.2.1     lifecycle_1.0.4   R.methodsS3_1.8.2 R.oo_1.27.0      \n[33] vctrs_0.6.5       evaluate_1.0.1    glue_1.8.0        data.table_1.16.2\n[37] fansi_1.0.6       rmarkdown_2.29    purrr_1.0.2       httr_1.4.7       \n[41] tools_4.4.1       pkgconfig_2.0.3   htmltools_0.5.8.1\n```\n\n\n:::\n:::\n\n\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}