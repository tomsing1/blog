{
  "hash": "7d37989c8da0820c80112392d56bcf06",
  "result": {
    "markdown": "---\ntitle: \"Distributing R packages with a drat repository hosted on AWS S3\"\nauthor: \"Thomas Sandmann\"\ndate: \"2023-01-21\"\nfreeze: true\ncategories: [R, AWS, TIL]\neditor:\n  markdown:\n    wrap: 72\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n## tl;dr\n\nToday I learned how to\n\n- Build an R package into source and binary bundles for distribution.\n- Create a local drat repository.\n- Add an R package to the repository and install it from there.\n- Host the repository remotely in an AWS S3 bucket.\n\nMany thanks to [Dirk Eddelbuettel](https://dirk.eddelbuettel.com/) for creating\nand documenting the [drat R package](https://cran.r-project.org/package=drat)!\n(As always, any mistakes are my own.)\n\n### Motivation\n\nThere are multiple ways for developers to share R packages publicly,\ne.g.\n\n- Submit them to the [The Comprehensive R Archive Network\n  (CRAN)](https://cran.r-project.org/),\n- Contribute them to the [Bioconductor](https://www.bioconductor.org/)\n  project,\n- Publish them via [rOpenSci's\n  R-universe](https://ropensci.org/r-universe/)\n\nUser can then install these packages via the familiar `install.packages()`\ncommand.\n\nAlternatively, authors can share their code through version control systems\nlike [github](https://github.com/) or [gitlab](https://about.gitlab.com/), \nand users can install them with third-party tools e.g.\n[the remotes R package](https://cran.r-project.org/package=remotes).\n\nBut **how can you make an R package available privately**, e.g. for use\nwithin an organization? \n\nIn this tutorial, I demonstrate how to set up your own package repository with\n[Dirk Eddelbuettel's](https://dirk.eddelbuettel.com/) \n[drat R package](https://cran.r-project.org/package=drat),\nadd a package, make R aware of the new repo - and host it remotely on AWS S3.\n\n### Why drat?\n\nDirk Eddelbuettel [highlights two main\nadvantages:](https://eddelbuettel.github.io/drat/vignettes/dratfaq/)\n\n- A package installed from a drat repository will be supported by\n  `install.packages()` and `update.packages()`, so the user has easy\n  methods for keeping up-to-date.\n- The package author has better control over the package version users\n  install, because they actively push specific releases into the\n  repository.\n\n[Please see Dirk's Drat\nFAQ's](https://eddelbuettel.github.io/drat/vignettes/dratfaq/) for\nadditional points, e.g. ['Why could install_github be\nwrong?'](https://eddelbuettel.github.io/drat/vignettes/dratfaq/#why-could-install_github-be-wrong)\n\n### Prequisites\n\nHadley Wickham and Jenny Bryan have documented how to author, document\nand build R packages in their freely-available [R Packages\nbook](https://r-pkgs.org/). In this walkthrough I am using Mac OS X\n(v13.1), but you can find instructions to set up Windows or Linux build\nenvironments in their [R build\ntoolchain](https://r-pkgs.org/setup.html#setup-tools) chapter.\n\n### Bundling an R package's source code for distribution\n\nFirst, we need an R package that's ready for distribution. Here, I am using the\n`toy` R package \n[that you can retrieve from github](https://github.com/tomsing1/toy), \neither via\n`git clone https://github.com/tomsing1/toy` or by downloading its source\ncode as a \n[zip file](https://github.com/tomsing1/toy/archive/refs/heads/main.zip).\n(Feel free to follow along with another R package instead - as long as\nyou have the \n[source package](https://r-pkgs.org/structure.html#sec-source-package),\nthe following steps apply.)\n\nNext, we \n[bundle the package](https://r-pkgs.org/structure.html#sec-bundled-package)\ninto a single compressed file with the `.tar.gz` file extension. Let's\ndownload the `.zip` file linked above into the `~/Downloads` folder and use the\n`R CMD build` command to create a _source bundle_ [^1]:\n\n[^1]: Alternatively, you can also create the bundle from within R using\n    the\n    [devtools::build()](https://devtools.r-lib.org/reference/build.html)\n    command.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ~/Downloads\ncurl -s -L -O https://github.com/tomsing1/toy/archive/refs/heads/main.zip\nunzip -o -q main.zip\nrm main.zip\nR CMD build --force toy-main\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n* checking for file ‘toy-main/DESCRIPTION’ ... OK\n* preparing ‘toy’:\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted ‘LazyData’ from DESCRIPTION\n* building ‘toy_0.1.0.tar.gz’\n```\n:::\n:::\n\n\nWe now have the `toy_0.1.0.tar.gz` file, ready to be inserted into a new\n(or existing) drat repository.\n\n### Creating a local drat repository\n\nTo create a new repository, we start by installing the [drat R\npackage](https://cran.r-project.org/package=drat) itself (if it's not\navailable on your system already) with the following R commands:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!requireNamespace(\"drat\", quietly = TRUE)) {\n  install.packages(\"drat\")\n}\nlibrary(drat)\n```\n:::\n\n\nYou can specify the path of your drat repository either by setting the\n`dratRepo` option [^2]:\n\n[^2]: You might want to add this option to your\n    [.Rprofile](https://rstats.wtf/r-startup.html#rprofile) file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(dratRepo = \"~/drat-tutorial\")\ngetOption(\"dratRepo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"~/drat-tutorial\"\n```\n:::\n:::\n\n\nor by providing it as an argument to the `drat::insertPackage()`\nfunction (see below).\n\nLet's create a new drat repository in our home directory [^3], and\npopulate it with a minimal `index.html` file (to avoid\n`HTTP 404 Not Found` errors later).\n\n[^3]: Of course, you can place it anywhere you like, including e.g.\n    network drives, as long as you can write to the directory. If you\n    are using Windows, please remember to use backward instead of\n    forward slashes in your paths.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"~/drat-tutorial\", showWarnings = FALSE)\nwriteLines(\n  text = \"<!doctype html><title>My awesome drat repository!</title>\",\n  con = \"~/drat-tutorial/index.html\"\n)\n```\n:::\n\n\nNow we are ready to insert the `toy` package bundle into the repository\nwith drat's `insertPackage()` command [^4]:\n\n[^4]: In this tutorial, I use the `::` notation to highlight which\n    package a function originates from. Because we attached the package\n    with the `library(drat)` command before, the `drat::` prefix could\n    be omitted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrat::insertPackage(file = \"~/Downloads/toy_0.1.0.tar.gz\",\n                    repodir = \"~/drat-tutorial\")\n```\n:::\n\n\nNow, the `~/drat-tutorial` folder contains the following files:\n\n![drat repository](repository_source.png)\n\n### Accessing the local drat repository\n\nWhen you prompt your R installation to install or update R packages, it\nsearches repositories specified in the `repos` option. On my system,\nonly the default repository is set in a fresh R session [^5]:\n\n[^5]: In this tutorial, I use the `::` notation to highlight in which\n    package functions originate from. Because we attached the package\n    with the `library(drat)` command before, the `drat::` prefix could\n    be omitted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetOption(\"repos\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         CRAN \n\"https://cloud.r-project.org\" \n```\n:::\n:::\n\n\nIf I try to install our example `toy` R package, I don't succeed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"toy\", type = \"source\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nInstalling package into '/Users/sandmann/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'toy' is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\n```\n:::\n:::\n\n\nbecause R is not aware of our new repository, yet.\n\n::: callout-note\n\n### Installing from source\n\nAt this point, we must add the `type=\"source\"` argument, because we have\nonly added the *source* bundle to the repository. We will add a compiled\nversion in a moment - read on!\n:::\n\nTo test our local repository, we add its path to the list of known\nrepositories.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrat::addRepo(\"LocalRepo\", \"file://Users/sandmann/drat-tutorial\")\ngetOption(\"repos\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                 CRAN                             LocalRepo \n        \"https://cloud.r-project.org\" \"file://Users/sandmann/drat-tutorial\" \n```\n:::\n:::\n\n\n::: callout-important\n### Specifying file:// paths\n\nBy default, drat's `addRepo()` command assumes that repositories are\nhosted on [github-pages](https://pages.github.com/). Because we want to\naccess a repo via the filesystem (either locally or on a network drive),\nwe need to explicitly add the `file:/` prefix - and use the absolute\nfile path (e.g. returned by `path.expand(\"~/drat-tutorial\")`) to specify its\nlocation.\n\nIn this case, concatenating `file:/` with `/Users/sandmann/drat-tutorial`\nproduces the final `file://Users/sandmann/drat-tutorial` location (note the\ndouble forward slashes).\n:::\n\nNow, we can install it with the usual `install.packages()` command [^6]:\n\n[^6]: If you use Bioconductor, the `BiocManager::repositories()`\n    specifies additional repositories that host its annotation and\n    software packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"toy\", type = \"source\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nInstalling package into '/Users/sandmann/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n```\n:::\n:::\n\n\nGreat! We have successfully installed our `toy` R package from our brand\nnew repository. Now it is time to make it available to other users as\nwell.\n\n### Building binary packages\n\nWindows and Mac users who install packages from \n[CRAN](https://cran.r-project.org/)\nor any user installing files from the\n[Posit Public Package Manager (PPPM)](https://packagemanager.rstudio.com/client/#/)\nwill usually receive \n[a binary package](https://r-pkgs.org/Structure.html#sec-structure-binary).\nCRAN accepts package bundles and creates the platform-specific binary file for\ndistribution. To offer the same service to users of our drat repository, we\nneed to compile the binary package ourselves.\n\nHere, I create the Mac OS binary package from the bundle we obtained above\nby executing the following command on my Mac OS operating system:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ~/Downloads\nR CMD INSTALL --build toy_0.1.0.tar.gz\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n* installing to library ‘/Users/sandmann/Library/R/x86_64/4.2/library’\n* installing *source* package ‘toy’ ...\n** using staged installation\n** R\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* creating tarball\npackaged installation of ‘toy’ as ‘toy_0.1.0.tgz’\n* DONE (toy)\n```\n:::\n:::\n\n\nThis command will first install the package into my default R library, and then\ncreate the binary `toy_0.1.0.tgz` file.\n\nNext, we add it to our local drat repository (note the `.tgz` file suffix).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrat::insertPackage(file = \"~/Downloads/toy_0.1.0.tgz\",\n                    repodir = \"~/drat-tutorial\")\n```\n:::\n\n\nNow, the `~/drat-tutorial` folder contains a new subdirectory (`bin`) with the\nbinary files for Mac OS X:\n\n![drat repository](repository_binary.png)\n\nAt long last, now we can omit the `type=\"source\"` argument from calls to \n`install.packages()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"toy\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nInstalling package into '/Users/sandmann/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nThe downloaded binary packages are in\n\t/var/folders/wc/9tswmr4s74s0x90wqh2007300000gp/T//Rtmpg6tHJA/downloaded_packages\n```\n:::\n:::\n\n\n## Hosting your drat repository on AWS S3\n\ndrat repositories can be hosted in any location\n\n1.  that you can write files to and\n2.  that can serve files via http\n\nBut unless you placed your drat repository into a network drive that is\naccessible by multiple users, it is currently only useful to yourself.\n\n::: {.callout-note collapse=\"true\"}\n### Sharing repository over a local network\n\nIf you chose a network drive as the location of your drat repository,\nthen other user can benefit from it right - as long as they can read from the\nshared directory. As before, the absolute path must be prefixed with the \n`file:/` prefix. For example, a repository that is available on *the user's* \nsystems at `/nfs/groups/groupABC/R/drat` would be added to the list of R\nrepositories via \n`drat::addRepo(\"workgroup\", \"file://nfs/groups/groupABC/R/drat\")`.\n:::\n\nThe [drat\ndocumentation](https://eddelbuettel.github.io/drat/vignettes/dratforusers/#case-1-using-github)\nillustrates how you can use [git](https://git-scm.com/) and [github\npages](https://pages.github.com/) to make your repository *publicly*\navailable.\n\nHere, we are interested in hosting a repository *privately* instead,\ne.g. in a location that is only accessible from within our own\norganization: \n\n- If you already have access to a private server that serves files\nto your users (e.g. via HTTP), then you can simply copy your repository there.\n- If your organization uses Amazon Web Services (AWS), you can also use an\n[S3 bucket to host your repository](https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html)\nand take advantage of the access controls set by your organization.\n\n::: {.callout-note collapse=\"true\"}\n\n### Public repositories in S3 buckets\n\nAlthough this use case focuses on hosting private repositories, you can of \ncourse also make repositories in S3 buckets publicly available. Alas,\ndata storage in S3 buckets incurs cost, while other options (e.g. github-pages,\nCRAN, Bioconductor, etc) are free, so this might not be your preferred option.\n\n:::\n\nWe will assume that you have write access to an S3 bucket that is\nconfigured to serve static files via HTTP. (For a brief outline of the\nnecessary steps, please \n[see the appendix]((#creating-and-configuring-an-s3-bucket-to-host-static-files))\n).\nHere, I am using a bucket called `drat-tutorial` - but you should create / \naccess your own bucket to follow along.\n\n::: callout-warning\nAWS S3 buckets can be configured to either be visible publicly, or\naccess can be restricted to specific IP addresses, security groups or\nother AWS resources. Please make sure you have configured your bucket in\na way that suits your needs.\n\nS3 buckets do *not* support the [HTTPS\nprotocol](https://en.wikipedia.org/wiki/HTTPS). If you require an\nencrypted file transfer, you might need a [different\nsolution](https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-https-requests-s3/).\n:::\n\nTo share our repository, we must first copy its folder to the S3 bucket, either\nvia the AWS Console or (more conveniently) with the\n[aws command line interface](https://aws.amazon.com/cli/)[^7]. (If you are \nadventurous, you can also mount an S3 bucket as a _filey_ system with\n[goofys](https://github.com/kahing/goofys)).\n\n[^7]: [Installation instructions](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html).\n\nAssuming you have set \n[the necessary AWS credentials](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html),\nthe following `aws s3 sync` command copies our repository to the `repo` folder\nwithin `drat-tutorial` bucket that I [created in the `us-west-1` AWS region](#creating-and-configuring-an-s3-bucket-to-host-static-files).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\naws s3 sync ~/drat-tutorial s3://drat-tutorial/repo\n```\n:::\n\n\nWe can use the `aws s3 ls` command to confirm the upload:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\naws s3 ls s3://drat-tutorial/repo/\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n                           PRE bin/\n                           PRE src/\n2023-01-21 20:28:30         58 index.html\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nWhenever we make changes to our local repository, e.g. after adding new packages\nor package versions, we have to rerun the `aws s3 sync` command to copy the \nnew files to the S3 bucket.\n\n:::\n\nNow that the files are in place, we can add our remote repository to the the\nlist of R repositories in our R session. First, we remove the `LocalRepo` \nrepository that we had added earlier, which points to the folder on our\nlocal filesystem.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(repos = getOption(\"repos\")[\n  setdiff(names(getOption(\"repos\")), \"LocalRepo\")\n])\n```\n:::\n\n\nThe we add the remote repository instead, by pointing to the URL of the\nS3 bucket [^8].\n\n[^8]: You can look up the URL for your bucket in the AWS S3 console: \n  ![S3 URL](s3_url.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrat::addRepo(\"S3repo\", \"http://drat-tutorial.s3.us-west-1.amazonaws.com/repo/\")\ngetOption(\"repos\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                   CRAN \n                          \"https://cloud.r-project.org\" \n                                                 S3repo \n\"http://drat-tutorial.s3.us-west-1.amazonaws.com/repo/\" \n```\n:::\n:::\n\n\nLet's try to install the `toy` package from our S3 drat repository:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"toy\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nInstalling package into '/Users/sandmann/Library/R/x86_64/4.2/library'\n(as 'lib' is unspecified)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nThe downloaded binary packages are in\n\t/var/folders/wc/9tswmr4s74s0x90wqh2007300000gp/T//Rtmpg6tHJA/downloaded_packages\n```\n:::\n:::\n\n\nSuccess! R has successfully connected to the remote repository and installed\nthe (binary) R package.\n\n## Conclusions\n\n- The `drat` R package makes it extremely simple to create a CRAN-like\n  repository. \n- The static files can be served via HTTP, making it straightforward to host\n  the repository e.g. in an AWS S3 bucket with a restrictive access policy.\n\n## Appendix\n\n### Creating and configuring an S3 bucket to host static files\n\nThe following steps briefly outline how to create and configure an S3\nbucket to act as a static web server via the AWS web interface (e.g. the\nAWS Console). For more details, please read the [AWS S3\ndocumentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html)\nand / or consult your local AWS expert.\n\n::: {.callout-warning}\n\nStoring files on AWS S3 is not free. In this tutorial, we only upload a limited\nnumber of small files, but please don't forget to purge them from your AWS\naccount afterward. \n\n:::\n\n1.  Create a new bucket (skip if you already have one)\n\n-   Make sure you create the bucket in the `region` that works best for\n    your organization (e.g. `us-west-1` if you want to host your files\n    in California).\n\n-   You do *not* need to enable `public access`, stick to the defaults\n    for your organization.\n\n    ![Create an S3 bucket](create_bucket.png)\n\n2. Next, navigate to your bucket's properties,\n\n    ![Bucket properties](bucket_properties.png)\n    \n    scroll all the way to the bottom of the page and \n    [enable Static website hosting](https://docs.aws.amazon.com/AmazonS3/latest/userguide/HostingWebsiteOnS3Setup.html#step2-create-bucket-config-as-website).\n    \n    ![Enable static hosting](static_hosting.png)\n    \n    (Typically) specify `index.html` as the\n    `Index document`.\n    \n    ![Define the index document](index_document.png)\n\n3. Under the `Permissions` tab, add a bucket policy that makes your\n  content available _within_ your organization\n   \n   ::: {.callout-warning}\n   \n   These settings determine who can access your files. Proceed with\n   caution to \n   [avoid inadvertently exposing your data to the world!](https://www.trendmicro.com/vinfo/pl/security/news/virtualization-and-cloud/data-on-123-million-us-households-exposed-due-to-misconfigured-aws-s3-bucket)\n   \n   :::\n   \n   For example, the following policy grants read access to all files in the\n   `s3://drat-tutorial/` bucket to requests originating (only) from the \n   `192.0.2.0` IP address. (Your own configuration will be different, of\n   course.)\n   \n   ```json\n   {\n     \"Version\": \"2012-10-17\",\n     \"Statement\": [\n       {\n         \"Sid\": \"PublicReadGetObject\",\n         \"Effect\": \"Allow\",\n         \"Principal\": \"*\",\n         \"Action\": [\n           \"s3:GetObject\"\n         ],\n         \"Resource\": [\n           \"arn:aws:s3:::drat-tutorial/*\"\n         ],\n         \"Condition\": {\n           \"IpAddress\": {\n             \"aws:SourceIp\": \"192.0.2.0/32\"\n           }\n         }\n       }\n     ]\n   }\n   ```\n   ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}