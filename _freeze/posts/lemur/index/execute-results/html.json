{
  "hash": "a98184b2ee5df153eb9e176d176a75d8",
  "result": {
    "markdown": "---\ntitle: \"Lemur: analyzing multi-condition single-cell data\"\nauthor: \"Thomas Sandmann\"\ndate: \"2023-03-12\"\nfreeze: true\ncategories: [TIL, R, scRNAseq]\neditor:\n  markdown:\n    wrap: 72\nformat:\n  html:\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n---\n\n\n\n\nThis week, \n[Constantin Ahlmann-Eltze](https://const-ae.name/) and \n[Wolfgang Huber](https://www.embl.org/groups/huber/)\npublished a\n[preprint](https://www.biorxiv.org/content/10.1101/2023.03.06.531268v1)\ndescribing `LEMUR`, a new approach to analyzing single-cell experiments that\ninclude samples from multiple conditions, e.g. drug treatments, disease-status,\netc.\n\nTo date, such analyses often involve two separate steps, e.g.\n\n1. Defining clusters of cells, e.g. cell types or states\n2. Differential expression analysis _within_ each cell type\n\nIn contrast, `LEMUR` considers the continuous latent space the individual cells\noccupy, incorporating the design of the experiment, and then performs\ndifferential expression analysis in this embedding space.\n\nAn R package implementing `LEMUR` is available from\n[github](https://github.com/const-ae/lemur)\nand includes an example dataset [^1].\n\n## Ellwanger et al: Comparing Trem2 wildtype and knock-out mouse microglia\n\nHere, I am exploring `LEMUR` by examining scRNA-seq data published by \n[Ellwanger et al, 2021](https://pubmed.ncbi.nlm.nih.gov/33446504/),\nwho injected three strains of\n[5XFAD mice](https://www.jax.org/strain/008730),\na murine model of familial Alzheimer's Disease, either \n\n1. carrying the wild-type (WT) _Trem2_ gene,\n2. carrying the R47H _Trem2_ variant, believed to be a loss-of-function variant,\n3. or completely lacking _Trem2_ expression\n\nwith either a Trem2 agonist (`hT2AB`) or a negative control antibody (`hIgG1`). \n\n48 hours later, the authors isolated CD45-positive [^2] cells from the cortex\nand performed single-cell RNA-seq analysis using the 10X Genomics platform.\n\n### Retrieving the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(Matrix)\nlibrary(org.Mm.eg.db)\nlibrary(patchwork)\nlibrary(purrr)\nlibrary(readr)\nlibrary(scater)\nlibrary(SingleCellExperiment)\nlibrary(tidyr)\n```\n:::\n\n\nEllwanger et al made both raw and processed data available via the NCBI GEO\nand SRA repositories under \n[GEO accession GSE156183](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE156183).\n\nThey also included complete metadata for each cell, making this a great dataset\nfor re-analysis.\n\nLet's start by retrieving the\n\n1. [processed counts (500 Mb)](https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE156183&format=file&file=GSE156183%5FRAW%2Emtx%2Egz) \n  and the\n2. [cell metadata (13 Mb)](https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE156183&format=file&file=GSE156183%5FCell%5Fmetadata%2Etsv%2Egz)\n\nfiles from GEO and store them in a temporary directory:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_dir <- file.path(tempdir(), \"ellwanger\")\ndir.create(temp_dir, showWarnings = FALSE, recursive = TRUE)\n\noptions(timeout = 360)\nurl_root <- paste0(\"https://www.ncbi.nlm.nih.gov/geo/download/?acc=\",\n                   \"GSE156183&format=file&file=GSE156183%5F\")\n\nraw_counts <- file.path(temp_dir, \"counts.mtx.gz\")\ndownload.file(\n  paste0(url_root, \"RAW%2Emtx%2Egz\"), \n  destfile = raw_counts)\n\ncell_metadata <- file.path(temp_dir, \"cell_metadata.tsv.gz\")\ndownload.file(\n  paste0(url_root, \"Cell%5Fmetadata%2Etsv%2Egz\"), \n  destfile = cell_metadata)\n```\n:::\n\n\nand read the sparse count matrix into our R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- Matrix::readMM(raw_counts)\ncell_anno <- readr::read_tsv(cell_metadata, show_col_types = FALSE)\nstopifnot(nrow(cell_anno) == ncol(m))\n```\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n\nUnfortunately, the `GSE156183_Feature_metadata.tsv.gz` feature (= gene) \nannotation file the authors deposited with GEO _actually_ contains _cell_ \nannotations. But luckily, they also deposited counts matrices in TSV format for\neach sample, which include the ENSEMBL gene identifier for each row.\n\nHere, I download the TAR archive that contains all of the TSV files, and then\nextract the gene identifiers from one of the files so I can add them to the\nexperiment-wide raw count matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_sample <- \"GSM4726219_RAW-R47H-male-IgG-rep2.tsv.gz\"\ntar_archive <- file.path(temp_dir, \"RAW.tar\")\ndownload.file(\n  \"https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE156183&format=file\",\n  destfile = tar_archive)\nutils::untar(tar_archive, files = selected_sample, exdir = tempdir())\ngene_ids <- readr::read_tsv(file.path(tempdir(), selected_sample), \n                            col_select = any_of(\"feature_id\"),\n                            show_col_types = FALSE) %>%\n  dplyr::pull(feature_id)\nstopifnot(length(gene_ids) == nrow(m))\nrow.names(m) <- gene_ids\n```\n:::\n\n\n:::\n\n### Creating a SingleCellExperiment object\n\nNow I have all the pieces of information required to create a\n`SingleCellExperiment`: \n\n- the raw counts (in the form of a sparse matrix),\n- the cell annotations (in the form of a data.frame)\n- the two UMAP dimensions used by the authors (included in the cell metadata).\n\nI choose to retain only a subset of the (many) cell-level annotation columns,\nadd gene symbols as row annotations, extract the UMAP coordinates into a\nseparate matrix - and store all of it in the `sce` object.\n\nNext, I am removing cells without an assigned cell type, and also add a coarser\ncell type annotation that collapses the different microglia states reported by\nthe authors into a single category. Finally, I filter genes without a valid\ngene symbol and add an assay slot with the normalized log2 counts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_data <- cell_anno %>%\n  dplyr::select(cell_id, celltype, sample, sex, genotype, treatment, \n                starts_with(\"QC.\")\n  ) %>%\n  as.data.frame() %>%\n  tibble::column_to_rownames(\"cell_id\")\ncolnames(m) <- row.names(col_data)\n\nrow_data <- data.frame(\n  symbol = AnnotationDbi::mapIds(org.Mm.eg.db, keys = gene_ids,\n                                 column = \"SYMBOL\", keytype = \"ENSEMBL\"),\n  row.names = gene_ids\n)\n\numap <- cell_anno %>%\n  dplyr::select(ends_with(\"CD45pos\")\n  ) %>%\n  as.matrix()\nrow.names(umap) <- colnames(m)\ncolnames(umap) <- paste(\"UMAP\", seq.int(ncol(umap)))\n\nsce <- SingleCellExperiment(\n  assays = list(counts = m),\n  rowData = row_data,\n  colData = col_data,\n  reducedDims = list(UMAP = umap)\n)\n\nsce <- sce[, !is.na(sce$celltype)]\nsce$celltype_coarse <- dplyr::case_when(\n    grepl(x = sce$celltype, pattern = \"Microglia\") ~ \"Microglia\",\n    TRUE ~ sce$celltype\n  )\nsce$treatment <- factor(sce$treatment, levels = c(\"IgG\", \"hT2AB\"))\nsce$mg_type <- factor(sub(\"Microglia.\", \"\", sce$celltype, fixed = TRUE))\nsce <- sce[!is.na(rowData(sce)$symbol), ]\nsce <- logNormCounts(sce)\n\nrm(list = c(\"m\", \"cell_anno\", \"gene_ids\", \"row_data\", \"col_data\"))\n```\n:::\n\n\n\n\nThis `SingleCellExperiment` object is now ready for downstream analysis.\n\n## Subsetting the experiment to samples of interest\n\nThis study contains multiple experimental variables, e.g. each sample is \nannotated with one of the three `genotypes`, one of two `treatments` and the\n`sex` for each mouse. \n\nHere, I will focus only on the difference between TREM2 wildtype and \nTREM2 knock-out animals treated with the `IgG` control antibody. Only female\nknock-out animals were included in the study, so I exclude the male animals\nfrom the other strain as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce <- sce[, which(sce$genotype %in% c(\"TREM2_CV-5XFAD\", \"Trem2_KO-5XFAD\"))]\nsce <- sce[, which(sce$sex == \"female\" & sce$treatment == \"IgG\")]\nwith(colData(sce), table(genotype, treatment))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                treatment\ngenotype          IgG hT2AB\n  TREM2_CV-5XFAD 3781     0\n  Trem2_KO-5XFAD 8911     0\n```\n:::\n:::\n\n\nAfter subsetting, the experiment now contains 5 \nsamples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolData(sce) %>%\n  as.data.frame() %>%\n  dplyr::select(sample, treatment, genotype) %>%\n  dplyr::distinct() %>%\n  tibble::remove_rownames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              sample treatment       genotype\n1 CV-female-IgG-rep1       IgG TREM2_CV-5XFAD\n2 CV-female-IgG-rep2       IgG TREM2_CV-5XFAD\n3 KO-female-IgG-rep1       IgG Trem2_KO-5XFAD\n4 KO-female-IgG-rep2       IgG Trem2_KO-5XFAD\n5 KO-female-IgG-rep3       IgG Trem2_KO-5XFAD\n```\n:::\n:::\n\n\nAt this point, I can reproduce e.g. a version of\n[Figure 3E](https://www.pnas.org/doi/10.1073/pnas.2017742118#fig03)\nfrom the original paper, using the UMAP coordinates and cell type labels\nprovided by the authors. (My version of the figure only includes cells\nfrom the selected subset of samples, not all cells captured in the study.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors <- c(\"Microglia\" = \"darkgrey\",\n            \"T cells\" = \"skyblue\",\n            \"Macrophages\" = \"firebrick\",\n            \"MO:T\" = \"darkgreen\",\n            \"Dendritic cells\" = \"green\",\n            \"Monocytes\" = \"orange\",\n            \"B cells\" = \"navy\",\n            \"Neutrophils\" = \"darkblue\",\n            \"HCS\" = \"grey\", \n            \"Fibroblasts\" = \"yellow\")\nscater::plotReducedDim(sce, \"UMAP\", colour_by = \"celltype_coarse\") +\n  scale_color_manual(values = colors, name = \"Cell type\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nBecause Ellwanger et al captured all cells with CD45 expression, the dataset\nincludes other immune cell types besides microglia. Let's remove those to focus\nonly on the latter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce <- sce[, sce$celltype_coarse == \"Microglia\"]\nsce$mg_type <- factor(\n  sce$mg_type, \n  levels = c(\"Resting\", \"t1\", \"t2\", \"t3\", \"t4\", \"t5\", \"t6\", \"IFN-R\", \"DAM\", \n             \"MHC-II\", \"Cyc-M\"))\n```\n:::\n\n\nMost microglial states were captured in animals from both genotypes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmg_colors <- c(\n  \"Cyc-M\" = \"navy\",\n  \"DAM\" = \"darkgreen\",\n  \"IFN-R\" = \"#C12131\", \n  \"MHC-II\" = \"green\",\n  \"Resting\" = \"grey50\",\n  \"t1\" = \"#FDF5EB\",   \n  \"t2\" =  \"#FFE2C0\", \n  \"t3\" = \"#FFC08E\",\n  \"t4\" = \"#FE945C\",\n  \"t5\" =  \"#EC5D2F\",\n  \"t6\" = \"#C12131\"\n)\nscater::plotReducedDim(sce, \"UMAP\", colour_by = \"mg_type\") +\n  scale_color_manual(values = mg_colors, name = element_blank()) + \n  facet_wrap(~ sce$genotype)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Differential expression analysis with lemur\n\nNow I am ready to explore the `lemur` R package to ask: \"which neighborhoods\nshow for differential expression between samples from WT and knock-out animals?\"\n\nThe following steps closely follow the examples outlined on the\n[lemor github repository's README](https://github.com/const-ae/lemur) - many\nthanks for the great documentation, Constantin! (All mistakes and \nmisunderstandings in this post are my own, as always.)\n\n### Dependencies & installation\n\nFollowing the instructions from the\n[lemu github repository](https://github.com/const-ae/lemur)\nI then installed the latest version of the \n[glmGamPoi](https://github.com/const-ae/glmGamPoi) \npackage, and then the `lemur` package itself from their github repositories.\n\nTo harmonize results across batches (in this case: samples), I will use\nharmony, so I need to install it from its github repository as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"const-ae/glmGamPoi\")\nremotes::install_github(\"const-ae/lemur\")\nremotes::install_github(\"immunogenomics/harmony\")\n```\n:::\n\n\n### Subsetting the experiment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lemur)\nn_cells <- 1000L\n```\n:::\n\n\nTo speed up my exploration of the `LEMUR` workflow, I subset the experiment\nto 1000 random cells from each of the two genotypes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1L)\ngenotypes <- unique(sce$genotype)\nselected_cells <- as.vector(sapply(genotypes, \\(g) {\n  sample(which(sce$genotype == g), n_cells)\n}))\n```\n:::\n\n\nAs expected, most microglial states described in the paper remain represented in \nthe downsampled dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(sce$celltype[selected_cells], sce$genotype[selected_cells])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   \n                    TREM2_CV-5XFAD Trem2_KO-5XFAD\n  Microglia.Cyc-M               17             32\n  Microglia.DAM                122            127\n  Microglia.IFN-R               46             33\n  Microglia.MHC-II              16              0\n  Microglia.Resting            101            117\n  Microglia.t1                 145            133\n  Microglia.t2                 119             71\n  Microglia.t3                  84            140\n  Microglia.t4                 161             93\n  Microglia.t5                 132            209\n  Microglia.t6                  57             45\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nscater::plotReducedDim(\n  sce[, selected_cells], \"UMAP\", colour_by = \"mg_type\") +\n  labs(title = sprintf(\"Subsampled to %s microglia\", length(selected_cells))) +\n  scale_color_manual(values = mg_colors, name = element_blank()) + \n  facet_wrap(~ sce$genotype[selected_cells])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Fitting the LEMUR model\n\nNext, I fit the latent embedding multivariate regression (LEMUR) model with the\n`lemur()` function. Because the dataset is relatively homogeneous, e.g. it \ncontains only microglia, I chose to consider only 25 Principal Components and\nused 15 dimensions for the LEMUR embedding (e.g. the default number).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- lemur::lemur(sce[, selected_cells], design = ~ genotype,\n                    n_ambient = 25, n_embedding = 15, verbose = FALSE)\n```\n:::\n\n\nBecause each sample was processed in a separate channel of the 10X Genomics\nmicrofluidics device, I am aligning the embeddings of similar cell clusters\nusing\n[harmony](https://www.nature.com/articles/s41592-019-0619-0).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- lemur::align_harmony(fit, stretching = FALSE)\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass: lemur_fit \ndim: 23870 2000 \nmetadata(12): n_ambient n_embedding ... alignment_design\n  alignment_design_matrix\nassays(1): expr\nrownames(23870): ENSMUSG00000051951 ENSMUSG00000025900 ...\n  ENSMUSG00000094915 ENSMUSG00000079808\nrowData names(1): symbol\ncolnames(2000): CELL21559 CELL21072 ... CELL45651 CELL52059\ncolData names(22): celltype sample ... celltype_coarse mg_type\nreducedDimNames(2): linearFit embedding\nmainExpName: NULL\naltExpNames(0):\n```\n:::\n:::\n\n\nThe returned `lemur_fit` object contains the `embedding` matrix,\nthe latent space in which the differential expression analysis is performed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(fit$embedding)  # 15 dimensions, as specified above\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   15 2000\n```\n:::\n:::\n\n\nLet's plot the first two dimensions against each other, coloring each cell by\nthe microglial state Ellwanger et al identified through Louvain clustering. \n(This information has not been used by `lemur`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot dim 1 vs dim 2\nscater::plotReducedDim(\n  fit, \"embedding\", colour_by = \"mg_type\", shape_by = \"genotype\") +\n  scale_color_manual(values = mg_colors, name = element_blank()) + \n  labs(\n    title = \"Embedding after accounting for genotype\",\n    subtitle = sprintf(\"Subsampled to %s microglia\", length(selected_cells)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nCells group by Ellwanger et al's subtype labels, and cells from both \ngenotypes are intermixed. We can obtain an alternative visualization by\narranging the cells in two dimensions using \n[Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP)](https://umap-learn.readthedocs.io/en/latest/):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# run UMAP on the embedding\numap <- uwot::umap(t(fit$embedding))\ncolnames(umap) <- c(\"UMAP 1\", \"UMAP 2\")\nreducedDim(fit, \"UMAP\") <- umap\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nscater::plotReducedDim(\n  fit, \"UMAP\", colour_by = \"mg_type\", shape_by = \"genotype\") +\n  scale_color_manual(values = mg_colors, name = element_blank()) + \n  labs(\n    title = \"Embedding after accounting for genotype (UMAP)\",\n    subtitle = sprintf(\"Subsampled to %s microglia\", length(selected_cells))) +\n  facet_wrap(~ colData(fit)$genotype)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### Testing for differential expression\n\nNext, the `test_de` function performs a differential expression analysis for\nlocations in the embedding - by default, it will estimate it for each location\nan original cell was mapped to.\n\nThe `find_de_neighborhoods` function accepts the original counts and will\nestimate the log2 fold change for each neighborhood, based on aggregating the\ncounts to pseudobulk measures across the cells in each neighborhood.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- test_de(\n  fit, \n  contrast = cond(genotype = \"Trem2_KO-5XFAD\") - \n    cond(genotype = \"TREM2_CV-5XFAD\"))\nneighborhoods <- find_de_neighborhoods(\n  fit, \n  counts = counts(sce)[, selected_cells],\n  group_by = vars(sample, genotype),\n  include_complement = FALSE) %>%\n  dplyr::as_tibble() %>%\n  dplyr::arrange(pval) %>%\n  dplyr::left_join(\n    tibble::rownames_to_column(as.data.frame(rowData(fit)), \"gene_id\"), \n    by = c(name = \"gene_id\")) %>%\n  dplyr::select(symbol, everything())\n```\n:::\n\n\nThe `neighborhoods` data.frame contains differential expression statistics\nfor each gene.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(neighborhoods)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 12\n  symbol name       region indices n_cells   mean     pval adj_p…¹ f_sta…²   df1\n  <chr>  <chr>      <chr>  <I<lis>   <int>  <dbl>    <dbl>   <dbl>   <dbl> <int>\n1 Fxyd5  ENSMUSG00… 1      <int>      1809 -0.251 6.09e-10 1.45e-5   118.      1\n2 Il4i1  ENSMUSG00… 1      <int>      1069 -0.181 2.40e- 9 2.87e-5   101.      1\n3 Lpl    ENSMUSG00… 1      <int>       830 -0.469 5.82e- 9 4.63e-5    90.6     1\n4 Cd74   ENSMUSG00… 1      <int>       611 -1.12  9.25e- 9 5.52e-5    85.7     1\n5 Axl    ENSMUSG00… 1      <int>      1584 -0.257 1.78e- 8 8.49e-5    79.2     1\n6 H2-Aa  ENSMUSG00… 1      <int>      1172 -0.247 6.81e- 8 2.71e-4    67.1     1\n# … with 2 more variables: df2 <dbl>, lfc <dbl>, and abbreviated variable names\n#   ¹​adj_pval, ²​f_statistic\n```\n:::\n:::\n\n\nA volcano plot shows that we recovered a number of genes with differential \nexpression in one or more neighborhoods (after accounting for multiple testing):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# volcano plot\nneighborhoods %>%\n  ggplot(aes(x = lfc, y = -log10(pval))) +\n    geom_point(aes(color  = adj_pval < 0.1), alpha = 0.5) +\n    labs(title = \"Volcano plot of the neighborhoods\") + \n  scale_color_manual(values = c(\"TRUE\" = \"firebrick\", \"FALSE\" = \"grey\")) +\n  theme_bw() + \n  theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nFor example, transcripts of the \n[Lipoprotein lipase (Lpl) gene](https://en.wikipedia.org/wiki/Lipoprotein_lipase)\nare generally expressed at lower levels in the Trem2 knock-out than \nin wildtype samples. \n\nBut there is also evidence for stronger differences in expression in microglia\nthat have adopted specific states. The largest log2 fold changes are observed\nin `Cyc-M`, and `DAM` microglia, while the `Resting` microglia are mainly\nexcluded from the neighborhood detected by `lemur`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel_gene <- row.names(sce)[which(rowData(sce)$symbol == \"Lpl\")]\n\nneighborhood_coordinates <- neighborhoods %>%\n  dplyr::filter(name == sel_gene) %>%\n  dplyr::mutate(cell_id = purrr:::map(indices, \\(idx) colnames(fit)[idx])) %>%\n  tidyr::unnest(c(indices, cell_id)) %>%\n  dplyr::left_join(as_tibble(umap, rownames = \"cell_id\"), by = \"cell_id\") %>%\n  dplyr::select(name, cell_id, `UMAP 1`, `UMAP 2`)\n\np1 <- as_tibble(umap) %>%\n  mutate(expr = assay(fit, \"DE\")[sel_gene, ]) %>%\n  ggplot(aes(x = `UMAP 1`, y = `UMAP 2`)) +\n  scale_color_gradient2() +\n  geom_point(aes(color = expr)) +\n  geom_density2d(data = neighborhood_coordinates, breaks = 0.1, \n                 contour_var = \"ndensity\", color = \"black\") +\n  labs(title = rowData(sce)[sel_gene, \"symbol\"]) + \n  theme_bw() + \n  theme(panel.grid = element_blank())\n\np2 <- as_tibble(umap) %>%\n  dplyr::bind_cols(as.data.frame(colData(fit))) %>%\n  ggplot(aes(x = `UMAP 1`, y = `UMAP 2`)) +\n  geom_point(aes(color = mg_type)) +\n  scale_color_manual(values = mg_colors, name = element_blank()) + \n  geom_density2d(data = neighborhood_coordinates, breaks = 0.1, \n                 contour_var = \"ndensity\", color = \"black\") +\n  labs(title = \"Microglia states\") + \n  theme_bw() + \n  theme(panel.grid = element_blank())\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nNext, I examine each microglial subtype separately, and split cells according\nto whether they fall into a neighborhood with significant differential `Lpl` \nexpression (`DE`) or not (`not DE`).\n\nMost `Cyc-M` and `DAM` microglia are located in neighborhoods with \nreduced `Lpl` expression in knock-out samples, e.g. the majority of these cells\nis in the `DE` column. The opposite is true for `Resting` microglia: nearly all\nof them are outside the significant `Lpl` differential expression neighborhood.\n\nThe transitional subtypes, t1 (most similar to resting microglia) to t6 \n(most similar to DAM, Cyc-M or IFN-R) fall in between, with a gradual increase\nalong their proposed differentiation sequence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwithin_neighborhood <- neighborhoods %>%\n  dplyr::filter(name == sel_gene) %>% \n  dplyr::pull(indices)\n\ncolData(fit)$neighborhood <- ifelse(\n  seq.int(ncol(fit)) %in% within_neighborhood[[1]], \"DE\", \"not DE\")\n\ndata.frame(\n  colData(fit)\n) %>%\n  ggplot(aes(x = neighborhood, fill = mg_type)) + \n  geom_bar(stat = \"count\", color = \"black\", linewidth = 0.2) +\n  facet_wrap(~ mg_type) +\n  labs(title = rowData(sce)[sel_gene, \"symbol\"], \n       x = element_blank(),\n       y = \"Cells per neighborhood\") +\n  scale_fill_manual(values = mg_colors, name = element_blank()) + \n  theme_linedraw(14) + \n  theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nFinally, we can plot the estimated `Lpl` log2 fold changes for each cells\nannotated with the various subtype labels. This confirms the observations\noutlined above, providing an example of how insights from LEMUR can be combined\nwith coarser, clustering-based insights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(\n  expr = assay(fit, \"DE\")[sel_gene, ],\n  colData(fit)\n) %>%\n  ggplot(aes(x = mg_type, y = expr, fill = mg_type)) + \n  geom_boxplot() + \n  geom_hline(yintercept = 0, linetype = \"dashed\") + \n  scale_fill_manual(values = mg_colors, name = element_blank()) + \n  labs(title = rowData(sce)[sel_gene, \"symbol\"],\n       y = \"Genotype effect (log2 FC)\", \n       x = element_blank()) +\n  theme_linedraw(14) + \n  theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=768}\n:::\n:::\n\n\n## Conclusions\n\n- This dataset starts off with a relatively homogeneous cell population, e.g.\n  it is designed to examine subtle differences _within_ a single cell type \n  (microglia.)\n- Removing _Trem2_ activity is known to shift the composition of the microglial\n  subsets, e.g. depleting `DAM` microglia and increasing the frequency of \n  `Resting` in the knock-out versus the wildtype samples. This adds an\n  additional challenge to the task of identifying differential expression.\n- The `lemur()` package nevertheless successfully identified genes that track\n  the differential expression of the microglial sub-states reported by Ellwanger \n  et al. (Even with only a subsample of the data.)\n- I am looking forward to exploring `LEMUR` in future datasets, e.g. those\n  examining the effects of drug perturbation in single-nuclei RNA-seq datasets\n  sampling a large variety of CNS cell types.\n\n<details>\n<summary>\nReproducibility\n</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Big Sur ... 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Los_Angeles\n date     2023-03-12\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version  date (UTC) lib source\n AnnotationDbi        * 1.60.0   2022-11-01 [1] Bioconductor\n askpass                1.1      2019-01-13 [1] CRAN (R 4.2.0)\n assertthat             0.2.1    2019-03-21 [1] CRAN (R 4.2.0)\n beachmat               2.14.0   2022-11-01 [1] Bioconductor\n beeswarm               0.4.0    2021-06-01 [1] CRAN (R 4.2.0)\n Biobase              * 2.58.0   2022-11-01 [1] Bioconductor\n BiocGenerics         * 0.44.0   2022-11-01 [1] Bioconductor\n BiocNeighbors          1.16.0   2022-11-01 [1] Bioconductor\n BiocParallel           1.32.4   2022-12-01 [1] Bioconductor\n BiocSingular           1.14.0   2022-11-01 [1] Bioconductor\n Biostrings             2.66.0   2022-11-01 [1] Bioconductor\n bit                    4.0.5    2022-11-15 [1] CRAN (R 4.2.0)\n bit64                  4.0.5    2020-08-30 [1] CRAN (R 4.2.0)\n bitops                 1.0-7    2021-04-24 [1] CRAN (R 4.2.0)\n blob                   1.2.3    2022-04-10 [1] CRAN (R 4.2.0)\n cachem                 1.0.6    2021-08-19 [1] CRAN (R 4.2.0)\n cli                    3.5.0    2022-12-20 [1] CRAN (R 4.2.0)\n codetools              0.2-18   2020-11-04 [2] CRAN (R 4.2.2)\n colorspace             2.0-3    2022-02-21 [1] CRAN (R 4.2.0)\n cowplot                1.1.1    2020-12-30 [1] CRAN (R 4.2.0)\n crayon                 1.5.2    2022-09-29 [1] CRAN (R 4.2.0)\n credentials            1.3.2    2021-11-29 [1] CRAN (R 4.2.0)\n DBI                    1.1.3    2022-06-18 [1] CRAN (R 4.2.0)\n DelayedArray           0.24.0   2022-11-01 [1] Bioconductor\n DelayedMatrixStats     1.20.0   2022-11-01 [1] Bioconductor\n digest                 0.6.31   2022-12-11 [1] CRAN (R 4.2.0)\n dplyr                * 1.0.10   2022-09-01 [1] CRAN (R 4.2.0)\n ellipsis               0.3.2    2021-04-29 [1] CRAN (R 4.2.0)\n evaluate               0.19     2022-12-13 [1] CRAN (R 4.2.0)\n expm                   0.999-7  2023-01-09 [1] CRAN (R 4.2.0)\n fansi                  1.0.3    2022-03-24 [1] CRAN (R 4.2.0)\n farver                 2.1.1    2022-07-06 [1] CRAN (R 4.2.0)\n fastmap                1.1.0    2021-01-25 [1] CRAN (R 4.2.0)\n FNN                    1.1.3.1  2022-05-23 [1] CRAN (R 4.2.0)\n generics               0.1.3    2022-07-05 [1] CRAN (R 4.2.0)\n GenomeInfoDb         * 1.34.4   2022-12-01 [1] Bioconductor\n GenomeInfoDbData       1.2.9    2022-12-12 [1] Bioconductor\n GenomicRanges        * 1.50.2   2022-12-16 [1] Bioconductor\n ggbeeswarm             0.7.1    2022-12-16 [1] CRAN (R 4.2.0)\n ggplot2              * 3.4.0    2022-11-04 [1] CRAN (R 4.2.0)\n ggrepel                0.9.2    2022-11-06 [1] CRAN (R 4.2.0)\n glmGamPoi              1.11.7   2023-03-11 [1] Github (const-ae/glmGamPoi@78c5cff)\n glue                   1.6.2    2022-02-24 [1] CRAN (R 4.2.0)\n gridExtra              2.3      2017-09-09 [1] CRAN (R 4.2.0)\n gtable                 0.3.1    2022-09-01 [1] CRAN (R 4.2.0)\n harmony                0.1.1    2023-03-11 [1] Github (immunogenomics/harmony@63ebd73)\n here                   1.0.1    2020-12-13 [1] CRAN (R 4.2.0)\n hms                    1.1.2    2022-08-19 [1] CRAN (R 4.2.0)\n htmltools              0.5.4    2022-12-07 [1] CRAN (R 4.2.0)\n htmlwidgets            1.5.4    2021-09-08 [1] CRAN (R 4.2.2)\n httr                   1.4.4    2022-08-17 [1] CRAN (R 4.2.0)\n IRanges              * 2.32.0   2022-11-01 [1] Bioconductor\n irlba                  2.3.5.1  2022-10-03 [1] CRAN (R 4.2.0)\n isoband                0.2.6    2022-10-06 [1] CRAN (R 4.2.0)\n jsonlite               1.8.4    2022-12-06 [1] CRAN (R 4.2.0)\n KEGGREST               1.38.0   2022-11-01 [1] Bioconductor\n knitr                  1.41     2022-11-18 [1] CRAN (R 4.2.0)\n labeling               0.4.2    2020-10-20 [1] CRAN (R 4.2.0)\n lattice                0.20-45  2021-09-22 [2] CRAN (R 4.2.2)\n lemur                * 0.0.9    2023-03-11 [1] Github (const-ae/lemur@efdb6b3)\n lifecycle              1.0.3    2022-10-07 [1] CRAN (R 4.2.0)\n magrittr               2.0.3    2022-03-30 [1] CRAN (R 4.2.0)\n MASS                   7.3-58.1 2022-08-03 [2] CRAN (R 4.2.2)\n Matrix               * 1.5-3    2022-11-11 [1] CRAN (R 4.2.0)\n MatrixGenerics       * 1.10.0   2022-11-01 [1] Bioconductor\n matrixStats          * 0.63.0   2022-11-18 [1] CRAN (R 4.2.0)\n memoise                2.0.1    2021-11-26 [1] CRAN (R 4.2.0)\n munsell                0.5.0    2018-06-12 [1] CRAN (R 4.2.0)\n openssl                2.0.5    2022-12-06 [1] CRAN (R 4.2.0)\n org.Mm.eg.db         * 3.16.0   2022-12-29 [1] Bioconductor\n patchwork            * 1.1.2    2022-08-19 [1] CRAN (R 4.2.0)\n pillar                 1.8.1    2022-08-19 [1] CRAN (R 4.2.0)\n pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.2.0)\n png                    0.1-8    2022-11-29 [1] CRAN (R 4.2.0)\n purrr                * 1.0.0    2022-12-20 [1] CRAN (R 4.2.0)\n R6                     2.5.1    2021-08-19 [1] CRAN (R 4.2.0)\n Rcpp                   1.0.9    2022-07-08 [1] CRAN (R 4.2.0)\n RCurl                  1.98-1.9 2022-10-03 [1] CRAN (R 4.2.0)\n readr                * 2.1.3    2022-10-01 [1] CRAN (R 4.2.0)\n rlang                  1.0.6    2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown              2.20     2023-01-19 [1] RSPM (R 4.2.2)\n rprojroot              2.0.3    2022-04-02 [1] CRAN (R 4.2.0)\n RSQLite                2.2.19   2022-11-24 [1] CRAN (R 4.2.0)\n rstudioapi             0.14     2022-08-22 [1] CRAN (R 4.2.0)\n rsvd                   1.0.5    2021-04-16 [1] CRAN (R 4.2.0)\n S4Vectors            * 0.36.1   2022-12-05 [1] Bioconductor\n ScaledMatrix           1.6.0    2022-11-01 [1] Bioconductor\n scales                 1.2.1    2022-08-20 [1] CRAN (R 4.2.0)\n scater               * 1.26.1   2022-11-13 [1] Bioconductor\n scuttle              * 1.8.3    2022-12-14 [1] Bioconductor\n sessioninfo            1.2.2    2021-12-06 [1] CRAN (R 4.2.0)\n SingleCellExperiment * 1.20.0   2022-11-01 [1] Bioconductor\n sparseMatrixStats      1.10.0   2022-11-01 [1] Bioconductor\n stringi                1.7.8    2022-07-11 [1] CRAN (R 4.2.0)\n stringr                1.5.0    2022-12-02 [1] CRAN (R 4.2.0)\n SummarizedExperiment * 1.28.0   2022-11-01 [1] Bioconductor\n sys                    3.4.1    2022-10-18 [1] CRAN (R 4.2.0)\n tibble                 3.1.8    2022-07-22 [1] CRAN (R 4.2.0)\n tidyr                * 1.2.1    2022-09-08 [1] CRAN (R 4.2.0)\n tidyselect             1.2.0    2022-10-10 [1] CRAN (R 4.2.0)\n tzdb                   0.3.0    2022-03-28 [1] CRAN (R 4.2.0)\n utf8                   1.2.2    2021-07-24 [1] CRAN (R 4.2.0)\n uwot                   0.1.14   2022-08-22 [1] CRAN (R 4.2.0)\n vctrs                  0.5.1    2022-11-16 [1] CRAN (R 4.2.0)\n vipor                  0.4.5    2017-03-22 [1] CRAN (R 4.2.0)\n viridis                0.6.2    2021-10-13 [1] CRAN (R 4.2.0)\n viridisLite            0.4.1    2022-08-22 [1] CRAN (R 4.2.0)\n withr                  2.5.0    2022-03-03 [1] CRAN (R 4.2.0)\n xfun                   0.36     2022-12-21 [1] RSPM (R 4.2.2)\n XVector                0.38.0   2022-11-01 [1] Bioconductor\n yaml                   2.3.6    2022-10-18 [1] CRAN (R 4.2.0)\n zlibbioc               1.44.0   2022-11-01 [1] Bioconductor\n\n [1] /Users/sandmann/Library/R/x86_64/4.2/library\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n</details>\n\n[^1]: scRNA-seq data from glioblastoma slices cultured _in vitro_ with either \n[pamobinostat](https://en.wikipedia.org/wiki/Panobinostat)\nor a vehicle control, characterized in a terrific paper by\n[Zhao et al, 2021](https://genomemedicine.biomedcentral.com/articles/10.1186/s13073-021-00894-y)\n[^2]: CD45 is a cell surface antigen that is expressed on most hematopoietic \nlineage cells, including microglia.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}