{
  "hash": "b26dfcccfe38654244a6ab561ee4f85f",
  "result": {
    "markdown": "---\ntitle: \"QuantSeq RNAseq analysis (3): Validating published results (no UMIs)\"\nauthor: \"Thomas Sandmann\"\ndate: \"2023-01-16\"\nfreeze: true\ncategories: [R, nextflow, NGS]\neditor:\n  markdown:\n    wrap: 72\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\neditor_options: \n  chunk_output_type: console\n---\n\n\n::: {.callout-note collapse=\"false\"}\n\nThis is the third of four posts documenting my progress toward\nprocessing and analyzing \n[QuantSeq FWD 3' tag RNAseq](https://www.lexogen.com/quantseq-3mrna-sequencing/) \ndata \nwith the \n[nf-core/rnaseq](https://nf-co.re/rnaseq)\nworkflow. \n\n1. [Configuring & executing the nf-core/rnaseq workflow](../nextflow-core-quantseq-1-settings/index.html)\n2. [Exploring the workflow outputs](../nextflow-core-quantseq-2-output/index.html)\n3. **Validating the workflow by reproducing results published by Xia et al (no UMIs)**\n4. [Validating the workflow by reproducing results published by Nugent et al (including UMIs)](../nextflow-core-quantseq-4-nugent/index.html)\n\nMany thanks to [Harshil Patel](https://github.com/drpatelh), \n[Ant√≥nio Miguel de Jesus Domingues](https://github.com/adomingues/)\nand \n[Matthias Zepper](https://github.com/matthiasZepper/)\nfor their generous guidance & input via [nf-core slack](nfcore.slack.com).\n(Any mistakes are mine.)\n:::\n\n## tl;dr\n\n- This analysis compares the performance of the \n  [nf-core/rnaseq workflow](https://nf-co.re/rnaseq)\n  for QuantSeq FWD 3' tag RNAseq data without unique molecular identifiers.\n- The differential expression analysis results are highly\n  concordant with those obtained in the original publication.\n- With the appropriate settings, the \n  [nf-core/rnaseq workflow](https://nf-co.re/rnaseq) is a valid data processing\n  pipeline for this data type.\n\nThe\n[first post in this series](../nextflow-core-quantseq-1-settings/index.html)\nwalked through the preprocesssing of QuantSeq FWD data \npublished in a preprint by [Xia et al](https://www.biorxiv.org/content/10.1101/2021.01.19.426731v1).\n\nNext, we use Bioconductor/R packages to reproduce the downstream results.\nWe perform the same differential gene expression analysis twice with either\n\n1. the original counts matrix published by the authors [^1]\n2. the output of the nf-core/rnaseq workflow\n\n[^1]: Full disclosure: I am a co-author of this publication.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(edgeR)\nlibrary(ggplot2)\nlibrary(here)\nlibrary(org.Mm.eg.db)\nlibrary(readxl)\nlibrary(SummarizedExperiment)\nlibrary(tibble)\nlibrary(tidyr)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Sample annotations\n\nWe start by retrieving the sample annotation table, listing e.g. the `sex`,\nand `genotype` for each mouse, and the `batch` for each collected sample.\n\nThis information is available in the [SRA Run Explorer](https://www.ncbi.nlm.nih.gov/Traces/study/?query_key=1&WebEnv=MCID_63c0392862acb114c36e44a3&o=acc_s%3Aa#). \n(I saved it as the [sample_metadata.csv CSV file](sample_metadata.csv) in \ncase you want to follow along.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_sheet <- file.path(work_dir, \"sample_metadata.csv\")\nsample_anno <- read.csv(sample_sheet, row.names = \"Experiment\")\nhead(sample_anno[, c(\"Run\", \"Animal.ID\", \"Age\", \"age_unit\", \"Batch\", \"sex\",\n                     \"Genotype\", \"Sample.Name\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Run Animal.ID Age age_unit Batch  sex Genotype Sample.Name\nSRX9142648 SRR12661924       LA1   8   months  Day1 male       WT  GSM4793335\nSRX9142649 SRR12661925       LA1   8   months  Day1 male       WT  GSM4793336\nSRX9142650 SRR12661926       LA6   8   months  Day1 male       WT  GSM4793337\nSRX9142651 SRR12661927       LA6   8   months  Day1 male       WT  GSM4793338\nSRX9142652 SRR12661928       LA9   8   months  Day2 male       WT  GSM4793339\nSRX9142653 SRR12661929       LA9   8   months  Day2 male       WT  GSM4793340\n```\n:::\n:::\n\n\nBecause our SRA metadata doesn't include the GEO sample title, I saved the\nidentifier mappings in the \n[GEO_sample_ids.csv CSV file](GEO_sample_ids.csv).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeo_ids <- read.csv(file.path(work_dir, \"GEO_sample_ids.csv\"))\nhead(geo_ids)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  sample_name sample_id\n1  GSM4793335 DRN-18429\n2  GSM4793336 DRN-18430\n3  GSM4793337 DRN-18439\n4  GSM4793338 DRN-18440\n5  GSM4793339 DRN-18445\n6  GSM4793340 DRN-18446\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncolnames(sample_anno)<- tolower(colnames(sample_anno))\ncolnames(sample_anno) <- sub(\".\", \"_\", colnames(sample_anno), \n                             fixed = TRUE) \nsample_anno <- sample_anno[, c(\"sample_name\", \"animal_id\", \"genotype\", \"sex\",\n                               \"batch\")]\nsample_anno$genotype <- factor(sample_anno$genotype, \n                               levels = c(\"WT\", \"Het\", \"Hom\"))\nsample_anno$sample_title <- geo_ids[\n  match(sample_anno$sample_name, geo_ids$sample_name), \"sample_id\"]\nhead(sample_anno)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           sample_name animal_id genotype  sex batch sample_title\nSRX9142648  GSM4793335       LA1       WT male  Day1    DRN-18429\nSRX9142649  GSM4793336       LA1       WT male  Day1    DRN-18430\nSRX9142650  GSM4793337       LA6       WT male  Day1    DRN-18439\nSRX9142651  GSM4793338       LA6       WT male  Day1    DRN-18440\nSRX9142652  GSM4793339       LA9       WT male  Day2    DRN-18445\nSRX9142653  GSM4793340       LA9       WT male  Day2    DRN-18446\n```\n:::\n:::\n\n\nThis experiment includes 36 samples of microglia cells \nobtained from 18 different 8-month old \nmice. Both male and female animals were included in the study.\n\nThe animals carry one of three different genotypes of the gene encoding the \nAPP amyloid beta precursor protein, either\n\n- the wildtype mouse gene (`WT`) or\n- one copy (`Het`) or\n- two copies (`Hom`) \n\nof a mutant _APP_ gene carrying mutations associated with familial \nAlzheimer's Disease.\n\nSamples from all three genotypes were collected on three days, and we will\nuse this `batch` information to model the experiment.\n\nTwo separate microglia samples were obtained from each animal, and we will\ninclude this nested relationship by modeling the `animal` as random effect in \nour linear model.\n\n## Xia et al's original count data\n\nFirst, we retrieve the authors' count matrix from \n[NCBI GEO](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE158152), \navailable as a Supplementary Excel file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- paste0(\"https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE158152&\",\n              \"format=file&file=GSE158152%5Fdst150%5Fprocessed%2Exlsx\")\ntemp_file <- tempfile(fileext = \".xlsx\")\ndownload.file(url, destfile = temp_file)\n```\n:::\n\n\nThe Excel file has three different worksheets\n\n- `sample_annotations`\n- `raw_counts`\n- `normalized_cpm`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_counts <- read_excel(temp_file, sheet = \"raw_counts\")\nhead(colnames(raw_counts), 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"feature_id\" \"name\"       \"meta\"       \"source\"     \"symbol\"    \n [6] \"DRN-18429\"  \"DRN-18430\"  \"DRN-18439\"  \"DRN-18440\"  \"DRN-18445\" \n```\n:::\n:::\n\n\nThe `raw_counts` excel sheet contains information about the detected genes (\n`feature_ID`, `name`) and the samples are identified by their GEO title \n(e.g. `DRN-18459`, `DRN-184560`). \nWe use the raw counts to populate a new `DGEList` object and perform\nLibrary Size Normalization with the `TMM` approach.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncount_data <- as.matrix(raw_counts[, grep(\"DRN-\", colnames(raw_counts))])\nrow.names(count_data) <- raw_counts$feature_id\ncolnames(count_data) <- row.names(sample_anno)[\n  match(colnames(count_data), sample_anno$sample_title)\n]\n\ngene_data <- data.frame(\n  gene_id = raw_counts$feature_id,\n  gene_name = raw_counts$symbol,\n  row.names = raw_counts$feature_id\n)\n\ncol_data <- data.frame(\n  sample_anno[colnames(count_data),\n              c(\"sample_title\", \"animal_id\", \"sex\", \"genotype\", \"batch\")],\n  workflow = \"geo\"\n)\n\ndge <- DGEList(\n  counts = as.matrix(count_data), \n  samples = col_data[colnames(count_data), ], \n  genes = gene_data[row.names(count_data), ]\n)\n\ndge <- calcNormFactors(dge, method = \"TMM\")\n```\n:::\n\n\nNext, we project the samples into two dimensions by performing multi-dimensional\nscaling of the top 500 most variable genes. The samples cluster by genotype, \nwith `WT` and `Het` segregating from the `Hom` samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotMDS(dge, labels = dge$samples$genotype,\n        main = \"Multi-dimensional scaling\", \n        sub = \"Based on the top 500 most variable genes\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=528}\n:::\n:::\n\n\nLet's identify which genes are significantly differentially expressed between\nthe three genotypes!\n\n### Linear modeling with limma/voom\n\nFirst, we use the `edgeR::filterByExpr()` function to identify genes with\nsufficiently large counts to be examined for differential expression. (The \n`min.count = 25` parameter was determined by examining the mean-variance plot \nby the `voomLmFit()` function.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndesign <- model.matrix(~ genotype + sex + batch, data = dge$samples)\ncolnames(design) <- sub(\"genotype\", \"\", colnames(design))\nkeep <- filterByExpr(dge, design = design, min.count = 25)\n```\n:::\n\n\nNext, we fit a linear model to the data using the \n[limma/voom](https://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-2-r29)\napproach. The model includes the following fixed effects:\n\n- The `genotype` coded as a factor with the `WT` as the reference level.\n- The `sex` and `batch` covariates, to account for systematic differences in \n  mean gene expression.\n\nBecause the dataset included two replicate samples from each animal, we model\nthe `animal` as a random effect (via the `block` argument of the `voomLmFit()` \nfunction). We then extract the coefficients, log2 fold changes and p-values\nvia limma's empirical Bayes approach.\n\n::: {.callout-note collapse=\"true\"}\n\nWe use the `limma::treat()` function to test the null hypothesis that genes\ndisplay significant differential expression _greater than_ 1.2-fold. This is\nmore stringent than the conventional null hypothesis of zero change. (Please\nconsult the `limma::treat()` \n[help page](https://rdrr.io/bioc/limma/man/ebayes.html) for details.)\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- voomLmFit(\n  dge[keep, row.names(design)], \n  design = design,\n  block = dge$samples$animal_id, \n  sample.weights = TRUE, \n  plot = FALSE\n)\nfit <- treat(fit, robust=TRUE)\n```\n:::\n\n\nThe following table displays the number of differentially up- and down-regulated\ngenes after applying a false-discovery (`adj.P.Val`) threshold of 5%. While\nwe did not detect significant differences between `Het` and `WT` animals, \nthe analysis revealed > 450 differentially expressed genes between `Hom` and\n`WT` microglia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(decideTests(fit))[, c(\"Het\", \"Hom\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Het   Hom\nDown       0    73\nNotSig 10131  9660\nUp         0   398\n```\n:::\n:::\n\n\nThe top 10 genes with the smallest p-values include well known markers of\nmicroglia activation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntopTreat(fit, coef = \"Hom\")[, c(\"gene_name\", \"logFC\", \"P.Value\", \"adj.P.Val\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   gene_name     logFC      P.Value    adj.P.Val\nENSMUSG00000027523      Gnas 1.5904760 3.467080e-24 3.512499e-20\nENSMUSG00000022265       Ank 3.7866023 1.258687e-20 6.375881e-17\nENSMUSG00000021477      Ctsl 1.2829086 2.294556e-20 7.748717e-17\nENSMUSG00000018927      Ccl6 2.7405831 3.514945e-20 8.902477e-17\nENSMUSG00000030579    Tyrobp 1.2880854 9.748473e-19 1.975236e-15\nENSMUSG00000022415    Syngr1 1.5033949 1.367158e-18 2.308446e-15\nENSMUSG00000016256      Ctsz 1.1557870 2.878895e-18 4.166584e-15\nENSMUSG00000023992     Trem2 0.9460719 7.386805e-18 9.354465e-15\nENSMUSG00000056737      Capg 2.4537482 1.927765e-17 2.170021e-14\nENSMUSG00000030342       Cd9 1.0596747 1.328189e-16 1.328093e-13\n```\n:::\n:::\n\n\nNext we repeat *the same analysis* with the output of the nf-core/rnaseq\nworkflow.\n\n## nf-core/rnaseq results\n\nWe start with the raw counts contained in the \n[salmon.merged.gene_counts.rds](salmon.merged.gene_counts.rds) \nfile generated by the nf-core/rnaseq workflow. \n\n::: {.callout-note  collapse=\"true\"}\n\nThe nf-core pipeline returned the versioned ENSEMBL gene identifiers (e.g.)\n`ENSMUSG00000000001.4`. Because Xia et al only provided the unversioned\nidentifiers (e.g. `ENSMUSG00000000001`) we trim the numeric suffix.\n\n:::\n\nWe TMM-normalize the data, as before. (This step converts the \n`SummarizedExperiment` into a `DGEList` object as well.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_file <- file.path(work_dir, \"salmon.merged.gene_counts.rds\")\nse <- readRDS(count_file)\nrow.names(se) <- sapply(\n  strsplit(row.names(se), split = \".\", fixed = TRUE), \"[[\", 1)\nstopifnot(all(colnames(se) %in% row.names(sample_anno)))\ndge_nfcore <- calcNormFactors(se, method = \"TMM\")\n```\n:::\n\n\nNext, we add the sample metadata and fit the same linear model as before.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndge_nfcore$genes$gene_id <- row.names(dge_nfcore)\n\ndge_nfcore$samples <- data.frame(\n  dge_nfcore$samples,\n  sample_anno[colnames(dge_nfcore),\n              c(\"sample_title\", \"animal_id\", \"sex\", \"genotype\", \"batch\")],\n  workflow = \"nfcore\"\n)\nstopifnot(all(colnames(dge) %in% colnames(dge_nfcore)))\ndge_nfcore <- dge_nfcore[, colnames(dge)]\n\ndesign <- model.matrix(~ genotype + sex + batch, data = dge_nfcore$samples)\ncolnames(design) <- sub(\"genotype\", \"\", colnames(design))\nkeep <- filterByExpr(dge_nfcore, design = design, min.count = 25)\nfit_nfcore <- voomLmFit(\n  dge_nfcore[keep, row.names(design)], \n  design = design,\n  block = dge_nfcore$samples$animal_id, \n  sample.weights = TRUE, \n  plot = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nFirst sample weights (min/max) 0.5573482/2.1680260\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFirst intra-block correlation  0.02339845\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFinal sample weights (min/max) 0.5367708/2.2366196\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFinal intra-block correlation  0.02354808\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nfit_nfcore <- treat(fit_nfcore, robust=TRUE)\n```\n:::\n\n\nAs with the original count data from NCBI GEO, we detect > 450 differentially\nexpressed genes between `Hom` and `WT` genotypes \n(FDR < 5%, null hypothesis: fold change > 1.2).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(decideTests(fit_nfcore))[, c(\"Het\", \"Hom\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Het   Hom\nDown       0    76\nNotSig 10428  9917\nUp         0   435\n```\n:::\n:::\n\n\n## Comparing results across preprocessing workflows\n\nNext, we compare the results obtained with the two datasets. We create the \n`cpms` and `tt` dataframes, holding the combined absolute and differential\nexpression results, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncpms <- local({\n  geo <- cpm(dge, normalized.lib.sizes = TRUE) %>%\n    as.data.frame() %>%\n    cbind(dge$genes) %>%\n    pivot_longer(cols = starts_with(\"SRX\"), \n                 names_to = \"sample_name\",\n                 values_to = \"cpm\") %>%\n    dplyr::left_join(\n      tibble::rownames_to_column(dge$samples, \"sample_name\"),\n      by = \"sample_name\"\n    ) %>%\n    dplyr::mutate(dataset = \"Xia et al\")\n  \n  nfcore <- cpm(dge_nfcore, normalized.lib.sizes = TRUE) %>%\n    as.data.frame() %>%\n    cbind(dge_nfcore$genes) %>%\n    pivot_longer(cols = starts_with(\"SRX\"), \n                 names_to = \"sample_name\",\n                 values_to = \"cpm\") %>%\n    dplyr::left_join(\n      tibble::rownames_to_column(dge_nfcore$samples, \"sample_name\"),\n      by = \"sample_name\"\n    ) %>%\n    dplyr::mutate(dataset = \"nf-core\")\n  \n  dplyr::bind_rows(\n    dplyr::select(geo, any_of(intersect(colnames(geo), colnames(nfcore)))),\n    dplyr::select(nfcore, any_of(intersect(colnames(geo), colnames(nfcore))))\n  )\n})\n\ntt <- rbind(\n  topTreat(fit, coef = \"Hom\", number = Inf)[\n    , c(\"gene_id\", \"gene_name\", \"logFC\", \"P.Value\", \"adj.P.Val\")] %>%\n    dplyr::mutate(dataset = \"geo\"),\n   topTreat(fit_nfcore, coef = \"Hom\", number = Inf)[\n     , c(\"gene_id\", \"gene_name\", \"logFC\", \"P.Value\", \"adj.P.Val\")] %>%\n    dplyr::mutate(dataset = \"nfcore\")\n) %>%\n  dplyr::mutate(adj.P.Val = signif(adj.P.Val, 2)) %>%\n  tidyr::pivot_wider(\n    id_cols = c(\"gene_id\", \"gene_name\"), \n    names_from = \"dataset\", \n    values_from = \"adj.P.Val\") %>%\n  dplyr::arrange(nfcore) %>%\n  as.data.frame() %>%\n  tibble::column_to_rownames(\"gene_id\")\n```\n:::\n\n\n### Normalized expression\n\nFirst, we examine the correlation between the normalized log-transformed\ngene expression estimates returned from the two workflows. We focus on those\ngenes that passed the `filterByExpr` thresholds above, e.g. those genes\ndeemed sufficiently highly expressed to be assessed for differential expression.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncommon_genes <- intersect(row.names(fit), row.names(fit_nfcore))\nsum_stats <- cpms %>%\n  dplyr::filter(gene_id %in% common_genes) %>%\n  tidyr::pivot_wider(\n    id_cols = c(\"gene_id\", \"sample_name\"),\n    values_from = \"cpm\",\n    names_from = \"dataset\") %>%\n  dplyr::group_by(gene_id) %>%\n  dplyr::summarise(\n    r = cor(log1p(`Xia et al`), log1p(`nf-core`)),\n    mean_xia = mean(`Xia et al`),\n    mean_nfcore = mean(`nf-core`))\n\np <- ggplot(data = sum_stats, aes(x = r)) + \n  geom_histogram(bins = 50) +\n  scale_x_continuous(limits = c(0, 1.02), breaks = seq(0, 1, by = 0.2)) +\n  labs(x = \"Pearson correlation coefficient (R)\", \n       y = \"Number of genes\",\n       title = \"Correlation between normalized log2 counts\") +\n  theme_linedraw(14)\nprint(p)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=528}\n:::\n:::\n\n\nThe correlation between normalized log2 expression estimates is very high, with\n95% of all genes showing a Pearson correlation coefficient > \n0.94. \n\nMost of the 10022 examined genes were detected with > \n10 normalized counts per million reads.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = sum_stats, aes(x = mean_xia + 1)) + \n  geom_histogram(bins = 50) +\n  scale_x_continuous(trans = scales::log10_trans(),\n                     labels = scales::comma_format()) +\n  labs(x = \"Mean normalized counts per million\", \n       y = \"Number of genes\",\n       title = \"Average expression\",\n       subtitle = \"Xia et al\") +\n  theme_linedraw(14)\nprint(p)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nNext, we will examine the results of the _differential_ expression analysis.\n\n### Differential expression results\n\nAnalyses based on either preprocessing pipeline yield similar numbers of \ndifferentially expressed genes.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nresults <- cbind(\n  decideTests(fit)[common_genes, \"Hom\"], \n  decideTests(fit_nfcore)[common_genes, \"Hom\"]\n)\ncolnames(results) <- c(\"Xia et al\", \"nf-core\")\nclass(results) <- \"TestResults\"\nsummary(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Xia et al nf-core\n-1        73      75\n0       9554    9528\n1        395     419\n```\n:::\n:::\n\n\nBut are these _the same genes_ in both sets of results?\n\nWe can visualize the overlap between the sets of significant genes in a Venn \ndiagram (FDR < 5%). The vast majority of differentially expressed genes is \ndetected with both quantitation approaches (for both up- and down-regulated\ngenes.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlimma::vennDiagram(results, include = c(\"up\", \"down\"),\n                   counts.col=c(\"red\", \"blue\"), mar = rep(0,4))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=528}\n:::\n:::\n\n\nFor example, the following plots show the normalized expression of a few\nhighly differentially expressed genes (known markers of active microglia).\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nfor (gene in topTreat(fit, coef = \"Hom\", number = 6)[[\"gene_id\"]]) {\n p <- cpms %>%\n    dplyr::filter(gene_id == gene) %>%\n    ggplot(aes(x = genotype, y = cpm)) + \n    geom_point(position = position_jitter(width = 0.05), alpha = 0.8) + \n    facet_grid(dataset ~ ., scales = \"free\") + \n    labs(title = dge$genes[gene, \"gene_name\"],\n         y = \"Normalized expression (CPM)\",\n         x = element_blank(),\n         subtitle = sprintf(\"FDR nf-core: %s\\nFDR GEO: %s\",\n                       tt[gene, \"nfcore\"],\n                       tt[gene, \"geo\"]\n                       )\n         ) +\n   theme_linedraw(14)\n print(p)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=408}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-2.png){width=408}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-3.png){width=408}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-4.png){width=408}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-5.png){width=408}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-6.png){width=408}\n:::\n:::\n\n\nApplying a hard FDR threshold can inflate the number of apparent differences,\ne.g. when a gene is close to the significance threshold (see below).\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_cor <- cor(\n  fit$coefficients[common_genes, \"Hom\"], \n  fit_nfcore$coefficients[common_genes, \"Hom\"])\n```\n:::\n\n\nThe log2 fold estimates for the `Hom` vs `WT` comparison are highly correlated\nacross the two analysis workflows (Pearson correlation coefficient \nR = 0.99 ):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoothScatter(\n  fit$coefficients[common_genes, \"Hom\"], \n  fit_nfcore$coefficients[common_genes, \"Hom\"],\n  ylab = \"nf-core (log2FC)\",\n  xlab = \"Xia et al (log2FC)\",\n  main = \"Homozygous APP vs WT (effect size)\"\n)\ntext(x = 10, y = -2, labels = sprintf(\"R = %s\", signif(p_cor, 2)))\nabline(0, 1)\nabline(h = 0, v = 0, lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=432}\n:::\n:::\n\n\nas are the t-statistics across all examined genes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_cor <- cor(\n  fit$t[common_genes, \"Hom\"], \n  fit_nfcore$t[common_genes, \"Hom\"])\nsmoothScatter(\n  fit$t[common_genes, \"Hom\"], \n  fit_nfcore$t[common_genes, \"Hom\"],\n  ylab = \"nf-core (t-statistic)\",\n  xlab = \"Xia et al (t-statistic)\",\n  main = \"Homozygous APP vs WT (t-statistic)\")\ntext(x = 10, y = -2, labels = sprintf(\"R = %s\", signif(p_cor, 2)))\nabline(0, 1)\nabline(h = 0, v = 0, lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=432}\n:::\n:::\n\n\n#### Discordant significance calls\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# genes detected in GEO, but not significant with nf-core\ngenes <- row.names(results)[which(abs(results[, 1]) == 1 & results[, 2] == 0)]\n```\n:::\n\n\nAt FDR < 5% 14 genes were reported as significantly \ndifferentially expressed with the original Xia et al count matrix\nbut *not* with the output of the nf-core/rnaseq workflow.\n\nAs side-by-side comparison of the FDR (`adj.P.Val`) for these genes confirms\nthat the vast majority display significant close to the 5% threshold in the \nnf-core/rnaseq output as well. (This is in line with the high overall\ncorrelation of the t-statistics observed above.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(tt[genes, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       gene_name    geo nfcore\nENSMUSG00000078193 RP24-228M19.1 0.0041  0.120\nENSMUSG00000027427        Polr3f 0.0490  0.052\nENSMUSG00000028394         Pole3 0.0480  0.073\nENSMUSG00000029027          Dffb 0.0360  0.082\nENSMUSG00000029649          Pomp 0.0430  0.056\nENSMUSG00000054404         Slfn5 0.0440  0.064\nENSMUSG00000050965         Prkca 0.0310  0.087\nENSMUSG00000020641         Rsad2 0.0440  0.063\nENSMUSG00000021057         Akap5 0.0260  0.074\nENSMUSG00000115230 RP24-123O20.1 0.0400  0.061\nENSMUSG00000042622          Maff 0.0500  0.051\nENSMUSG00000050410         Tcf19 0.0500  0.051\nENSMUSG00000059040         Eno1b 0.0290  0.410\nENSMUSG00000042712        Tceal9 0.0480  0.054\n```\n:::\n:::\n\n\nFinally, we plot the normalized gene expression estimates for the \n14 discordant genes.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nfor (gene in genes) {\n p <- cpms %>%\n    dplyr::filter(gene_id == gene) %>%\n    ggplot(aes(x = genotype, y = cpm)) + \n    geom_point(position = position_jitter(width = 0.05), alpha = 0.8) + \n    facet_grid(dataset ~ ., scales = \"free\") + \n    labs(title = dge$genes[gene, \"gene_name\"],\n         y = \"Normalized expression (CPM)\",\n         x = element_blank(),\n         subtitle = sprintf(\"FDR nf-core: %s\\nFDR GEO: %s\",\n                       tt[gene, \"nfcore\"],\n                       tt[gene, \"geo\"]\n                       )\n         ) +\n   theme_linedraw(14)\n print(p)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-2.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-3.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-4.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-5.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-6.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-7.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-8.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-9.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-10.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-11.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-12.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-13.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-14.png){width=288}\n:::\n:::\n\n\n## Conclusions\n\n- Differential expression analyses of raw counts obtained with the \n  `nc-core/rnaseq` workflow yields results that are highly concordant with those\n  obtained with the raw counts the authors deposited in NCBI GEO.\n- With appropriate parameters the `nf-core/rnaseq` workflow can be applied to\n  QuantSeq FWD 3'tag RNA-seq data.\n\n## Reproducibility\n\n<details>\n<summary>\nSessionInfo\n</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Big Sur ... 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Los_Angeles\n date     2023-01-16\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n\n‚îÄ Packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n package              * version  date (UTC) lib source\n AnnotationDbi        * 1.60.0   2022-11-01 [1] Bioconductor\n askpass                1.1      2019-01-13 [1] CRAN (R 4.2.0)\n assertthat             0.2.1    2019-03-21 [1] CRAN (R 4.2.0)\n Biobase              * 2.58.0   2022-11-01 [1] Bioconductor\n BiocGenerics         * 0.44.0   2022-11-01 [1] Bioconductor\n Biostrings             2.66.0   2022-11-01 [1] Bioconductor\n bit                    4.0.5    2022-11-15 [1] CRAN (R 4.2.0)\n bit64                  4.0.5    2020-08-30 [1] CRAN (R 4.2.0)\n bitops                 1.0-7    2021-04-24 [1] CRAN (R 4.2.0)\n blob                   1.2.3    2022-04-10 [1] CRAN (R 4.2.0)\n cachem                 1.0.6    2021-08-19 [1] CRAN (R 4.2.0)\n cellranger             1.1.0    2016-07-27 [1] CRAN (R 4.2.0)\n cli                    3.5.0    2022-12-20 [1] CRAN (R 4.2.0)\n colorspace             2.0-3    2022-02-21 [1] CRAN (R 4.2.0)\n crayon                 1.5.2    2022-09-29 [1] CRAN (R 4.2.0)\n credentials            1.3.2    2021-11-29 [1] CRAN (R 4.2.0)\n DBI                    1.1.3    2022-06-18 [1] CRAN (R 4.2.0)\n DelayedArray           0.24.0   2022-11-01 [1] Bioconductor\n digest                 0.6.31   2022-12-11 [1] CRAN (R 4.2.0)\n dplyr                * 1.0.10   2022-09-01 [1] CRAN (R 4.2.0)\n edgeR                * 3.40.1   2022-12-14 [1] Bioconductor\n ellipsis               0.3.2    2021-04-29 [1] CRAN (R 4.2.0)\n evaluate               0.19     2022-12-13 [1] CRAN (R 4.2.0)\n fansi                  1.0.3    2022-03-24 [1] CRAN (R 4.2.0)\n farver                 2.1.1    2022-07-06 [1] CRAN (R 4.2.0)\n fastmap                1.1.0    2021-01-25 [1] CRAN (R 4.2.0)\n generics               0.1.3    2022-07-05 [1] CRAN (R 4.2.0)\n GenomeInfoDb         * 1.34.4   2022-12-01 [1] Bioconductor\n GenomeInfoDbData       1.2.9    2022-12-12 [1] Bioconductor\n GenomicRanges        * 1.50.2   2022-12-16 [1] Bioconductor\n ggplot2              * 3.4.0    2022-11-04 [1] CRAN (R 4.2.0)\n glue                   1.6.2    2022-02-24 [1] CRAN (R 4.2.0)\n gtable                 0.3.1    2022-09-01 [1] CRAN (R 4.2.0)\n here                 * 1.0.1    2020-12-13 [1] CRAN (R 4.2.0)\n htmltools              0.5.4    2022-12-07 [1] CRAN (R 4.2.0)\n htmlwidgets            1.5.4    2021-09-08 [1] CRAN (R 4.2.2)\n httr                   1.4.4    2022-08-17 [1] CRAN (R 4.2.0)\n IRanges              * 2.32.0   2022-11-01 [1] Bioconductor\n jsonlite               1.8.4    2022-12-06 [1] CRAN (R 4.2.0)\n KEGGREST               1.38.0   2022-11-01 [1] Bioconductor\n KernSmooth             2.23-20  2021-05-03 [2] CRAN (R 4.2.2)\n knitr                  1.41     2022-11-18 [1] CRAN (R 4.2.0)\n labeling               0.4.2    2020-10-20 [1] CRAN (R 4.2.0)\n lattice                0.20-45  2021-09-22 [2] CRAN (R 4.2.2)\n lifecycle              1.0.3    2022-10-07 [1] CRAN (R 4.2.0)\n limma                * 3.54.0   2022-11-01 [1] Bioconductor\n locfit                 1.5-9.6  2022-07-11 [1] CRAN (R 4.2.0)\n magrittr               2.0.3    2022-03-30 [1] CRAN (R 4.2.0)\n Matrix                 1.5-3    2022-11-11 [1] CRAN (R 4.2.0)\n MatrixGenerics       * 1.10.0   2022-11-01 [1] Bioconductor\n matrixStats          * 0.63.0   2022-11-18 [1] CRAN (R 4.2.0)\n memoise                2.0.1    2021-11-26 [1] CRAN (R 4.2.0)\n munsell                0.5.0    2018-06-12 [1] CRAN (R 4.2.0)\n openssl                2.0.5    2022-12-06 [1] CRAN (R 4.2.0)\n org.Mm.eg.db         * 3.16.0   2022-12-29 [1] Bioconductor\n pillar                 1.8.1    2022-08-19 [1] CRAN (R 4.2.0)\n pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.2.0)\n png                    0.1-8    2022-11-29 [1] CRAN (R 4.2.0)\n purrr                  1.0.0    2022-12-20 [1] CRAN (R 4.2.0)\n R6                     2.5.1    2021-08-19 [1] CRAN (R 4.2.0)\n Rcpp                   1.0.9    2022-07-08 [1] CRAN (R 4.2.0)\n RCurl                  1.98-1.9 2022-10-03 [1] CRAN (R 4.2.0)\n readxl               * 1.4.1    2022-08-17 [1] CRAN (R 4.2.0)\n rlang                  1.0.6    2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown              2.19     2022-12-15 [1] CRAN (R 4.2.0)\n rprojroot              2.0.3    2022-04-02 [1] CRAN (R 4.2.0)\n RSQLite                2.2.19   2022-11-24 [1] CRAN (R 4.2.0)\n rstudioapi             0.14     2022-08-22 [1] CRAN (R 4.2.0)\n S4Vectors            * 0.36.1   2022-12-05 [1] Bioconductor\n scales                 1.2.1    2022-08-20 [1] CRAN (R 4.2.0)\n sessioninfo            1.2.2    2021-12-06 [1] CRAN (R 4.2.0)\n statmod                1.4.37   2022-08-12 [1] CRAN (R 4.2.0)\n stringi                1.7.8    2022-07-11 [1] CRAN (R 4.2.0)\n stringr                1.5.0    2022-12-02 [1] CRAN (R 4.2.0)\n SummarizedExperiment * 1.28.0   2022-11-01 [1] Bioconductor\n sys                    3.4.1    2022-10-18 [1] CRAN (R 4.2.0)\n tibble               * 3.1.8    2022-07-22 [1] CRAN (R 4.2.0)\n tidyr                * 1.2.1    2022-09-08 [1] CRAN (R 4.2.0)\n tidyselect             1.2.0    2022-10-10 [1] CRAN (R 4.2.0)\n utf8                   1.2.2    2021-07-24 [1] CRAN (R 4.2.0)\n vctrs                  0.5.1    2022-11-16 [1] CRAN (R 4.2.0)\n withr                  2.5.0    2022-03-03 [1] CRAN (R 4.2.0)\n xfun                   0.35     2022-11-16 [1] CRAN (R 4.2.0)\n XVector                0.38.0   2022-11-01 [1] Bioconductor\n yaml                   2.3.6    2022-10-18 [1] CRAN (R 4.2.0)\n zlibbioc               1.44.0   2022-11-01 [1] Bioconductor\n\n [1] /Users/sandmann/Library/R/x86_64/4.2/library\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n```\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}