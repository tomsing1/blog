{
  "hash": "6cba37687c01caf9218e3406272b1863",
  "result": {
    "markdown": "---\ntitle: \"QuantSeq RNAseq analysis (4): Validating published results (with UMIs)\"\nauthor: \"Thomas Sandmann\"\ndate: \"2023-01-16\"\nfreeze: true\ncategories: [R, nextflow, NGS]\neditor:\n  markdown:\n    wrap: 72\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\neditor_options: \n  chunk_output_type: console\n---\n\n\n::: {.callout-note collapse=\"false\"}\n\nThis is the fourth of four posts documenting my progress toward\nprocessing and analyzing \n[QuantSeq FWD 3' tag RNAseq](https://www.lexogen.com/quantseq-3mrna-sequencing/) \ndata \nwith the \n[nf-core/rnaseq](https://nf-co.re/rnaseq)\nworkflow. \n\n1. [Configuring & executing the nf-core/rnaseq workflow](../nextflow-core-quantseq-1-settings/index.html)\n2. [Exploring the workflow outputs](../nextflow-core-quantseq-2-output/index.html)\n3. [Validating the workflow by reproducing results published by Xia et al (no UMIs)](../nextflow-core-quantseq-3-xia/index.html)\n4. **Validating the workflow by reproducing results published by Nugent et al (including UMIs)**\n\nMany thanks to [Harshil Patel](https://github.com/drpatelh), \n[AntÃ³nio Miguel de Jesus Domingues](https://github.com/adomingues/)\nand \n[Matthias Zepper](https://github.com/matthiasZepper/)\nfor their generous guidance & input via [nf-core slack](nfcore.slack.com).\n(Any mistakes are mine.)\n:::\n\n## tl;dr\n\n- This analysis compares the performance of the \n  [nf-core/rnaseq workflow](https://nf-co.re/rnaseq)\n  for QuantSeq FWD 3' tag RNAseq data with unique molecular identifiers (UMIs).\n- The differential expression analysis results are highly\n  concordant with those obtained in the original publication.\n- With the appropriate settings, the \n  [nf-core/rnaseq workflow](https://nf-co.re/rnaseq) is a valid data processing\n  pipeline for this data type.\n\nThe\n[first post in this series](../nextflow-core-quantseq-1-settings/index.html)\nwalked through the preprocesssing of QuantSeq FWD data \npublished in a preprint by \n[Nugent et al, 2020](https://pubmed.ncbi.nlm.nih.gov/31902528/),\nwho used the \n[QuantSeq FWD](https://www.lexogen.com/quantseq-3mrna-sequencing/)\nlibrary preparation protocol and added unique molecular\nidentifiers (UMIs). The UMIs were used to identify and remove PCR duplicates\nduring the data preprocessing steps.\n\nHere, we use Bioconductor/R packages to reproduce the downstream results.\nWe perform the same analysis twice with either\n\n1. the original counts matrix published by the authors [^1]\n2. the output of the nf-core/rnaseq workflow\n\n[^1]: Full disclosure: I am a co-author of this publication.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(edgeR)\nlibrary(ggplot2)\nlibrary(here)\nlibrary(org.Mm.eg.db)\nlibrary(SummarizedExperiment)\nlibrary(tibble)\nlibrary(tidyr)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Sample annotations\n\nWe start by retrieving the sample annotation table, listing e.g. the `sex`,\nand `genotype` for each mouse, and the `batch` for each collected sample.\n\nThis information is available in the [SRA Run Explorer](https://www.ncbi.nlm.nih.gov/Traces/study/?query_key=4&WebEnv=MCID_63c1d2b51518446806822e1d&o=acc_s%3Aa#). \n(I saved it in the [sample_metadata.csv CSV file](sample_metadata.csv) if you \nwant to follow along>.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_sheet <- file.path(work_dir, \"sample_metadata.csv\")\nsample_anno <- read.csv(sample_sheet, row.names = \"Experiment\")\nhead(sample_anno[, c(\"Run\", \"Animal.ID\", \"Age\", \"age_unit\", \"Cell_type\",\n                     \"sex\", \"Genotype\", \"Sample.Name\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  Run Animal.ID Age age_unit Cell_type    sex  Genotype\nSRX6420531 SRR9659551       IL1   2   months astrocyte female TREM2 +/+\nSRX6420532 SRR9659552       IL1   2   months microglia female TREM2 +/+\nSRX6420533 SRR9659553      IL10   2   months astrocyte female TREM2 -/-\nSRX6420534 SRR9659554      IL10   2   months microglia female TREM2 -/-\nSRX6420535 SRR9659555      IL11  16   months astrocyte female TREM2 +/+\nSRX6420536 SRR9659556      IL11  16   months microglia female TREM2 +/+\n           Sample.Name\nSRX6420531  GSM3933549\nSRX6420532  GSM3933550\nSRX6420533  GSM3933551\nSRX6420534  GSM3933552\nSRX6420535  GSM3933553\nSRX6420536  GSM3933554\n```\n:::\n:::\n\n\nBecause our SRA metadata doesn't include the GEO sample title, I saved the\nidentifier mappings in the [GEO_sample_ids.csv CSV file](GEO_sample_ids.csv).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeo_ids <- read.csv(file.path(work_dir, \"GEO_sample_ids.csv\"))\nhead(geo_ids)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  sample_name sample_id\n1  GSM3933549     IL1_A\n2  GSM3933550     IL1_M\n3  GSM3933551    IL10_A\n4  GSM3933552    IL10_M\n5  GSM3933553    IL11_A\n6  GSM3933554    IL11_M\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncolnames(sample_anno)<- tolower(colnames(sample_anno))\ncolnames(sample_anno) <- sub(\".\", \"_\", colnames(sample_anno), \n                             fixed = TRUE) \nsample_anno <- sample_anno[, c(\"sample_name\", \"animal_id\", \"genotype\", \"sex\",\n                               \"age\", \"cell_type\")]\nsample_anno$genotype <- factor(sample_anno$genotype, \n                               levels = c(\"TREM2 +/+\", \"TREM2 -/-\"))\nsample_anno$genotype <- dplyr::recode_factor(\n  sample_anno$genotype,\"TREM2 +/+\" = \"WT\", \"TREM2 -/-\" = \"KO\")\nsample_anno$age <- factor(sample_anno$age)\nsample_anno$sample_title <- geo_ids[\n  match(sample_anno$sample_name, geo_ids$sample_name), \"sample_id\"]\nhead(sample_anno)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           sample_name animal_id genotype    sex age cell_type sample_title\nSRX6420531  GSM3933549       IL1       WT female   2 astrocyte        IL1_A\nSRX6420532  GSM3933550       IL1       WT female   2 microglia        IL1_M\nSRX6420533  GSM3933551      IL10       KO female   2 astrocyte       IL10_A\nSRX6420534  GSM3933552      IL10       KO female   2 microglia       IL10_M\nSRX6420535  GSM3933553      IL11       WT female  16 astrocyte       IL11_A\nSRX6420536  GSM3933554      IL11       WT female  16 microglia       IL11_M\n```\n:::\n:::\n\n\nThis experiment includes 56 samples of astrocytes or \nmicroglia cells obtained from 28 \nfemale mice that were either 2- or 16 months of age.\n\nThe animals are either wildtype (`WT`) or  homozygous knockouts (`KO`) for the\n[Trem2 gene](https://www.uniprot.org/uniprotkb/Q99NH8/entry).\n\n## Nugent et al's original count data\n\nFirst, we retrieve the authors' count matrix from \n[NCBI GEO](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE158152), available\nas a Supplementary tab-delimited text file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeo_url <- paste0(\"https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE134031&\",\n                  \"format=file&file=GSE134031%5FDST120%2Etab%2Egz\")\nraw_counts <- read.delim(textConnection(readLines(gzcon(url(geo_url)))))\nhead(colnames(raw_counts), 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"mgi_symbol\"              \"gene_biotype\"           \n [3] \"ensembl_gene_id_version\" \"IL1_A\"                  \n [5] \"IL1_M\"                   \"IL10_A\"                 \n [7] \"IL10_M\"                  \"IL11_A\"                 \n [9] \"IL11_M\"                  \"IL12_A\"                 \n```\n:::\n:::\n\n\nThe `raw_counts` data.frame contains information about the detected genes (\n`mgi_symbol`, `ensembl_gene_id_version`) and the samples are identified by a\nshorthand of their GEO title (e.g. `IL1_M`, `IL1_A`). \n\nWe use the raw counts to populate a new `DGEList` object and perform\nLibrary Size Normalization with the `TMM` approach.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncount_data <- as.matrix(raw_counts[, grep(\"^IL\", colnames(raw_counts))])\nrow.names(count_data) <- raw_counts$ensembl_gene_id_version\ncolnames(count_data) <- row.names(sample_anno)[\n  match(colnames(count_data), sample_anno$sample_title)\n]\n\ngene_data <- data.frame(\n  gene_id = raw_counts$ensembl_gene_id_version,\n  gene_name = raw_counts$mgi_symbol,\n  row.names = raw_counts$ensembl_gene_id_version\n)\n\ncol_data <- data.frame(\n  sample_anno[colnames(count_data),\n              c(\"sample_title\", \"animal_id\",  \"age\", \"genotype\", \"cell_type\")],\n  workflow = \"geo\"\n)\n\ndge <- DGEList(\n  counts = as.matrix(count_data), \n  samples = col_data[colnames(count_data), ], \n  genes = gene_data[row.names(count_data), ]\n)\n\ndge <- calcNormFactors(dge, method = \"TMM\")\n```\n:::\n\n\nThis is a large dataset, containing e.g. samples from two different cell types\n(microglia and astrocytes) and two different age groups (2 and 16 months).\n\nHere, we will restrict the analysis to microglia samples collected from older\nanimals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndge <- dge[, dge$samples$cell_type == \"microglia\" & dge$samples$age == \"16\"]\n```\n:::\n\n\nLet's identify which genes are significantly differentially expressed between\nthe two genotypes!\n\n### Linear modeling with limma/voom\n\nFirst, we use the `edgeR::filterByExpr()` function to identify genes with\nsufficiently large counts to be examined for differential expression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndesign <- model.matrix(~ genotype, data = dge$samples)\ncolnames(design) <- sub(\"genotype\", \"\", colnames(design))\nkeep <- filterByExpr(dge, design = design)\n```\n:::\n\n\nNext, we fit a linear model to the data using the \n[limma/voom](https://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-2-r29)\napproach. The model only includes the `genotype` (with `WT` as the reference\nlevel) as a fixed effect.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- voomLmFit(\n  dge[keep, row.names(design)], \n  design = design,\n  sample.weights = TRUE, \n  plot = FALSE\n)\nfit <- eBayes(fit, robust=TRUE)\n```\n:::\n\n\nThe following table displays the number of differentially up- and down-regulated\ngenes after applying a false-discovery (`adj.P.Val`) threshold of 5%. \nWe detect significant differences between `KO` and `WT` animals in a small\nnumber of genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(decideTests(fit)[, \"KO\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         KO\nDown     10\nNotSig 6343\nUp        2\n```\n:::\n:::\n\n\nThe top 10 genes with the smallest p-values include well known markers of\nmicroglia activation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntopTreat(fit, coef = \"KO\")[, c(\"gene_name\", \"logFC\", \"P.Value\", \"adj.P.Val\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      gene_name      logFC      P.Value    adj.P.Val\nENSMUSG00000015568.16       Lpl -3.1524285 2.088121e-17 1.327001e-13\nENSMUSG00000023992.14     Trem2 -2.0556690 3.260855e-15 1.036137e-11\nENSMUSG00000079293.11    Clec7a -1.5285199 9.357950e-12 1.982326e-08\nENSMUSG00000029304.14      Spp1 -4.6265897 4.968572e-10 7.893819e-07\nENSMUSG00000003418.11   St8sia6 -1.6639344 7.279411e-09 8.240295e-06\nENSMUSG00000002602.16       Axl -1.2096969 7.779979e-09 8.240295e-06\nENSMUSG00000068129.5       Cst7 -2.0966828 9.881687e-08 8.971160e-05\nENSMUSG00000008845.9      Cd163  0.8165263 1.513307e-06 1.202133e-03\nENSMUSG00000039109.16     F13a1  0.8081490 1.735344e-06 1.225345e-03\nENSMUSG00000000682.7       Cd52 -0.7939756 4.846100e-06 3.079696e-03\n```\n:::\n:::\n\n\nNext we repeat *the same analysis* with the output of the nf-core/rnaseq\nworkflow.\n\n## nf-core/rnaseq results\n\nWe start with the raw counts contained in the \n[salmon.merged.gene_counts.rds](salmon.merged.gene_counts.rds) \nfile generated by the nf-core/rnaseq workflow. \n\nWe TMM-normalize the data, as before. (This step converts the \n`SummarizedExperiment` into a `DGEList object as well.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_file <- file.path(work_dir, \"salmon.merged.gene_counts.rds\")\nse <- readRDS(count_file)\nstopifnot(all(colnames(se) %in% row.names(sample_anno)))\ndge_nfcore <- calcNormFactors(se, method = \"TMM\")\n```\n:::\n\n\nNext, we add the sample metadata and fit the same linear model as before.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndge_nfcore$samples <- data.frame(\n  dge_nfcore$samples,\n  sample_anno[colnames(dge_nfcore),\n              c(\"sample_title\", \"animal_id\", \"age\", \"genotype\", \"cell_type\")],\n  workflow = \"nfcore\"\n)\nstopifnot(all(colnames(dge) %in% colnames(dge_nfcore)))\ndge_nfcore <- dge_nfcore[, colnames(dge)]\n\ndesign <- model.matrix(~ genotype, data = dge_nfcore$samples)\ncolnames(design) <- sub(\"genotype\", \"\", colnames(design))\nkeep <- filterByExpr(dge_nfcore, design = design)\nfit_nfcore <- voomLmFit(\n  dge_nfcore[keep, row.names(design)], \n  design = design,\n  sample.weights = TRUE, \n  plot = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nFirst sample weights (min/max) 0.3858285/1.6444242\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFinal sample weights (min/max) 0.3854635/1.6427464\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nfit_nfcore <- eBayes(fit_nfcore, robust=TRUE)\n```\n:::\n\n\nAs with the original count data from NCBI GEO, we detect small number of\ndifferentially expressed genes (FDR < 5%).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(decideTests(fit_nfcore)[, \"KO\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         KO\nDown     10\nNotSig 7824\nUp        2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncpms <- local({\n  geo <- cpm(dge, normalized.lib.sizes = TRUE) %>%\n    as.data.frame() %>%\n    cbind(dge$genes) %>%\n    pivot_longer(cols = starts_with(\"SRX\"), \n                 names_to = \"sample_name\",\n                 values_to = \"cpm\") %>%\n    dplyr::left_join(\n      tibble::rownames_to_column(dge$samples, \"sample_name\"),\n      by = \"sample_name\"\n    ) %>%\n    dplyr::mutate(dataset = \"Nugent et al\")\n  \n  nfcore <- cpm(dge_nfcore, normalized.lib.sizes = TRUE) %>%\n    as.data.frame() %>%\n    cbind(dge_nfcore$genes) %>%\n    pivot_longer(cols = starts_with(\"SRX\"), \n                 names_to = \"sample_name\",\n                 values_to = \"cpm\") %>%\n    dplyr::left_join(\n      tibble::rownames_to_column(dge_nfcore$samples, \"sample_name\"),\n      by = \"sample_name\"\n    ) %>%\n    dplyr::mutate(dataset = \"nf-core\")\n  \n  dplyr::bind_rows(\n    dplyr::select(geo, any_of(intersect(colnames(geo), colnames(nfcore)))),\n    dplyr::select(nfcore, any_of(intersect(colnames(geo), colnames(nfcore))))\n  )\n})\n\ntt <- rbind(\n  topTreat(fit, coef = \"KO\", number = Inf)[\n    , c(\"gene_id\", \"gene_name\", \"logFC\", \"P.Value\", \"adj.P.Val\")] %>%\n    dplyr::mutate(dataset = \"geo\"),\n   topTreat(fit_nfcore, coef = \"KO\", number = Inf)[\n     , c(\"gene_id\", \"gene_name\", \"logFC\", \"P.Value\", \"adj.P.Val\")] %>%\n    dplyr::mutate(dataset = \"nfcore\")\n) %>%\n  dplyr::mutate(adj.P.Val = signif(adj.P.Val, 2)) %>%\n  tidyr::pivot_wider(\n    id_cols = c(\"gene_id\", \"gene_name\"), \n    names_from = \"dataset\", \n    values_from = \"adj.P.Val\") %>%\n  dplyr::arrange(nfcore) %>%\n  as.data.frame() %>%\n  tibble::column_to_rownames(\"gene_id\")\n```\n:::\n\n\n### Normalized expression\n\nFirst, we examine the correlation between the normalized log-transformed\ngene expression estimates returned from the two workflows. We focus on those\ngenes that passed the `filterByExpr` thresholds above, e.g. those genes\ndeemed sufficiently highly expressed to be assessed for differential expression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncommon_genes <- intersect(row.names(fit), row.names(fit_nfcore))\nsum_stats <- cpms %>%\n  dplyr::filter(gene_id %in% common_genes) %>%\n  tidyr::pivot_wider(\n    id_cols = c(\"gene_id\", \"sample_name\"),\n    values_from = \"cpm\",\n    names_from = \"dataset\") %>%\n  dplyr::group_by(gene_id) %>%\n  dplyr::summarise(\n    r = cor(log1p(`Nugent et al`), log1p(`nf-core`)),\n    mean_nugent = mean(`Nugent et al`),\n    mean_nfcore = mean(`nf-core`))\n\np <- ggplot(data = sum_stats, aes(x = r)) + \n  geom_histogram(bins = 50) +\n  scale_x_continuous(limits = c(0, 1.02), breaks = seq(0, 1, by = 0.2)) +\n  labs(x = \"Pearson correlation coefficient (R)\", \n       y = \"Number of genes\",\n       title = \"Correlation between normalized log2 counts\") +\n  theme_linedraw(14)\nprint(p)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 35 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_bar()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=528}\n:::\n:::\n\n\nThe correlation between normalized log2 expression estimates is reasonably high,\ne.g. 80% of all genes showing a Pearson correlation coefficient > \n0.82. \n\nThe relatively low correlation might reflect the low RNA input of \nthis experiment, e.g. only 6314 of the genes \ngenes were detected with > 10 UMI-corrected normalized counts per million reads.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = sum_stats, aes(x = mean_nugent + 1)) + \n  geom_histogram(bins = 50) +\n  scale_x_continuous(trans = scales::log10_trans(),\n                     labels = scales::comma_format()) +\n  labs(x = \"Mean normalized counts per million\", \n       y = \"Number of genes\",\n       title = \"Average expression\",\n       subtitle = \"Nugent et al\") +\n  theme_linedraw(14)\nprint(p)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nNext, we will examine the results of the _differential_ expression analysis.\n\n### Differential expression results\n\nAnalyses based on either preprocessing pipeline yield similar numbers of \ndifferentially expressed genes.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncommon_genes <- intersect(row.names(fit), row.names(fit_nfcore))\nresults <- cbind(\n  decideTests(fit)[common_genes, \"KO\"], \n  decideTests(fit_nfcore)[common_genes, \"KO\"]\n)\ncolnames(results) <- c(\"Nugent et al\", \"nf-core\")\nclass(results) <- \"TestResults\"\nsummary(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Nugent et al nf-core\n-1           10       9\n0          6302    6303\n1             2       2\n```\n:::\n:::\n\n\nBut are these _the same genes_ in both sets of results?\n\nWe can visualize the overlap between the sets of significant genes in a Venn \ndiagram (FDR < 5%). The majority of differentially expressed genes is \ndetected with both quantitation approaches (for both up- and down-regulated\ngenes.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlimma::vennDiagram(results, include = c(\"up\", \"down\"),\n                   counts.col=c(\"red\", \"blue\"), mar = rep(0,4))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=528}\n:::\n:::\n\n\nFor example, the following plots show the normalized expression of the most\nsignificantly differentially expressed genes (known markers of active \nmicroglia).\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nfor (gene in topTreat(fit, coef = \"KO\", number = 6)[[\"gene_id\"]]) {\n p <- cpms %>%\n    dplyr::filter(gene_id == gene) %>%\n    ggplot(aes(x = genotype, y = cpm)) + \n    geom_point(position = position_jitter(width = 0.05), alpha = 0.8) + \n    facet_grid(dataset ~ ., scales = \"free\") + \n    labs(title = dge$genes[gene, \"gene_name\"],\n         y = \"Normalized expression (CPM)\",\n         x = element_blank(),\n         subtitle = sprintf(\"FDR nf-core: %s\\nFDR GEO: %s\",\n                       tt[gene, \"nfcore\"],\n                       tt[gene, \"geo\"]\n                       )\n         ) +\n   theme_linedraw(14)\n print(p)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-2.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-3.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-4.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-5.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-6.png){width=288}\n:::\n:::\n\n\nApplying a hard FDR threshold can inflate the number of apparent differences,\ne.g. when a gene is close to the significance threshold (see below).\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_cor <- cor(\n  fit$coefficients[common_genes, \"KO\"], \n  fit_nfcore$coefficients[common_genes, \"KO\"])\n```\n:::\n\n\nThe log2 fold estimates for the `Hom` vs `WT` comparison are well correlated\nacross the two analysis workflows (Pearson correlation coefficient \nR = 0.88 ).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoothScatter(\n  fit$coefficients[common_genes, \"KO\"], \n  fit_nfcore$coefficients[common_genes, \"KO\"],\n  ylab = \"nf-core (log2FC)\",\n  xlab = \"Nugent et al (log2FC)\",\n  main = \"Homozygous APP vs WT (effect size)\"\n)\ntext(x = 1, y = -4, labels = sprintf(\"R = %s\", signif(p_cor, 2)))\nabline(0, 1)\nabline(h = 0, v = 0, lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=432}\n:::\n:::\n\n\nas are the t-statistics across all examined genes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_cor <- cor(\n  fit$t[common_genes, \"KO\"], \n  fit_nfcore$t[common_genes, \"KO\"])\nsmoothScatter(\n  fit$t[common_genes, \"KO\"], \n  fit_nfcore$t[common_genes, \"KO\"],\n  ylab = \"nf-core (t-statistic)\",\n  xlab = \"Nugent et al (t-statistic)\",\n  main = \"Homozygous APP vs WT (t-statistic)\")\ntext(x = 3, y = -15, labels = sprintf(\"R = %s\", signif(p_cor, 2)))\nabline(0, 1)\nabline(h = 0, v = 0, lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=432}\n:::\n:::\n\n\n::: {.callout-note}\n\nBecause this comparison yields only a small number of bona-fide differentially\nexpressed genes, we don't expect to see a high correlation between the \nlog2 fold changes or the t-statistics between the two analyses: most of the \nvalues are very close to zero.\n\n:::\n\n#### Discordant significance calls\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# genes detected in Nugent et al, but not significant with nf-core\ngenes <- row.names(results)[which(abs(results[, 1]) == 1 & results[, 2] == 0)]\n```\n:::\n\n\nAt FDR < 5% 2 genes were reported as significantly \ndifferentially expressed with the original Nugent et al count matrix\nbut *not* with the output of the nf-core/rnaseq workflow.\n\nAs side-by-side comparison of the FDR (`adj.P.Val`) for these genes confirms\nthat the one of them (*Cd52*) displays significance close to the 5% threshold\nin the nf-core/rnaseq output as well. The second gene (*Slamf8*) also displays\nthe same trend in both datasets, but is detected at lower levels (e.g. lower\nnormalized CPMs) in the nf-core/rnaseq output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(tt[genes, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     gene_name    geo nfcore\nENSMUSG00000000682.7      Cd52 0.0031  0.089\nENSMUSG00000053318.7    Slamf8 0.0190  0.270\n```\n:::\n:::\n\n\n#### Examples\n\nFinally, we plot the normalized gene expression estimates for the \n2 discordant genes.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nfor (gene in genes) {\n p <- cpms %>%\n    dplyr::filter(gene_id == gene) %>%\n    ggplot(aes(x = genotype, y = cpm)) + \n    geom_point(position = position_jitter(width = 0.05), alpha = 0.8) + \n    facet_grid(dataset ~ ., scales = \"free\") + \n    labs(title = dge$genes[gene, \"gene_name\"],\n         y = \"Normalized expression (CPM)\",\n         x = element_blank(),\n         subtitle = sprintf(\"FDR nf-core: %s\\nFDR GEO: %s\",\n                       tt[gene, \"nfcore\"],\n                       tt[gene, \"geo\"]\n                       )\n         ) +\n   theme_linedraw(14)\n print(p)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-2.png){width=288}\n:::\n:::\n\n\n## Conclusions\n\n- Differential expression analyses of raw counts obtained with the \n  `nc-core/rnaseq` workflow yields results that are highly concordant with those\n  obtained with the raw counts the authors deposited in NCBI GEO.\n- With appropriate parameters the `nf-core/rnaseq` workflow can be applied to\n  QuantSeq FWD 3'tag RNA-seq data that includes unique molecular identifiers.\n\n## Reproducibility\n\n<details>\n<summary>\nSessionInfo\n</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nâ Session info âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Big Sur ... 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Los_Angeles\n date     2023-01-16\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n\nâ Packages âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\n package              * version  date (UTC) lib source\n AnnotationDbi        * 1.60.0   2022-11-01 [1] Bioconductor\n askpass                1.1      2019-01-13 [1] CRAN (R 4.2.0)\n assertthat             0.2.1    2019-03-21 [1] CRAN (R 4.2.0)\n Biobase              * 2.58.0   2022-11-01 [1] Bioconductor\n BiocGenerics         * 0.44.0   2022-11-01 [1] Bioconductor\n Biostrings             2.66.0   2022-11-01 [1] Bioconductor\n bit                    4.0.5    2022-11-15 [1] CRAN (R 4.2.0)\n bit64                  4.0.5    2020-08-30 [1] CRAN (R 4.2.0)\n bitops                 1.0-7    2021-04-24 [1] CRAN (R 4.2.0)\n blob                   1.2.3    2022-04-10 [1] CRAN (R 4.2.0)\n cachem                 1.0.6    2021-08-19 [1] CRAN (R 4.2.0)\n cli                    3.5.0    2022-12-20 [1] CRAN (R 4.2.0)\n colorspace             2.0-3    2022-02-21 [1] CRAN (R 4.2.0)\n crayon                 1.5.2    2022-09-29 [1] CRAN (R 4.2.0)\n credentials            1.3.2    2021-11-29 [1] CRAN (R 4.2.0)\n DBI                    1.1.3    2022-06-18 [1] CRAN (R 4.2.0)\n DelayedArray           0.24.0   2022-11-01 [1] Bioconductor\n digest                 0.6.31   2022-12-11 [1] CRAN (R 4.2.0)\n dplyr                * 1.0.10   2022-09-01 [1] CRAN (R 4.2.0)\n edgeR                * 3.40.1   2022-12-14 [1] Bioconductor\n ellipsis               0.3.2    2021-04-29 [1] CRAN (R 4.2.0)\n evaluate               0.19     2022-12-13 [1] CRAN (R 4.2.0)\n fansi                  1.0.3    2022-03-24 [1] CRAN (R 4.2.0)\n farver                 2.1.1    2022-07-06 [1] CRAN (R 4.2.0)\n fastmap                1.1.0    2021-01-25 [1] CRAN (R 4.2.0)\n generics               0.1.3    2022-07-05 [1] CRAN (R 4.2.0)\n GenomeInfoDb         * 1.34.4   2022-12-01 [1] Bioconductor\n GenomeInfoDbData       1.2.9    2022-12-12 [1] Bioconductor\n GenomicRanges        * 1.50.2   2022-12-16 [1] Bioconductor\n ggplot2              * 3.4.0    2022-11-04 [1] CRAN (R 4.2.0)\n glue                   1.6.2    2022-02-24 [1] CRAN (R 4.2.0)\n gtable                 0.3.1    2022-09-01 [1] CRAN (R 4.2.0)\n here                 * 1.0.1    2020-12-13 [1] CRAN (R 4.2.0)\n htmltools              0.5.4    2022-12-07 [1] CRAN (R 4.2.0)\n htmlwidgets            1.5.4    2021-09-08 [1] CRAN (R 4.2.2)\n httr                   1.4.4    2022-08-17 [1] CRAN (R 4.2.0)\n IRanges              * 2.32.0   2022-11-01 [1] Bioconductor\n jsonlite               1.8.4    2022-12-06 [1] CRAN (R 4.2.0)\n KEGGREST               1.38.0   2022-11-01 [1] Bioconductor\n KernSmooth             2.23-20  2021-05-03 [2] CRAN (R 4.2.2)\n knitr                  1.41     2022-11-18 [1] CRAN (R 4.2.0)\n labeling               0.4.2    2020-10-20 [1] CRAN (R 4.2.0)\n lattice                0.20-45  2021-09-22 [2] CRAN (R 4.2.2)\n lifecycle              1.0.3    2022-10-07 [1] CRAN (R 4.2.0)\n limma                * 3.54.0   2022-11-01 [1] Bioconductor\n locfit                 1.5-9.6  2022-07-11 [1] CRAN (R 4.2.0)\n magrittr               2.0.3    2022-03-30 [1] CRAN (R 4.2.0)\n Matrix                 1.5-3    2022-11-11 [1] CRAN (R 4.2.0)\n MatrixGenerics       * 1.10.0   2022-11-01 [1] Bioconductor\n matrixStats          * 0.63.0   2022-11-18 [1] CRAN (R 4.2.0)\n memoise                2.0.1    2021-11-26 [1] CRAN (R 4.2.0)\n munsell                0.5.0    2018-06-12 [1] CRAN (R 4.2.0)\n openssl                2.0.5    2022-12-06 [1] CRAN (R 4.2.0)\n org.Mm.eg.db         * 3.16.0   2022-12-29 [1] Bioconductor\n pillar                 1.8.1    2022-08-19 [1] CRAN (R 4.2.0)\n pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.2.0)\n png                    0.1-8    2022-11-29 [1] CRAN (R 4.2.0)\n purrr                  1.0.0    2022-12-20 [1] CRAN (R 4.2.0)\n R6                     2.5.1    2021-08-19 [1] CRAN (R 4.2.0)\n Rcpp                   1.0.9    2022-07-08 [1] CRAN (R 4.2.0)\n RCurl                  1.98-1.9 2022-10-03 [1] CRAN (R 4.2.0)\n rlang                  1.0.6    2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown              2.19     2022-12-15 [1] CRAN (R 4.2.0)\n rprojroot              2.0.3    2022-04-02 [1] CRAN (R 4.2.0)\n RSQLite                2.2.19   2022-11-24 [1] CRAN (R 4.2.0)\n rstudioapi             0.14     2022-08-22 [1] CRAN (R 4.2.0)\n S4Vectors            * 0.36.1   2022-12-05 [1] Bioconductor\n scales                 1.2.1    2022-08-20 [1] CRAN (R 4.2.0)\n sessioninfo            1.2.2    2021-12-06 [1] CRAN (R 4.2.0)\n statmod                1.4.37   2022-08-12 [1] CRAN (R 4.2.0)\n stringi                1.7.8    2022-07-11 [1] CRAN (R 4.2.0)\n stringr                1.5.0    2022-12-02 [1] CRAN (R 4.2.0)\n SummarizedExperiment * 1.28.0   2022-11-01 [1] Bioconductor\n sys                    3.4.1    2022-10-18 [1] CRAN (R 4.2.0)\n tibble               * 3.1.8    2022-07-22 [1] CRAN (R 4.2.0)\n tidyr                * 1.2.1    2022-09-08 [1] CRAN (R 4.2.0)\n tidyselect             1.2.0    2022-10-10 [1] CRAN (R 4.2.0)\n utf8                   1.2.2    2021-07-24 [1] CRAN (R 4.2.0)\n vctrs                  0.5.1    2022-11-16 [1] CRAN (R 4.2.0)\n withr                  2.5.0    2022-03-03 [1] CRAN (R 4.2.0)\n xfun                   0.35     2022-11-16 [1] CRAN (R 4.2.0)\n XVector                0.38.0   2022-11-01 [1] Bioconductor\n yaml                   2.3.6    2022-10-18 [1] CRAN (R 4.2.0)\n zlibbioc               1.44.0   2022-11-01 [1] Bioconductor\n\n [1] /Users/sandmann/Library/R/x86_64/4.2/library\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\nââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\n```\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}