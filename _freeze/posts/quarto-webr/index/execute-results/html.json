{
  "hash": "860356ceb50d195b7bff2ea9c2984ee8",
  "result": {
    "markdown": "---\ntitle: \"Embedding R into Quarto documents with quarto-webr\"\nauthor: \"Thomas Sandmann\"\ndate: \"2023-11-18\"\nfreeze: true\ncategories: [R, Quarto, TIL]\neditor:\n  markdown:\n    wrap: 72\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\neditor_options: \n  chunk_output_type: console\nresources:\n  - day1_results.csv\n  - day2_results.csv\n  - day3_results.csv\n  - quarto_webr_example.qmd\n  - differential_expression_analysis.R\n  - webr-serviceworker.js\n  - webr-worker.js\n---\n\n\n## tl;dr\n\nToday I learned how to use the\n[quarto-webr](https://github.com/coatless/quarto-webr)\nextension to turn a Quarto markdown document \n[into an interactive report](https://tomsing1.github.io/blog/posts/quarto-webr/quarto_webr_example.html)\nthat executes R code in the browser and lets readers change the code on the fly!\n\n![Venn diagram](venn_diagram.jpg){ width=50% }\n\n## Motivation\n\nSince its first release in March 2023, the \n[webR project](https://docs.r-wasm.org/webr/latest/)\nhas made incredible progress. It\n\n> makes it possible to run R code in the browser without the need for an R\nserver to execute the code: the R interpreter runs directly on the userâ€™s\nmachine. \n\nI routinely communicate the results of analysis to collaborators as HTML\ndocuments, e.g. websites created from \n[Quarto markdown](https://quarto.org/)\nfiles that combine prose and the analysis code itself. While I incorporate \ninteractive elements (e.g. tables or plots) as much as possible, the reports\nare static - e.g. they don't allow users to change parameters on the fly.\n\nThat's why I am excited to learn about James J Balamuta's \n[quarto-webr](https://github.com/coatless/quarto-webr)\nextension, which embeds webR into quarto documents.\n\nToday I am making my first steps, with the goal of creating an HTML report that\n\n1. Reads differential gene expression results from multiple experiments from\n   CSV files.[^1]\n2. Applies a user-specified false discovery (FDR) threshold to each experiment.\n3. Creates a Venn diagram to visualize the overlap between the results.\n4. Shows the results for the genes deemed significantly differentially expressed\n   in _all_ experiments.\n   \nSpecifically, I would like users to be able to modify the FDR threshold\nthemselves and to trigger a refresh of the plot & tables.\n\n[^1]: The details of the experiment are not important, as I am just looking for\na convenient example to test the `quarto-webr` extension. If you would like to \nlearn more please check out \n[this previous post](https://tomsing1.github.io/blog/posts/nextflow-core-quantseq-3-xia/).\nAn R script that generates the CSV files using the limma/voom framework\n[is available here](http://localhost:5154/posts/quarto-webr/differential_expression_analysis.R)\n\n## Installation & configuration\n\nI already have quarto installed on my system[^2], and first add the \n`quarto-webr` extension:\n\n```bash\nquarto add coatless/quarto-webr\n```\n\n[^2]: You can download the version for your operation system \n  [here](https://quarto.org/docs/get-started/index.html)\n\n### Enabling `webr-r` code cells\n\nWith the extension in place, I can now create `webr-r` code cells in my \nQuarto documents. To render them, I also need to include the corresponding \nfilter in the YAML header of the file.[^4]\n\nHere is a minimal example of a Quarto document with the required header:\n\n````\n---\ntitle: webR - Hello world\nformat: html\nengine: knitr\nfilters:\n  - webr\n---\n\nThe following code cell will be executed by `webR` within the user's browser.\n\n```{webr-r}\nprint('Hello mtcars')\n```\n````\n\n[^4]: Alternatively, you can also specify the options globally by \n[adding them to your `_quarto.yml` file](https://quarto-webr.thecoatlessprofessor.com/qwebr-meta-options.html#global-configuration)\n\n### Using additional R packages\n\nThe webR community has precompiled a large \n[collection of R packages](https://docs.r-wasm.org/webr/latest/packages.html).\nThe `quarto-webr` extension facilitates their installation: we can simply list\nrequired packages in the `webr` section of the YAML header. For example, I will\nuse the \n[ggvenn](https://cran.r-project.org/package=ggvenn)\nand\n[huxtable](https://hughjonesd.github.io/huxtable/)\npackages to create the Venn diagram and result tables, respectively.\n\n```\nwebr:\n  show-startup-mmessage: false\n  packages: ['ggvenn', 'huxtable']\n```\n\n### Specifying code cell _context_\n\nAt the time of writing, the `quarto-webr` extension supports code cells with\nthree different \n[contexts](https://quarto-webr.thecoatlessprofessor.com/qwebr-internal-cell.html)[^3]\n\n- `interactive` cells are executed when the user clicks the `Run Code` button\n  and display both the code and the output.\n- `setup` cells are executed automatically and neither their code nor their\n  output is shown.\n- `output` cells execute automatically but don't show their code.\n\n[^3]: Contexts are very recent feature, and at the time of writing there are\n  still bugs to iron out e.g. controlling the \n  [execution order of loading third party packages](https://github.com/coatless/quarto-webr/issues/105)\n\nI will use `setup` contexts to download & parse the output of three\ndifferential expression analyses, and then use `interactive` contexts to \ntrigger filtering, plotting and printing the result tables.\n\n## Putting it all together\n\nNow it's time to write some R code to retrieve the CSV files via http, parse\nthem, generate the Venn diagram and subset the result tables to those genes\nthat pass the chosen FDR threshold.\n\n::: {.callout-note collapse=\"true\"}\n\n### Final Quarto markdown document\n\n[Also available as a gist](https://gist.github.com/tomsing1/06966801bb6f2c60a10c9891f65b0807)\n\n````\n---\ntitle: \"Embedding R into Quarto documents with quarto-webr\"\nsubtitle: \"Example: intersecting differential expression results\"\nauthor: \"Thomas Sandmann\"\ndate: '2023/11/18'\nformat: html\nengine: knitr\nwebr: \n  show-startup-message: true\n  packages: ['ggvenn', 'huxtable']\n  channel-type: \"post-message\"\nfilters:\n  - webr\neditor_options: \n  chunk_output_type: console\n---\n\n```{webr-r}\n#| context: setup\nkUrlRoot <- paste0(\n  \"https://tomsing1.github.io/blog/posts/quarto-webr\"\n)\nkResults <- c(\n  \"Day1\" = \"day1_results\",\n  \"Day2\" = \"day2_results\",\n  \"Day3\" = \"day3_results\"\n  )\nresults <- lapply(kResults, \\(result) {\n  url <- paste(kUrlRoot, paste0(result, \".csv\"), sep = \"/\")\n  download.file(url, basename(url))\n  read.csv(basename(url))[, c(\"gene_name\", \"adj.P.Val\", \"logFC\")]\n})\nnames(results) <- names(kResults)\n\n# keep only genes present in all results\nkeep <- Reduce(intersect, lapply(results, \\(x) x$gene_name))\nresults <- lapply(results, \\(result) result[result$gene_name %in% keep, ])\n\n# Helper function to apply an FDR cutoff to a list of dataframes\napply_fdr <- function(x, fdr_cutoff = 0.01){\n  lapply(x, function(df){\n    df[df$adj.P.Val < fdr_cutoff, ]$gene_name\n  })\n}\n```\n  \n## Introduction\n\nThis interactive website allows users to intersect differential expression\nresults of three different comparisons from an experiment published by \n[Xia et al](https://www.biorxiv.org/content/10.1101/2021.01.19.426731v1).\n\nThe experiment was performed in three different batches (e.g. samples were\ncollected on three different days). For this report, the differences\nbetween samples from homozygous APP-SAA and wildtype animals were estimated\n_separately_ for each batch/day: `Day 1`, `Day 2` and `Day 3`.[^1]\n\n[^1]: Analyzing each batch separately is _not_ the best way to estimate genotype\neffects across the full experiment. For this exercise, I just want to obtain\nthree different contrasts to compare in a Venn diagram. You can find more\ndetails about a more realistic analysis of this experiment in \n[this blog post](https://tomsing1.github.io/blog/posts/nextflow-core-quantseq-3-xia/).\n\nBy manipulating the code cells include in this website, you can select\na set of genes that passes a user-defined FDR threshold on all three days.[^2]\n\n[^2]: The FDR does not reveal the direction of differential expression. So it\nis possible that we will pick up genes that are statistically significantly\ndifferentially expressed in _opposite directions_.\n\n## Step 1: Choose a false-discovery (FDR) threshold \n\n1. Please choose an FDR threshold by changing the `FDR_threshold` the code\n  box below.\n  \n  - It will be applied to results from all three comparisons.\n  - For example, setting `FDR_threshold < 0.1` will retain all genes with a\n    false-discovery rate < 10% in _all three experiments_.\n\n2. Press the \"Run Code\" button to create a Venn diagram.\n\n  - You can save the plot by right-clicking and selecting `Save image as`.\n  \n3. Repeat until you like the results.\n\n```{webr-r}\n#| context: interactive\nFDR_threshold <- 0.1\nfiltered <- apply_fdr(results, FDR_threshold)\nggvenn(filtered)\nselected <- sort(Reduce(intersect, filtered))\n```\n\n## Step 2: List the genes that pass the FDR threshold in all three comparisons\n\nNext, press the `Run Code` button to see the list of genes that pass your \nselected FDR threshold.\n\n- If you triple-click on the list of gene symbols, you can copy them into\n  another document.\n\n```{webr-r}\n#| context: interactive\npaste(selected, collapse = \", \")\n```\n\n### Step 3: See the differential expression results for the selected genes\n\nFor more context, the following sections show you tables with the results\nfrom your three experiments for the genes you selected in Step 1.\n\n## Day 1\n\nHit `Run Code` button to see the expression of the selected genes \nor download [results for all genes](https://tomsing1.github.io/blog/posts/quarto-webr/day1_results.csv.gz)\n\n```{webr-r}\n#| context: interactive\nresults[[\"Day1\"]][match(selected, results[[\"Day1\"]]$gene_name), ] |>\n  huxtable::hux()\n```\n\n### Day 2\n\nHit `Run Code` button to see the expression of the selected genes \nor download [results for all genes](https://tomsing1.github.io/blog/posts/quarto-webr/day2_results.csv.gz)\n\n```{webr-r}\n#| context: interactive\nresults[[\"Day2\"]][match(selected, results[[\"Day2\"]]$gene_name), ] |>\n  huxtable::hux()\n```\n\n### Day 3\n\nHit `Run Code` button to see the expression of the selected genes \nor download [results for all genes](https://tomsing1.github.io/blog/posts/quarto-webr/day3_results.csv.gz)\n\n```{webr-r}\n#| context: interactive\nresults[[\"Day3\"]][match(selected, results[[\"Day3\"]]$gene_name), ] |>\n  huxtable::hux()\n```\n\n```{webr-r}\n#| context: interactive\nsessionInfo()\n```\n````\n:::\n\n## Deployment\n\nBecause the final report is just a set of static files, deploying it simply\nrequires sharing the rendered HTML file and the associated files.\n\nYou can \n[see my rendered report on github.io here](https://tomsing1.github.io/blog/posts/quarto-webr/quarto_webr_example.html)\n\n## First impressions\n\n- Success! I was able to render a Quarto markdown document into an interactive\nHTML report that allows the user to modify the FDR threshold on the fly.\n- It took me quite a while to get everything to work, and I am looking forward\nto the next release of the `quarto-webr` extension that promises even better\ncontrol of each cell's _context_.\n- Even though my goal was to expose only a single user-specified variable (the\nFDR threshold), my report contains multiple interactive elements that the user\nhas to trigger in sequence. Wouldn't it be great if subsequent code cells could\ndetect upstream changes and recalculate their results automatically?\n- For this use case, e.g. sharing interactive analysis reports, it would \neventually be helpful to be able to include familiar GUI elements - e.g. \ndropdown menus, sliders or tick boxes - similar to what is already possible\nwhen a [shiny server is available](https://quarto.org/docs/interactive/shiny/).\n\nIt's early days for the `webR` tool chain, but if its incredible progress\nover the last 6-9 months is any indication, then there will be lots of features\nto look forward to soon!\n\nMany thanks to James J Balamuta for creating the `quarto-webr` extension and\nto the `webR` team for opening so many opportunities for the R community!\n\n## Reproducibility\n\n::: {.callout-note title=\"Session Information\" collapse=true}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nâ”€ Session info â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Debian GNU/Linux 12 (bookworm)\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Los_Angeles\n date     2023-11-19\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\nâ”€ Packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n ! package     * version date (UTC) lib source\n P BiocManager   1.30.22 2023-08-08 [?] RSPM (R 4.3.1)\n R bspm          0.5.5   <NA>       [?] <NA>\n P cli           3.6.1   2023-03-23 [?] CRAN (R 4.3.1)\n P digest        0.6.33  2023-07-07 [?] CRAN (R 4.3.1)\n P evaluate      0.21    2023-05-05 [?] CRAN (R 4.3.1)\n P fastmap       1.1.1   2023-02-24 [?] CRAN (R 4.3.1)\n P htmltools     0.5.6   2023-08-10 [?] CRAN (R 4.3.1)\n P htmlwidgets   1.6.2   2023-03-17 [?] CRAN (R 4.3.1)\n P jsonlite      1.8.7   2023-06-29 [?] CRAN (R 4.3.1)\n P knitr         1.43    2023-05-25 [?] CRAN (R 4.3.1)\n   renv          1.0.2   2023-08-15 [1] RSPM (R 4.3.0)\n P rlang         1.1.1   2023-04-28 [?] CRAN (R 4.3.1)\n P rmarkdown     2.24    2023-08-14 [?] CRAN (R 4.3.1)\n P rstudioapi    0.15.0  2023-07-07 [?] CRAN (R 4.3.1)\n P sessioninfo   1.2.2   2021-12-06 [?] CRAN (R 4.3.1)\n P xfun          0.40    2023-08-09 [?] CRAN (R 4.3.1)\n P yaml          2.3.7   2023-01-23 [?] CRAN (R 4.3.1)\n\n [1] /home/sandmann/repositories/blog/renv/library/R-4.3/x86_64-pc-linux-gnu\n [2] /home/sandmann/.cache/R/renv/sandbox/R-4.3/x86_64-pc-linux-gnu/9a444a72\n\n P â”€â”€ Loaded and on-disk path mismatch.\n R â”€â”€ Package was removed from disk.\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}