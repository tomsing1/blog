{
  "hash": "cc7ea85cafd25989881ca0529bb5caca",
  "result": {
    "markdown": "---\ntitle: \"UpSet plots: comparing differential expression across contrasts\"\nauthor: \"Thomas Sandmann\"\ndate: \"2022-12-24\"\nfreeze: true\ncategories: [TIL, R, visualization]\neditor:\n  markdown:\n    wrap: 72\nformat:\n  html:\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n---\n\n\nToday I learned how to use\n[UpSet plots](https://doi.org/10.1109%2FTVCG.2014.2346248)\nto visualize the overlap between sets of differentially expressed genes.\n\nI often analyze RNA-seq experiments with multiple factors, e.g. different \ntreatments, conditions, cell lines, genotypes, time points, etc. The scientific\nquestions typically involve not just one, but multiple comparisons between\nexperimental groups. For example:\n\n- How do wildtype cells respond to drug treatment? \n- How do mutant cells respond?\n- What is the effect of drug treatment in growth medium A? Or B? Or C?\n- Is there a significant difference between treatment effects in wildtype\n  and mutant cells?\n- etc\n\nTo answer these questions, I typically fit a single linear model and then\nextract the comparisons of interest by specifying each of them as as *contrast*.\n(Check out the vignette of the excellent\n[designmatrices Bioconductor package](https://bioconductor.org/packages/release/workflows/vignettes/RNAseq123/inst/doc/designmatrices.html)\nfor details on creating design matrices and extracting contrasts.)\n\nAfter applying a suitable p-value / FDR threshold, each comparison / contrast\nyields a list of differentially expressed genes[^1]. When the lists are long, it\nis difficult to assess the degree of overlap, e.g. the number of genes that were\ndetected in multiple contrasts.\n\nIf the number of comparisons is small (say < 5), then a \n[Venn diagram](https://en.wikipedia.org/wiki/Venn_diagram)\nis an excellent way of displaying how these sets of genes overlap. But when\nthe number of sets increases, so does the number of intersections - and Venn\ndiagrams soon become hard to draw (and interpret).\n\nUpset plots can be used to clearly visualize larger numbers of sets. Here, I \nam using the \n[airway Bioconductor dataset](https://bioconductor.org/packages/release/data/experiment/html/airway.html),\nan RNA-Seq experiment on four human airway smooth muscle cell lines treated with\ndexamethasone, to illustrate how to\n\n- Fit a linear model using \n[limma/voom](https://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-2-r29)\n- Extract multiple contrasts\n- Visualize the numbers and intersections of differentially expressed gene sets\n  using Venn diagrams and UpSet plots.\n\n### Normalization, filtering & linear modeling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(airway)\nlibrary(ComplexHeatmap)\nlibrary(edgeR)\nlibrary(limma)\n```\n:::\n\n\nMy typical analysis workflow uses functions from the \n[edgeR](https://bioconductor.org/packages/release/bioc/html/edgeR.html)\nand \n[limma](https://bioconductor.org/packages/release/bioc/html/limma.html)\nR packages.\n\nThe `airway` experiment is multifactorial, and it includes:\n\n- Cells from different donors (`cell` covariate)\n- Treatment with *dexamethasone* - or not (`dex` covariate)\n- Different read lengths (`avgLength` covariate)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(airway, package = \"airway\")\nwith(colData(airway), table(cell, dex))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         dex\ncell      trt untrt\n  N052611   1     1\n  N061011   1     1\n  N080611   1     1\n  N61311    1     1\n```\n:::\n:::\n\n\nHere, I will focus only on the `cell` and `dex` variables, formulating a linear\nmodel that includes these two additive predictors: `~ 0 + cell + dex`\n\n::: {.callout-note}\n\nThere are \n[alternative ways to parameterize a linear model](https://bioconductor.org/packages/release/workflows/vignettes/RNAseq123/inst/doc/designmatrices.html#alternative-code-for-design-matrices). \nFor example, to obtain the pairwise comparisons between the first and the other\nthree cell, lines (see below) the model `~ cell + dex` would have returned the\nsame results without the need for contrasts. But for complex multivariate\nexperiments, I personally find it easier to exclude the intercept term and\nto manually define contrasts of interest.\n:::\n\nFirst, the data is normalized with the \n[TMM method](https://genomebiology.biomedcentral.com/articles/10.1186/gb-2010-11-3-r25).\nNext, we focus only on genes exceeding a minimal expression threshold by\nfiltering the dataset with the `filterByExpr` function. Then we are ready to\nfit the linear model - performing both the `voom` transformation and the \nmodel fitting with the `voomLmFit` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairway <- calcNormFactors(airway)\ndesign <- model.matrix(~ 0 + cell + dex, data = airway$samples)\ncolnames(design) <- sub(\"cell\", \"\", colnames(design))\nkeep <- filterByExpr(airway, design = design)\nfit <- voomLmFit(airway[keep, row.names(design)], design = design)\n```\n:::\n\n\nFor simplicity, we extract three contrasts, comparing gene expression between\ncell line `N052611` and each of the other three lines (adjusted for \ndexamethasone treatment). (These might not be the most biologically interesting\ncomparisons, but this post is focused on visualization - not biology.) \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# contrasts: differences between the first and all other cell lines\ncontrasts <- makeContrasts(\n  \"N061011-N052611\",\n  \"N080611-N052611\",\n  \"N61311-N052611\",\n  levels = design\n)\nfit2 <- contrasts.fit(fit, contrasts)\nresults <- limma::decideTests(fit2)\nsummary(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       N061011-N052611 N080611-N052611 N61311-N052611\nDown               279            1107            913\nNotSig           16336           15046          15329\nUp                 272             734            645\n```\n:::\n:::\n\n\n### Venn diagram\n\nEach of the pairwise comparisons yields hundreds of differentially expressed\ngenes (at the default FDR < 5% threshold for each contrast imposed by \nlimma's `decideTests` function.) But are these genes similar across cell lines?\n\nFor three comparisons, limma's built-in `vennDiagram` function is very useful:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlimma::vennDiagram(\n  results,\n  counts.col = \"black\",\n  circle.col = c(\"red\", \"blue\", \"green3\"),\n  names = sub(\"-\", \"/\\n\", colnames(results)),\n  mar = rep(0,4),\n  cex = c(1.2,1,0.7)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\nThe diagram shows that only a minority of genes is differentially expressed\nbetween all three cell lines and our reference (cell line `N052611`). Most of\nthe genes are only observed in the comparison between lines `N080611` and \n`N052611`.\n\n::: {.callout-tip}\nThis example doesn't distinguish between up- and down-regulated genes, e.g. a \ngene that is up-regulated in one contrast but down-regulated in another would\nbe found in the intersection. To display separate counts for up- and \ndownregulated genes, add the `include=c(\"up\", \"down\")` argument to the \n`vennDiagram` call.\n:::\n\nIf the number of comparisons increases, Venn diagrams are less useful (e.g.\nthe famous \n[banagram](https://www.nature.com/articles/nature11241/figures/4) \nwith six sets).\n\n### Upset plots\n\nThere are multiple R packages that can generate UpSet plots, including e.g.\n[UpSetR](https://cran.r-project.org/package=UpSetR). I ran into \ndifficulties customizing both the names of the sets *and* select specific\nintersections for plotting with `UpSetR`. Instead, I am using the `UpSet`\nfunction included in the \n[ComplexHeatmap](https://jokergoo.github.io/ComplexHeatmap-reference/book/upset-plot.html)\nR package here.\n\nIn preparation for plotting, multiple helper functions are available, including\n\n- `make_comb_mat`: calculcate the overlap between different sets, according to\n  the user-specified `mode`: one of `distinct`, `intersect` or `union`.\n- `comb_degree`: return the degree of each combination, e.g. how many sets were\n  included.\n- `set_size`: return the size of each input set\n- `comb_size`: return the size of each of the intersected sets (e.g. the \nsame sets shown in the Venn diagram above, because the `mode` was set to \n`distinct`).\n\nFor example, let's first restrict our input to all genes called significant\nin at least one of the comparisons:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove genes not signif. in any contrast\nresults <- results[rowSums(abs(results)) > 0, ]\n```\n:::\n\n\nNext, we determine the number of genes in each intersection. (Because \n`make_comb_mat` includes single sets as well, we exclude them by filtering out\nall results for intersections of degree one.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate the intersection between the differentially expressed gene sets\nm <- make_comb_mat(abs(results), mode = \"distinct\")\n# exclude self-intersects (total # of diff. genes will be displayed separately)\nm <- m[comb_degree(m) > 1]\n```\n:::\n\n\nLet's check the size of the input sets (e.g. all up- and down-regulated genes\nin each comparison):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(ss <- set_size(m))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nN061011-N052611 N080611-N052611  N61311-N052611 \n            551            1841            1558 \n```\n:::\n:::\n\n\nand their intersections:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(cs <- comb_size(m))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n111 110 101 011 \n172 116 102 405 \n```\n:::\n:::\n\n\n(Together, these numbers reproduce what was shown in the Venn diagram above.)\nNow we are ready to generate an UpSet plot!\n\nBecause the `UpSet` function uses the `ComplexHeatmap::Heatmap` function under\nthe hood, the resulting plot can be annotated / decorated with the same set of\nfunctions. Here, we plot the intersections in the main plot, and then add the\nsize of the individual sets on the right-hand margin.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nht <- UpSet(m, \n      set_order = colnames(m), \n      comb_order = order(comb_degree(m)),\n      top_annotation = HeatmapAnnotation(\n        \"Distinct diff. genes\" = anno_barplot(\n          cs, \n          ylim = c(0, max(cs)*1.1),\n          border = FALSE, \n          gp = gpar(fill = \"black\"), \n          height = unit(4, \"cm\")\n        ), \n        annotation_name_side = \"left\", \n        annotation_name_rot = 90),\n      right_annotation = HeatmapAnnotation(\n        which = \"row\",\n        \"Total\" = anno_barplot(\n          ss, \n          ylim = c(0, max(ss)*1.1),\n          border = FALSE, \n          gp = gpar(fill = \"black\"), \n          width = unit(4, \"cm\")\n        )\n      ),\n      column_title = \"Intersection between contrasts\"\n)\nht = draw(ht)\nod = column_order(ht)\nrod = row_order(ht)\ndecorate_annotation(\"Distinct diff. genes\", {\n  grid.text(cs[od], \n            x = seq_along(cs), \n            y = unit(cs[od], \"native\") + unit(2, \"pt\"), \n            default.units = \"native\", just = c(\"left\", \"bottom\"), \n            gp = gpar(fontsize = 8, col = \"#404040\"), rot = 45)\n})\ndecorate_annotation(\"Total\", {\n  grid.text(ss[rod], \n            x = unit(ss[rod], \"native\") + unit(20, \"pt\"), \n            y = rev(seq_along(ss)), \n            default.units = \"native\", just = c(\"right\", \"bottom\"), \n            gp = gpar(fontsize = 8, col = \"#404040\"))\n})\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/upset-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\nEach column of the main plot shows the number of genes that are unique to the\nintersection of the two (or three) indicated comparisons, matching those in the\nprevious Venn diagram. \n\nFor a small number of sets, a Venn diagram might be the preferred e.g. because\nreaders might be familiar this visualization. But an UpSet plot \nis well suited for the analysis more than three sets. (See \n[more examples here](https://upset.app/)\n).\n\n<details>\n<summary>\nReproducibility\n</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Big Sur ... 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Los_Angeles\n date     2022-12-24\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version  date (UTC) lib source\n airway               * 1.18.0   2022-11-03 [1] Bioconductor\n askpass                1.1      2019-01-13 [1] CRAN (R 4.2.0)\n Biobase              * 2.58.0   2022-11-01 [1] Bioconductor\n BiocGenerics         * 0.44.0   2022-11-01 [1] Bioconductor\n bitops                 1.0-7    2021-04-24 [1] CRAN (R 4.2.0)\n circlize               0.4.15   2022-05-10 [1] CRAN (R 4.2.0)\n cli                    3.4.1    2022-09-23 [1] CRAN (R 4.2.0)\n clue                   0.3-63   2022-11-19 [1] CRAN (R 4.2.0)\n cluster                2.1.4    2022-08-22 [2] CRAN (R 4.2.2)\n codetools              0.2-18   2020-11-04 [2] CRAN (R 4.2.2)\n colorspace             2.0-3    2022-02-21 [1] CRAN (R 4.2.0)\n ComplexHeatmap       * 2.14.0   2022-11-01 [1] Bioconductor\n crayon                 1.5.2    2022-09-29 [1] CRAN (R 4.2.0)\n credentials            1.3.2    2021-11-29 [1] CRAN (R 4.2.0)\n DelayedArray           0.24.0   2022-11-01 [1] Bioconductor\n digest                 0.6.31   2022-12-11 [1] CRAN (R 4.2.0)\n doParallel             1.0.17   2022-02-07 [1] CRAN (R 4.2.0)\n edgeR                * 3.40.1   2022-12-14 [1] Bioconductor\n evaluate               0.19     2022-12-13 [1] CRAN (R 4.2.0)\n fastmap                1.1.0    2021-01-25 [1] CRAN (R 4.2.0)\n foreach                1.5.2    2022-02-02 [1] CRAN (R 4.2.0)\n GenomeInfoDb         * 1.34.4   2022-12-01 [1] Bioconductor\n GenomeInfoDbData       1.2.9    2022-12-12 [1] Bioconductor\n GenomicRanges        * 1.50.2   2022-12-16 [1] Bioconductor\n GetoptLong             1.0.5    2020-12-15 [1] CRAN (R 4.2.0)\n GlobalOptions          0.1.2    2020-06-10 [1] CRAN (R 4.2.0)\n glue                   1.6.2    2022-02-24 [1] CRAN (R 4.2.0)\n htmltools              0.5.4    2022-12-07 [1] CRAN (R 4.2.0)\n htmlwidgets            1.5.4    2021-09-08 [1] CRAN (R 4.2.2)\n IRanges              * 2.32.0   2022-11-01 [1] Bioconductor\n iterators              1.0.14   2022-02-05 [1] CRAN (R 4.2.0)\n jsonlite               1.8.4    2022-12-06 [1] CRAN (R 4.2.0)\n knitr                  1.41     2022-11-18 [1] CRAN (R 4.2.0)\n lattice                0.20-45  2021-09-22 [2] CRAN (R 4.2.2)\n lifecycle              1.0.3    2022-10-07 [1] CRAN (R 4.2.0)\n limma                * 3.54.0   2022-11-01 [1] Bioconductor\n locfit                 1.5-9.6  2022-07-11 [1] CRAN (R 4.2.0)\n magrittr               2.0.3    2022-03-30 [1] CRAN (R 4.2.0)\n Matrix                 1.5-3    2022-11-11 [1] CRAN (R 4.2.0)\n MatrixGenerics       * 1.10.0   2022-11-01 [1] Bioconductor\n matrixStats          * 0.63.0   2022-11-18 [1] CRAN (R 4.2.0)\n openssl                2.0.5    2022-12-06 [1] CRAN (R 4.2.0)\n png                    0.1-8    2022-11-29 [1] CRAN (R 4.2.0)\n RColorBrewer           1.1-3    2022-04-03 [1] CRAN (R 4.2.0)\n Rcpp                   1.0.9    2022-07-08 [1] CRAN (R 4.2.0)\n RCurl                  1.98-1.9 2022-10-03 [1] CRAN (R 4.2.0)\n rjson                  0.2.21   2022-01-09 [1] CRAN (R 4.2.0)\n rlang                  1.0.6    2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown              2.19     2022-12-15 [1] CRAN (R 4.2.0)\n rstudioapi             0.14     2022-08-22 [1] CRAN (R 4.2.0)\n S4Vectors            * 0.36.1   2022-12-05 [1] Bioconductor\n sessioninfo            1.2.2    2021-12-06 [1] CRAN (R 4.2.0)\n shape                  1.4.6    2021-05-19 [1] CRAN (R 4.2.0)\n stringi                1.7.8    2022-07-11 [1] CRAN (R 4.2.0)\n stringr                1.5.0    2022-12-02 [1] CRAN (R 4.2.0)\n SummarizedExperiment * 1.28.0   2022-11-01 [1] Bioconductor\n sys                    3.4.1    2022-10-18 [1] CRAN (R 4.2.0)\n vctrs                  0.5.1    2022-11-16 [1] CRAN (R 4.2.0)\n xfun                   0.35     2022-11-16 [1] CRAN (R 4.2.0)\n XVector                0.38.0   2022-11-01 [1] Bioconductor\n yaml                   2.3.6    2022-10-18 [1] CRAN (R 4.2.0)\n zlibbioc               1.44.0   2022-11-01 [1] Bioconductor\n\n [1] /Users/sandmann/Library/R/x86_64/4.2/library\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n</details>\n\n[^1]: Both Venn diagrams and upset plots operate on sets, e.g. they require that\na hard threshold has been applied to the results of a differential expression\nanalysis. That's problematic, because \n[p-values themselves display high variability](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3370685/)\nand dichotomizing quantitative information looses information. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}