---
title: "Adventures with parquet III: sparse data"
author: "Thomas Sandmann"
date: "2023-09-08"
freeze: true
categories: [R, TIL, parquet, Bioconductor]
editor:
  markdown:
    wrap: 72
format:
  html:
    toc: true
    toc-depth: 4
    code-tools:
      source: true
      toggle: false
      caption: none
editor_options: 
  chunk_output_type: console
---

## tl;dr

[Previously](../parquetArray/), 
I learned how to create Bioconductor S4 objects based on parquet files. As
[Aaron Lun pointed out](https://support.bioconductor.org/p/9154160/#9154171)
Parquet format is similar to 10X Genomics' HDF5 format for sparse matrices:

> Each matrix column would constitute a Parquet row group, containing the usual
i/j/x sparse triplet (maybe the j column can be omitted as it is redundant with
the row group ID for the matrix column). If i is used as the sort column within
the row group, then you've got a CSC layout inside the Parquet file. At that
point, the performance can be expected to be similar to the HDF5 format, i.e.
great for column access, pretty bad for row access. 

## Introduction

Today, I am experimenting with coercing data from parquet files into sparse
matrices and using them as a back-end for Hervé Pagès's great
[DelayedArray S4 class](https://bioconductor.org/packages/release/bioc/html/DelayedArray.html). I will use the `TENxMatrixSeed` class defined in the
[HDF5Array package](https://bioconductor.org/packages/release/bioc/html/HDF5Array.html)
serves as an example implementation to guide me.

```{r}
#| warning: false
#| message: false
suppressPackageStartupMessages({
  library("arrow")
  library("dplyr")
  library("fs")
  library("rhdf5")
  library("tibble")
  library("tictoc")
  library("tidyr")
  library("DelayedArray")
  library("Matrix")
  library("S4Vectors")
  library("SingleCellExperiment")
  library("TENxPBMCData")
})
```

## Retrieving an example Single-cell RNA-seq dataset

As an example dataset, I am using single-cell RNA-seq included as the `pbmc4k` 
dataset in the 
[TENxPBMCData Bioconductor package](https://bioconductor.org/packages/release/data/experiment/html/TENxPBMCData.html), with counts from 
[Peripheral Blood Mononuclear Cells (PBMCs)](https://www.ncbi.nlm.nih.gov/books/NBK500157/#top)
collected from a single donor. 

The `TENxPBMCData()` function retrieves them from 
[ExperimentHub](https://bioconductor.org/packages/release/bioc/html/ExperimentHub.html)
and caches them on the local system the first time the object is loaded [^1].

It downloads three files:

- An HDF5 file with counts (dense assay)
- An RDS file with row (= gene) annotations
- An RDS file with column (= cell) annotations

```{r}
tenx_pbmc4k <- suppressMessages(TENxPBMCData(dataset = "pbmc4k"))
tenx_pbmc4k
```

The `TENxPBMCData()` function combines counts with annotations, and returns
a `SingleCellExperiment` with a sparse HDF5-backed `DelayedMatrix` in
the `counts` slot and gene and cell annotations as `rowData` and `colData`
DataFrames, respectively. It contains counts for `r nrow(tenx_pbmc4k)` genes
in `r ncol(tenx_pbmc4k)` cells. 

[^1]: By default, the location of the cache is set via 
`ExperimentHub::getExperimentHubOption("CACHE")`. For example, on my system the
data is located at `r ExperimentHub::getExperimentHubOption("CACHE")`.

The counts are retrieved from the HDF5 file on demand, and the full matrix
only uses `r format(object.size(counts(tenx_pbmc4k)), units = "MB")` of
memory.

```{r}
counts(tenx_pbmc4k)[1:10, 1:10]
```

::: {.callout-note collapse="true"}

The underlying HDF5 file only contains the gene x cell count matrix.

```{r}
rhdf5::h5ls(path(counts(tenx_pbmc4k)))
```

The 

:::

Like most single-cell RNA-seq datasets, the data is very sparse:
For example, `r round(mean(counts(tenx_pbmc4k[, 1:4]) == 0) * 100, 1)`% of the
genes in the first four samples have zero counts. 

## Handling sparse count data in memory

Let's load all counts into memory as a sparse `dgCMatrix` defined in the
[Matrix R package](https://cran.r-project.org/package=Matrix).

```{r}
m <- as(counts(tenx_pbmc4k), "dgCMatrix")
dim(m)
```

Because only non-zero counts need to be represented, the sparse `dgCMatrix`
matrix `m` is still relatively small, occupying 
`r format(object.size(m), units = "MB")` of memory.

::: {.callout-note}

Internally, a `dgCMatrix` is represented in the (sorted) 
[compressed sparse column format (CSC)](https://en.wikipedia.org/wiki/Sparse_matrix).
Each non-zero value is stored as three numbers:

- `i`: the row index
- `j`: the column pointer
- `x`: the value (= count)

:::

We can extract this internal representation into a tall, thin data.frame with
the `Matrix::summary()` function. 

```{r}
df <- as.data.frame(
  Matrix::summary(
    as(counts(tenx_pbmc4k), "dgCMatrix")
  ), row.names = NULL
)
df$x <- as.integer(df$x)
```

This data.frame _only_ contains non-zero values, e.g. `r length(unique(df$i))` 
of the original `r nrow(tenx_pbmc4k)` genes and `r length(unique(df$j))` 
of the original `r ncol(tenx_pbmc4k)` cells. No counts were detected for the
remaining (e.g. missing) genes and cells. 

The data.frame requires `r format(object.size(df), units = "MB")` of memory.

::: {.callout-note collapse="true"}

Instead of a regular data.frame we can also work with `arrow::Table` objects.
Here, I explicitly create a `Table` with three 32 bit integers. 
(Because single-cell RNA-seq counts are always positive and we have a good idea
of their upper bound, I am using an unsigned 32 bit integer type for the `x`
column, allowing values between 0 and 4,294,967,295.)


```{r}
a_tbl <- arrow::as_arrow_table(
  df, 
  schema = arrow::schema(
    i = int32(),
    j = int32(),
    x = uint32()
  ))
a_tbl
```

Creating an `arrow::Table` object appears to consume little additional memory
(`r format(object.size(a_tbl), units = "KB")`) as it is managed by `arrow` and
not R. 

:::

Alternatively, I can also encode the row-names (= gene identifiers) and
column-names (= cell barcodes) in the data.frame. Because each of the 
identifiers appears multiple times, they are best represented as factors. 

By including _all_ of the gene- and barcode identifiers as factor levels,
including those genes / barcodes that were not detected (e.g. had a total
of zero counts), I retain information about them as well.

```{r}
df$i <- factor(row.names(tenx_pbmc4k)[df$i], levels = row.names(tenx_pbmc4k))
df$j = factor(tenx_pbmc4k$Barcode[df$j], levels = tenx_pbmc4k$Barcode)
```

::: {.callout-note collapse="true"}

By the way, arrow tables (and parquet files) have an equivalent data type
and R factors stored as type `dictionary`.

```{r}
arrow::as_arrow_table(
  df
)
```

:::

## Writing parquet files

Next, let's store the `df` data.frame in a (single) parquet file on the
local filesystem.

```{r}
parquet_file <- tempfile(fileext = ".parquet")
arrow::write_parquet(x = df, sink = parquet_file, use_dictionary = TRUE)
```

This yields a parquet file that's `r format(fs::file_info(parquet_file)$size)`
in size. (For comparison, the original HDF5 file was
`r format(fs::file_info(path(counts(tenx_pbmc4k)))$size)` in size.)

```{r}
head(arrow::read_parquet(parquet_file))
```

## A parquet-file backed DelayedArray

The original `tenx_pbmc4k` object represents the counts as a 
`sparse DelayedMatrix object of type "integer"`, e.g. it copies the data from
the HDF5 file into memory only when it is necessary.

Here, I will reproduce this behavior with my parquet file by implementing a
minimal seed for the `DelayedArray` S4 class.

### The ParquetArraySeed S4 class 

Under the hood, each `DelayedMatrix` object contains a _seed_ object. For
example, the `tenx_pbmc4k` object contains a `HDF5ArraySeed` seed:

```{r eval=FALSE}
seed <- seed(counts(tenx_pbmc4k))
class(seed)
is_sparse(seed)
```

Let's create a similar `ParquetArraySeed` class that inherits from the `Array`
class.

```{r seed-class-definition}
setClass("ParquetArraySeed",
    contains = "Array",
    slots = c(
        filepath = "character",
        dim = "integer",
        dimnames = "list"
    )
)
```

To power a `DelayedArray` object, I need to define at least three different
S4 methods for my new class:

- `dim()` - returning an integer vector with the dimensions
- `dimnames()` - returning a list of character vectors with the dimension names
  (if any), e.g. the row and column names of the matrix.
- `extract_array()` - returning an _ordinary array_ for a set of indices (see
  below), e.g. a subset of the dataset to realize in memory.

Let's start with the `dim()` and `dimnames()` methods. We will rely on the
constructor function (see below) to retrieve the unique row and column names
from the parquet files, and then populate the `@dimnames` and `@dim` slots
for future reference.

```{r}
setMethod("dimnames", "ParquetArraySeed", function(x) x@dimnames)
setMethod("dim", "ParquetArraySeed", function(x) x@dim)
```

I also create a constructor function, which precalculates the dimensions of the
dataset and populates the `x@dim` slot:

```{r}
.get_dim <- function(filepath) {
  n_i <- read_parquet(filepath, col_select = "i") %>%
    collect() %>%
    pull(i) %>%
    nlevels()
  n_j <- read_parquet(filepath, col_select = "j") %>%
    collect() %>%
    pull(j) %>%
    nlevels()
  c(n_i, n_j)
}
ParquetArraySeed <- function(filepath, dim = c(0L,0L), 
                             dimnames = list(NULL, NULL)) {
  x <- new("ParquetArraySeed", filepath = filepath, dim = .get_dim(filepath), 
           dimnames = dimnames)
  return(x)
}
```

Finally, I need a function that subsets the dataset to a user-specified set of
genes and / or cells. I also need to ensure that passing an empty query returns
the full dataset.

```{r}
.extract_array_from_ParquetArraySeed <- function(x, index) {
  if (identical(index, list(integer(0), integer(0)))) {
    # zero indices => return empty matrix
    return(matrix(0L, nrow = 0, ncol = 0))
  } 
  keep_i <- seq.int(dim(x)[1])
  keep_j <- seq.int(dim(x)[2])
  # FIXME: how to convert an arrow dictionary to integers?
  arrow_tbl <- read_parquet(x@filepath, as_data_frame = TRUE) %>%
    mutate(i = as.integer(i),
           j = as.integer(j))
  if (is.null(index[[1]]) & is.null(index[[2]])) {
  # NULL indices => return the full dataset
    dataset <- arrow_tbl
  } else if (!is.null(index[[1]]) && is.null(index[[2]])) {
    # no column index => return all columns
    keep_i <- index[[1]]
    dataset <- filter(arrow_tbl, i %in% keep_i)
  } else if (is.null(index[[1]]) && !is.null(index[[2]])) {
    # no row index => return all rows
    keep_j <- index[[2]]
    dataset <- filter(arrow_tbl, j %in% keep_j)
  } else {
    # return requested rows and requested columns
    keep_i <-index[[1]]
    keep_j <- index[[2]]
    dataset <- filter(arrow_tbl, i %in% keep_i, j %in% keep_j)
  }
  # pivot the count data into a matrix
  dataset <- collect(dataset)
  m <- matrix(
    data = 0L,
    nrow = length(keep_i),
    ncol = length(keep_j),
    dimnames = list(dimnames(x)[[1]][keep_i], 
                    dimnames(x)[[2]][keep_j])
  )
  matrix_index <- cbind(
    match(dataset[["i"]], keep_i),
    match(dataset[["j"]], keep_j)
  )
  m[matrix_index] <- dataset$x
  return(m)
}

setMethod("extract_array", "ParquetArraySeed", 
          .extract_array_from_ParquetArraySeed)
```

## Creating a first parquet-backed DelayedArray object

With these three methods in place, I can instantiate my first `ParquetArraySeed`
object, which is suitable as input to the `DelayedArray` constructor from
the eponymous R package:

```{r}
seed <- ParquetArraySeed(
  parquet_file,
  dimnames = list(row.names(tenx_pbmc4k), tenx_pbmc4k$Barcode))
da <- DelayedArray(seed)
class(da)
```

Now we test different ways of subsetting our DelayedArray to make sure
it works as expected:

```{r}

identical(dim(da[1:10, 1:100]), c(10L, 100L))
identical(dim(da[1:10, ]), c(10L, ncol(da)))
identical(dim(da[, 1:10]), c(nrow(da), 10L))
identical(dim(da["ENSG00000243485", 1:10, drop = FALSE]), c(1L, 10L))
identical(
  dim(da[c(1, 1, 2, 98), c("AACTCAGTCCAACCAA-1", "AACTCCCAGAAACCTA-1")]),
  c(4L, 2L))
```

Finally, let's retrieve the (raw) counts for the GAPDH gene (`ENSG00000111640`)
and ensure that the same results are retrieved from both objects:

```{r}
#| fig-width: 4
#| fig-height: 4
plot(
  counts(tenx_pbmc4k[ "ENSG00000111640", ]), 
  da[ "ENSG00000111640", tenx_pbmc4k$Barcode],
  xlab = "GAPDH (ParquetArray)", ylab = "GAPDH (SingleCellExperiment)")
abline(0, 1)
```

### The ParquetMatrix class

Now that we have defined a _seed_, we can add a higher level class to facilitate
working with parquet-backed matrices. The `ParquetMatrix` inherits from the
`DelayedMatrix` class, and accepts our `ParquetArraySeed` object as its only
input.

```{r}
setClass("ParquetMatrix",
    contains = "DelayedMatrix",
    representation(seed = "ParquetArraySeed")
)

setMethod("DelayedArray", "ParquetArraySeed",
    function(seed) new_DelayedArray(seed, Class="ParquetMatrix")
)

ParquetMatrix <- function(filepath, ...) {
  seed <- ParquetArraySeed(filepath = filepath, ...)
  new("ParquetMatrix", seed = seed)
}
```

```{r}
ParquetMatrix(parquet_file)
```

### The SparseArraySeed class

So far, we the `ParquetArraySeed` class was based on the `S4Arrays::Array`
class, a virtual class that supports the representation of different array-like
objects [^2]. 

[^2]: The
[S4Arrays](https://bioconductor.org/packages/release/bioc/html/S4Arrays.html)
also defined methods that enable basic operations like `type()`, `as.array()`
or `as.matrix()`.

As described above, parquet file resemble the _compressed sparse column format_,
used e.g. to represent sparse matrices in the 
[Matrix package](https://cran.r-project.org/package=Matrix).
The `DelayedArray` package provides a special seed for sparse arrays: the
`SparseArraySeed` S4 class. Next, I explore whether this class would be a
useful alternative to power my `ParquetArraySeed` class instead.

Each `SparseArraySeed` objects contains the following slots:

- `dim`: An integer vector with the dimensions of the array
- `nzindex`: A matrix pinpointing the positions of the nonzero data, e.g. the
  row- and column indices `i` and `j` mentioned above.
- `nzdata`: A vector with the the nonzero data, equivalent to the `x` column
  I used above.
- `dimnames`: A list with one element per dimension, e.g. the row- and column
  names.

🚨: The `DelayedArray` package recommends avoiding the use of `dimnames` for
retrieval of data. So here, I store the `i` and `j` indices of the count
array as integers, not as a factor.

```{r}
dim_names <- list(
  levels(df$i),
  levels(df$j)
)
df$i <- as.integer(df$i)
df$j <- as.integer(df$j)
df$x <- as.integer(df$x)

parquet_file <- tempfile(fileext = ".parquet")
arrow::write_parquet(x = df, sink = parquet_file)
```

As for all _seed_ classes, the `dim()`, `dimnames()` and `extract_array()`
methods have been defined, along with other useful helper methods (e.g.
`sparsity()`). Let's create a new `sparseParquetArraySeed` subclass for
accessing parquet files. (I will borrow heavily from the
`DelayedArray::SparseArraySeed` constructor function but omit the many useful
assertions its code contains.) For the `extract_array()` method, I will reuse
the same helper function I used above, as it must return an ordinary (= dense)
matrix.

```{r}
setClass("sparseParquetArraySeed",
    contains = "SparseArraySeed",
    slots = c(
        filepath = "character"
    )
)

setMethod("nzindex", "sparseParquetArraySeed", function(x) x@nzindex)
setMethod("nzdata", "sparseParquetArraySeed", function(x) x@nzdata)
setMethod("extract_array", "sparseParquetArraySeed", 
          .extract_array_from_ParquetArraySeed)
setMethod("dimnames", "sparseParquetArraySeed", function(x) x@dimnames)
setReplaceMethod("dimnames", "sparseParquetArraySeed",function(x, value){
        x@dimnames <- value; x})

sparseParquetArraySeed <- function(filepath, dim, nzindex = NULL, nzdata = NULL,
                                   dimnames = list(NULL, NULL), check = TRUE) {
   if (is.null(nzindex)) {
     if (is.null(nzdata)) {
       nzdata <- logical(0)
     }
     nzindex <- matrix(integer(0), ncol=length(dim))
   } else {
     if (!is.null(dimnames(nzindex)))
       dimnames(nzindex) <- NULL
   }
  new2("sparseParquetArraySeed", filepath=filepath, dim=dim, nzindex=nzindex,
       nzdata=nzdata, dimnames=dimnames, check=check)
}
```

Next, we define a custom `extract_array()` method that _never_ expands the
sparse data into a dense array but returns another `sparseParquetArraySeed`
instead. (In contrast, the  `.extract_array_from_ParquetArraySeed()` helper
function generates and returns an ordinary matrix via the `matrix()` command.)

```{r}
```

```{r}
seed <- sparseParquetArraySeed(
  filepath = parquet_file,
  dim = c(max(df$i), max(df$j))
)
da <- DelayedArray(seed)
da
```

## Comparison to HDF5-backed DelayedArrays

```{r}
tic()
invisible(as.matrix(da))
toc()

tic()
invisible(as.matrix(counts(tenx_pbmc4k)))
toc()
```

## Reproducibility

<details>
<summary>
Session Information
</summary>

```{r}
sessioninfo::session_info("attached")
```

</details>
   