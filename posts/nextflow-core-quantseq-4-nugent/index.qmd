---
title: "QuantSeq RNAseq analysis (4): Validating published results (with UMIs)"
author: "Thomas Sandmann"
date: "2023-01-16"
freeze: true
categories: [R, nextflow, NGS]
editor:
  markdown:
    wrap: 72
format:
  html:
    toc: true
    toc-depth: 4
    code-tools:
      source: true
      toggle: false
      caption: none
editor_options: 
  chunk_output_type: console
---

::: {.callout-note collapse="false"}

This is the fourth of four posts documenting my progress toward
processing and analyzing 
[QuantSeq FWD 3' tag RNAseq](https://www.lexogen.com/quantseq-3mrna-sequencing/) 
data 
with the 
[nf-core/rnaseq](https://nf-co.re/rnaseq)
workflow. 

1. [Configuring & executing the nf-core/rnaseq workflow](../nextflow-core-quantseq-1-settings/index.html)
2. [Exploring the workflow outputs](../nextflow-core-quantseq-2-output/index.html)
3. [Validating the workflow by reproducing results published by Xia et al (no UMIs)](../nextflow-core-quantseq-3-xia/index.html)
4. **Validating the workflow by reproducing results published by Nugent et al (including UMIs)**

Many thanks to [Harshil Patel](https://github.com/drpatelh), 
[Ant√≥nio Miguel de Jesus Domingues](https://github.com/adomingues/)
and 
[Matthias Zepper](https://github.com/matthiasZepper/)
for their generous guidance & input via [nf-core slack](nfcore.slack.com).
(Any mistakes are mine.)
:::

## tl;dr

- This analysis compares the performance of the 
  [nf-core/rnaseq workflow](https://nf-co.re/rnaseq)
  for QuantSeq FWD 3' tag RNAseq data with unique molecular identifiers (UMIs).
- The differential expression analysis results are highly
  concordant with those obtained in the original publication.
- With the appropriate settings, the 
  [nf-core/rnaseq workflow](https://nf-co.re/rnaseq) is a valid data processing
  pipeline for this data type.

The
[first post in this series](../nextflow-core-quantseq-1-settings/index.html)
walked through the preprocesssing of QuantSeq FWD data 
published in a preprint by 
[Nugent et al, 2020](https://pubmed.ncbi.nlm.nih.gov/31902528/),
who used the 
[QuantSeq FWD](https://www.lexogen.com/quantseq-3mrna-sequencing/)
library preparation protocol and added unique molecular
identifiers (UMIs). The UMIs were used to identify and remove PCR duplicates
during the data preprocessing steps.

Here, we use Bioconductor/R packages to reproduce the downstream results.
We perform the same analysis twice with either

1. the original counts matrix published by the authors [^1]
2. the output of the nf-core/rnaseq workflow

[^1]: Full disclosure: I am a co-author of this publication.

```{r}
#| message: false
library(dplyr)
library(edgeR)
library(ggplot2)
library(here)
library(org.Mm.eg.db)
library(SummarizedExperiment)
library(tibble)
library(tidyr)
```

```{r}
#| echo: false
work_dir <- here("posts", "nextflow-core-quantseq-4-nugent")
```

## Sample annotations

We start by retrieving the sample annotation table, listing e.g. the `sex`,
and `genotype` for each mouse, and the `batch` for each collected sample.

This information is available in the [SRA Run Explorer](https://www.ncbi.nlm.nih.gov/Traces/study/?query_key=4&WebEnv=MCID_63c1d2b51518446806822e1d&o=acc_s%3Aa#). 
(I saved it in the [sample_metadata.csv CSV file](sample_metadata.csv) if you 
want to follow along>.

```{r}
sample_sheet <- file.path(work_dir, "sample_metadata.csv")
sample_anno <- read.csv(sample_sheet, row.names = "Experiment")
head(sample_anno[, c("Run", "Animal.ID", "Age", "age_unit", "Cell_type",
                     "sex", "Genotype", "Sample.Name")])
```

Because our SRA metadata doesn't include the GEO sample title, I saved the
identifier mappings in the [GEO_sample_ids.csv CSV file](GEO_sample_ids.csv).

```{r}
geo_ids <- read.csv(file.path(work_dir, "GEO_sample_ids.csv"))
head(geo_ids)
```

```{r}
#| code-fold: true
colnames(sample_anno)<- tolower(colnames(sample_anno))
colnames(sample_anno) <- sub(".", "_", colnames(sample_anno), 
                             fixed = TRUE) 
sample_anno <- sample_anno[, c("sample_name", "animal_id", "genotype", "sex",
                               "age", "cell_type")]
sample_anno$genotype <- factor(sample_anno$genotype, 
                               levels = c("TREM2 +/+", "TREM2 -/-"))
sample_anno$genotype <- dplyr::recode_factor(
  sample_anno$genotype,"TREM2 +/+" = "WT", "TREM2 -/-" = "KO")
sample_anno$age <- factor(sample_anno$age)
sample_anno$sample_title <- geo_ids[
  match(sample_anno$sample_name, geo_ids$sample_name), "sample_id"]
head(sample_anno)
```

This experiment includes `r nrow(sample_anno)` samples of astrocytes or 
microglia cells obtained from `r length(unique(sample_anno$animal_id))` 
female mice that were either 2- or 16 months of age.

The animals are either wildtype (`WT`) or  homozygous knockouts (`KO`) for the
[Trem2 gene](https://www.uniprot.org/uniprotkb/Q99NH8/entry).

## Nugent et al's original count data

First, we retrieve the authors' count matrix from 
[NCBI GEO](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE158152), available
as a Supplementary tab-delimited text file.

```{r}
geo_url <- paste0("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE134031&",
                  "format=file&file=GSE134031%5FDST120%2Etab%2Egz")
raw_counts <- read.delim(textConnection(readLines(gzcon(url(geo_url)))))
head(colnames(raw_counts), 10)
```

The `raw_counts` data.frame contains information about the detected genes (
`mgi_symbol`, `ensembl_gene_id_version`) and the samples are identified by a
shorthand of their GEO title (e.g. `IL1_M`, `IL1_A`). 

We use the raw counts to populate a new `DGEList` object and perform
Library Size Normalization with the `TMM` approach.

```{r}
#| code-fold: true
count_data <- as.matrix(raw_counts[, grep("^IL", colnames(raw_counts))])
row.names(count_data) <- raw_counts$ensembl_gene_id_version
colnames(count_data) <- row.names(sample_anno)[
  match(colnames(count_data), sample_anno$sample_title)
]

gene_data <- data.frame(
  gene_id = raw_counts$ensembl_gene_id_version,
  gene_name = raw_counts$mgi_symbol,
  row.names = raw_counts$ensembl_gene_id_version
)

col_data <- data.frame(
  sample_anno[colnames(count_data),
              c("sample_title", "animal_id",  "age", "genotype", "cell_type")],
  workflow = "geo"
)

dge <- DGEList(
  counts = as.matrix(count_data), 
  samples = col_data[colnames(count_data), ], 
  genes = gene_data[row.names(count_data), ]
)

dge <- calcNormFactors(dge, method = "TMM")
```

This is a large dataset, containing e.g. samples from two different cell types
(microglia and astrocytes) and two different age groups (2 and 16 months).

Here, we will restrict the analysis to microglia samples collected from older
animals.

```{r}
dge <- dge[, dge$samples$cell_type == "microglia" & dge$samples$age == "16"]
```

Let's identify which genes are significantly differentially expressed between
the two genotypes!

### Linear modeling with limma/voom

First, we use the `edgeR::filterByExpr()` function to identify genes with
sufficiently large counts to be examined for differential expression.

```{r}
#| message: false
#| results: hide
design <- model.matrix(~ genotype, data = dge$samples)
colnames(design) <- sub("genotype", "", colnames(design))
keep <- filterByExpr(dge, design = design)
```

Next, we fit a linear model to the data using the 
[limma/voom](https://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-2-r29)
approach. The model only includes the `genotype` (with `WT` as the reference
level) as a fixed effect.

```{r}
#| message: false
#| results: hide
fit <- voomLmFit(
  dge[keep, row.names(design)], 
  design = design,
  sample.weights = TRUE, 
  plot = FALSE
)
fit <- eBayes(fit, robust=TRUE)
```

The following table displays the number of differentially up- and down-regulated
genes after applying a false-discovery (`adj.P.Val`) threshold of 5%. 
We detect significant differences between `KO` and `WT` animals in a small
number of genes

```{r}
summary(decideTests(fit)[, "KO"])
```

The top 10 genes with the smallest p-values include well known markers of
microglia activation:

```{r}
topTreat(fit, coef = "KO")[, c("gene_name", "logFC", "P.Value", "adj.P.Val")]
```

Next we repeat *the same analysis* with the output of the nf-core/rnaseq
workflow.

## nf-core/rnaseq results

We start with the raw counts contained in the 
[salmon.merged.gene_counts.rds](salmon.merged.gene_counts.rds) 
file generated by the nf-core/rnaseq workflow. 

We TMM-normalize the data, as before. (This step converts the 
`SummarizedExperiment` into a `DGEList object as well.)

```{r}
count_file <- file.path(work_dir, "salmon.merged.gene_counts.rds")
se <- readRDS(count_file)
stopifnot(all(colnames(se) %in% row.names(sample_anno)))
dge_nfcore <- calcNormFactors(se, method = "TMM")
```

Next, we add the sample metadata and fit the same linear model as before.

```{r}
#| code-fold: true
#| results: hide
dge_nfcore$samples <- data.frame(
  dge_nfcore$samples,
  sample_anno[colnames(dge_nfcore),
              c("sample_title", "animal_id", "age", "genotype", "cell_type")],
  workflow = "nfcore"
)
stopifnot(all(colnames(dge) %in% colnames(dge_nfcore)))
dge_nfcore <- dge_nfcore[, colnames(dge)]

design <- model.matrix(~ genotype, data = dge_nfcore$samples)
colnames(design) <- sub("genotype", "", colnames(design))
keep <- filterByExpr(dge_nfcore, design = design)
fit_nfcore <- voomLmFit(
  dge_nfcore[keep, row.names(design)], 
  design = design,
  sample.weights = TRUE, 
  plot = FALSE
)
fit_nfcore <- eBayes(fit_nfcore, robust=TRUE)
```

As with the original count data from NCBI GEO, we detect small number of
differentially expressed genes (FDR < 5%).

```{r}
summary(decideTests(fit_nfcore)[, "KO"])
```

```{r}
#| code-fold: true
cpms <- local({
  geo <- cpm(dge, normalized.lib.sizes = TRUE) %>%
    as.data.frame() %>%
    cbind(dge$genes) %>%
    pivot_longer(cols = starts_with("SRX"), 
                 names_to = "sample_name",
                 values_to = "cpm") %>%
    dplyr::left_join(
      tibble::rownames_to_column(dge$samples, "sample_name"),
      by = "sample_name"
    ) %>%
    dplyr::mutate(dataset = "Nugent et al")
  
  nfcore <- cpm(dge_nfcore, normalized.lib.sizes = TRUE) %>%
    as.data.frame() %>%
    cbind(dge_nfcore$genes) %>%
    pivot_longer(cols = starts_with("SRX"), 
                 names_to = "sample_name",
                 values_to = "cpm") %>%
    dplyr::left_join(
      tibble::rownames_to_column(dge_nfcore$samples, "sample_name"),
      by = "sample_name"
    ) %>%
    dplyr::mutate(dataset = "nf-core")
  
  dplyr::bind_rows(
    dplyr::select(geo, any_of(intersect(colnames(geo), colnames(nfcore)))),
    dplyr::select(nfcore, any_of(intersect(colnames(geo), colnames(nfcore))))
  )
})

tt <- rbind(
  topTreat(fit, coef = "KO", number = Inf)[
    , c("gene_id", "gene_name", "logFC", "P.Value", "adj.P.Val")] %>%
    dplyr::mutate(dataset = "geo"),
   topTreat(fit_nfcore, coef = "KO", number = Inf)[
     , c("gene_id", "gene_name", "logFC", "P.Value", "adj.P.Val")] %>%
    dplyr::mutate(dataset = "nfcore")
) %>%
  dplyr::mutate(adj.P.Val = signif(adj.P.Val, 2)) %>%
  tidyr::pivot_wider(
    id_cols = c("gene_id", "gene_name"), 
    names_from = "dataset", 
    values_from = "adj.P.Val") %>%
  dplyr::arrange(nfcore) %>%
  as.data.frame() %>%
  tibble::column_to_rownames("gene_id")
```

### Normalized expression

First, we examine the correlation between the normalized log-transformed
gene expression estimates returned from the two workflows. We focus on those
genes that passed the `filterByExpr` thresholds above, e.g. those genes
deemed sufficiently highly expressed to be assessed for differential expression.

```{r}
#| fig-width: 5.5
#| fig-height: 3.5
common_genes <- intersect(row.names(fit), row.names(fit_nfcore))
sum_stats <- cpms %>%
  dplyr::filter(gene_id %in% common_genes) %>%
  tidyr::pivot_wider(
    id_cols = c("gene_id", "sample_name"),
    values_from = "cpm",
    names_from = "dataset") %>%
  dplyr::group_by(gene_id) %>%
  dplyr::summarise(
    r = cor(log1p(`Nugent et al`), log1p(`nf-core`)),
    mean_nugent = mean(`Nugent et al`),
    mean_nfcore = mean(`nf-core`))

p <- ggplot(data = sum_stats, aes(x = r)) + 
  geom_histogram(bins = 50) +
  scale_x_continuous(limits = c(0, 1.02), breaks = seq(0, 1, by = 0.2)) +
  labs(x = "Pearson correlation coefficient (R)", 
       y = "Number of genes",
       title = "Correlation between normalized log2 counts") +
  theme_linedraw(14)
print(p)
```

The correlation between normalized log2 expression estimates is reasonably high,
e.g. 80% of all genes showing a Pearson correlation coefficient > 
`r signif(quantile(sum_stats$r, c(0.2)), 2)`. 

The relatively low correlation might reflect the low RNA input of 
this experiment, e.g. only `r length(common_genes)` of the genes 
genes were detected with > 10 UMI-corrected normalized counts per million reads.


```{r}
p <- ggplot(data = sum_stats, aes(x = mean_nugent + 1)) + 
  geom_histogram(bins = 50) +
  scale_x_continuous(trans = scales::log10_trans(),
                     labels = scales::comma_format()) +
  labs(x = "Mean normalized counts per million", 
       y = "Number of genes",
       title = "Average expression",
       subtitle = "Nugent et al") +
  theme_linedraw(14)
print(p)
```

Next, we will examine the results of the _differential_ expression analysis.

### Differential expression results

Analyses based on either preprocessing pipeline yield similar numbers of 
differentially expressed genes.

```{r}
#| code-fold: true
common_genes <- intersect(row.names(fit), row.names(fit_nfcore))
results <- cbind(
  decideTests(fit)[common_genes, "KO"], 
  decideTests(fit_nfcore)[common_genes, "KO"]
)
colnames(results) <- c("Nugent et al", "nf-core")
class(results) <- "TestResults"
summary(results)
```

But are these _the same genes_ in both sets of results?

We can visualize the overlap between the sets of significant genes in a Venn 
diagram (FDR < 5%). The majority of differentially expressed genes is 
detected with both quantitation approaches (for both up- and down-regulated
genes.)

```{r}
#| fig-width: 5.5
#| fig-height: 5.5
limma::vennDiagram(results, include = c("up", "down"),
                   counts.col=c("red", "blue"), mar = rep(0,4))
```

For example, the following plots show the normalized expression of the most
significantly differentially expressed genes (known markers of active 
microglia).

```{r}
#| code-fold: true
#| fig-width: 3
#| fig-height: 4.25
#| layout-ncol: 2
for (gene in topTreat(fit, coef = "KO", number = 6)[["gene_id"]]) {
 p <- cpms %>%
    dplyr::filter(gene_id == gene) %>%
    ggplot(aes(x = genotype, y = cpm)) + 
    geom_point(position = position_jitter(width = 0.05), alpha = 0.8) + 
    facet_grid(dataset ~ ., scales = "free") + 
    labs(title = dge$genes[gene, "gene_name"],
         y = "Normalized expression (CPM)",
         x = element_blank(),
         subtitle = sprintf("FDR nf-core: %s\nFDR GEO: %s",
                       tt[gene, "nfcore"],
                       tt[gene, "geo"]
                       )
         ) +
   theme_linedraw(14)
 print(p)
}
```

Applying a hard FDR threshold can inflate the number of apparent differences,
e.g. when a gene is close to the significance threshold (see below).

```{r}
p_cor <- cor(
  fit$coefficients[common_genes, "KO"], 
  fit_nfcore$coefficients[common_genes, "KO"])
```

The log2 fold estimates for the `Hom` vs `WT` comparison are well correlated
across the two analysis workflows (Pearson correlation coefficient 
R = `r signif(p_cor, 2)` ).

```{r}
#| fig-width: 4.5
#| fig-height: 4.5
smoothScatter(
  fit$coefficients[common_genes, "KO"], 
  fit_nfcore$coefficients[common_genes, "KO"],
  ylab = "nf-core (log2FC)",
  xlab = "Nugent et al (log2FC)",
  main = "Homozygous APP vs WT (effect size)"
)
text(x = 1, y = -4, labels = sprintf("R = %s", signif(p_cor, 2)))
abline(0, 1)
abline(h = 0, v = 0, lty = 2)
```

as are the t-statistics across all examined genes:

```{r}
#| fig-width: 4.5
#| fig-height: 4.5
p_cor <- cor(
  fit$t[common_genes, "KO"], 
  fit_nfcore$t[common_genes, "KO"])
smoothScatter(
  fit$t[common_genes, "KO"], 
  fit_nfcore$t[common_genes, "KO"],
  ylab = "nf-core (t-statistic)",
  xlab = "Nugent et al (t-statistic)",
  main = "Homozygous APP vs WT (t-statistic)")
text(x = 3, y = -15, labels = sprintf("R = %s", signif(p_cor, 2)))
abline(0, 1)
abline(h = 0, v = 0, lty = 2)
```

::: {.callout-note}

Because this comparison yields only a small number of bona-fide differentially
expressed genes, we don't expect to see a high correlation between the 
log2 fold changes or the t-statistics between the two analyses: most of the 
values are very close to zero.

:::

#### Discordant significance calls

```{r}
# genes detected in Nugent et al, but not significant with nf-core
genes <- row.names(results)[which(abs(results[, 1]) == 1 & results[, 2] == 0)]
```

At FDR < 5% `r length(genes)` genes were reported as significantly 
differentially expressed with the original Nugent et al count matrix
but *not* with the output of the nf-core/rnaseq workflow.

As side-by-side comparison of the FDR (`adj.P.Val`) for these genes confirms
that the one of them (*Cd52*) displays significance close to the 5% threshold
in the nf-core/rnaseq output as well. The second gene (*Slamf8*) also displays
the same trend in both datasets, but is detected at lower levels (e.g. lower
normalized CPMs) in the nf-core/rnaseq output.

```{r}
print(tt[genes, ])
```

#### Examples

Finally, we plot the normalized gene expression estimates for the 
`r length(genes)` discordant genes.

```{r}
#| fig-width: 3
#| fig-height: 4.25
#| code-fold: true
#| layout-ncol: 2
for (gene in genes) {
 p <- cpms %>%
    dplyr::filter(gene_id == gene) %>%
    ggplot(aes(x = genotype, y = cpm)) + 
    geom_point(position = position_jitter(width = 0.05), alpha = 0.8) + 
    facet_grid(dataset ~ ., scales = "free") + 
    labs(title = dge$genes[gene, "gene_name"],
         y = "Normalized expression (CPM)",
         x = element_blank(),
         subtitle = sprintf("FDR nf-core: %s\nFDR GEO: %s",
                       tt[gene, "nfcore"],
                       tt[gene, "geo"]
                       )
         ) +
   theme_linedraw(14)
 print(p)
}
```

## Conclusions

- Differential expression analyses of raw counts obtained with the 
  `nc-core/rnaseq` workflow yields results that are highly concordant with those
  obtained with the raw counts the authors deposited in NCBI GEO.
- With appropriate parameters the `nf-core/rnaseq` workflow can be applied to
  QuantSeq FWD 3'tag RNA-seq data that includes unique molecular identifiers.

## Reproducibility

<details>
<summary>
SessionInfo
</summary>

```{r}
#| echo: false
sessioninfo::session_info()
```

</details>
