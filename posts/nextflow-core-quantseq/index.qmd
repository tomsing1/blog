---
title: "Xia et al: Validating the nf-core/rnaseq workflow for QuantSeq FWD 3' tag RNAseq"
author: "Thomas Sandmann"
date: "2023-01-15"
freeze: true
categories: [TIL, R, nextflow, NGS]
editor:
  markdown:
    wrap: 72
format:
  html:
    toc: true
    toc-depth: 4
    code-tools:
      source: true
      toggle: false
      caption: none
editor_options: 
  chunk_output_type: console
---

```{r}
#| message: false
library(dplyr)
library(edgeR)
library(ggplot2)
library(here)
library(org.Mm.eg.db)
library(readxl)
library(SummarizedExperiment)
library(tibble)
library(tidyr)
```

```{r}
#| echo: false
work_dir <- here("posts", "nextflow-core-quantseq")
```

### Differential expression analysis

Next, we use Bioconductor/R packages to reproduce results downstream results 
published by Xia et al. We perform the same analysis twice with either

1. the original counts matrix published by the authors
2. the output of the nf-core/rnaseq workflow

#### Sample annotations

We start by retrieving the sample annotation table, listing e.g. the `sex`,
and `genotype` for each mouse, and the `batch` for each collected sample.

This information is available in the [SRA Run Explorer](https://www.ncbi.nlm.nih.gov/Traces/study/?query_key=1&WebEnv=MCID_63c0392862acb114c36e44a3&o=acc_s%3Aa#). I saved it in a CSV file to read it into R. 

```{r}
sample_sheet <- file.path(work_dir, "sample_metadata.csv")
sample_anno <- read.csv(sample_sheet, row.names = "Experiment")
head(sample_anno[, c("Run", "Animal.ID", "Age", "age_unit", "Batch", "sex",
                     "Genotype", "Sample.Name")])
```

Because our SRA metadata doesn't include the GEO sample title, I saved the
identifier mappings in the `GEO_sample_ids.csv` file.

```{r}
geo_ids <- read.csv(file.path(work_dir, "GEO_sample_ids.csv"))
head(geo_ids)
```

```{r}
#| code-fold: true
colnames(sample_anno)<- tolower(colnames(sample_anno))
colnames(sample_anno) <- sub(".", "_", colnames(sample_anno), 
                             fixed = TRUE) 
sample_anno <- sample_anno[, c("sample_name", "animal_id", "genotype", "sex",
                               "batch")]
sample_anno$genotype <- factor(sample_anno$genotype, 
                               levels = c("WT", "Het", "Hom"))
sample_anno$sample_title <- geo_ids[
  match(sample_anno$sample_name, geo_ids$sample_name), "sample_id"]
head(sample_anno)
```

This experiment includes `r nrow(sample_anno)` samples of microglia cells 
obtained from `r length(unique(sample_anno$animal_id))` different 8-month old 
mice. Both male and female animals were included in the study.

The animals carry one of three different genotypes of the gene encoding the 
APP amyloid beta precursor protein, either

- the wildtype mouse gene (`WT`) or
- one copy (`Het`) or
- two copies (`Hom`) 

of a mutant _APP_ gene carrying mutations associated with familial 
Alzheimer's Disease.

Samples from all three genotypes were collected on three days, and we will
use this `batch` information to model the experiment.

Two separate microglia samples were obtained from each animal, and we will
include this nested relationship by modeling the `animal` as random effect in 
our linear model.

#### Xia et al's original count data

First, we retrieve the authors' count matrix from [NCBI GEO](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE158152), available
as a Supplementary Excel file. In addition, we also retrieve 

```{r}
url <- paste0("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE158152&",
              "format=file&file=GSE158152%5Fdst150%5Fprocessed%2Exlsx")
temp_file <- tempfile(fileext = ".xlsx")
download.file(url, destfile = temp_file)
```

The Excel file has three different worksheets

- `sample_annotations`
- `raw_counts`
- `normalized_cpm`

```{r}
raw_counts <- read_excel(temp_file, sheet = "raw_counts")
head(colnames(raw_counts), 10)
```

The `raw_counts` excel sheet contains information about the detected genes (
`feature_ID`, `name`) and the samples are identified by their GEO title 
(e.g. `DRN-18459`, `DRN-184560`). 
We use the raw counts to populate a new `DGEList` object and perform
Library Size Normalization with the `TMM` approach.

```{r}
#| code-fold: true
count_data <- as.matrix(raw_counts[, grep("DRN-", colnames(raw_counts))])
row.names(count_data) <- raw_counts$feature_id
colnames(count_data) <- row.names(sample_anno)[
  match(colnames(count_data), sample_anno$sample_title)
]

gene_data <- data.frame(
  gene_id = raw_counts$feature_id,
  gene_name = raw_counts$symbol,
  row.names = raw_counts$feature_id
)
colnames(gene_data) <- c("gene_id", "gene_name")

col_data <- data.frame(
  sample_anno[colnames(count_data),
              c("sample_title", "animal_id", "sex", "genotype", "batch")],
  workflow = "geo"
)

dge <- DGEList(
  counts = as.matrix(count_data), 
  samples = col_data[colnames(count_data), ], 
  genes = gene_data[row.names(count_data), ]
)

dge <- calcNormFactors(dge, method = "TMM")
```

Next, we project the samples into two dimensions by performing multi-dimensional
scaling of the top 500 most variable genes. The samples cluster by genotype, 
with `WT` and `Het` segregating from the `Hom` samples.

```{r}
#| fig-width: 5.5
#| fig-height: 5
plotMDS(dge, labels = dge$samples$genotype,
        main = "Multi-dimensional scaling", 
        sub = "Based on the top 500 most variable genes")
```

Let's identify which genes are significantly differentially expressed between
the three genotypes!

##### Linear modeling with limma/voom

First, we use the `edgeR::filterByExpr()` function to identify genes with
sufficiently large counts to be examined for differential expression. (The 
`min.count = 25` parameter was determined by examining the mean-variance plot 
by the `voomLmFit()` function.)

```{r}
#| message: false
#| results: hide
design <- model.matrix(~ genotype + sex + batch, data = dge$samples)
colnames(design) <- sub("genotype", "", colnames(design))
keep <- filterByExpr(dge, design = design, min.count = 25)
```

Next, we fit a linear model to the data using the 
[limma/voom](https://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-2-r29)
approach. The model includes the following fixed effects:

- The `genotype` coded as a factor with the `WT` as the reference level.
- The `sex` and `batch` covariates, to account for systematic differences in 
  mean gene expression.

Because the dataset included two replicate samples from each animal, we model
the `animal` as a random effect (via the `block` argument of the `voomLmFit()` 
function). We then extract the coefficients, log2 fold changes and p-values
via limma's empirical Bayes approach.

::: {.callout-note collapse="true"}

We use the `limma::treat()` function to test the null hypothesis that genes
display significant differential expression _greater than_ 1.2-fold. This is
more stringent than the conventional null hypothesis of zero change. (Please
consult the `limma::treat()` help page for details.)

:::

```{r}
#| message: false
#| results: hide
fit <- voomLmFit(
  dge[keep, row.names(design)], 
  design = design,
  block = dge$samples$animal_id, 
  sample.weights = TRUE, 
  plot = FALSE
)
fit <- treat(fit, robust=TRUE)
```

The following table displays the number of differentially up- and down-regulated
genes after applying a false-discovery (`adj.P.Val`) threshold of 5%. While
we did not detect significant differences between `Het` and `WT` animals, 
the analysis revealed > 450 differentially expressed genes between `Hom` and
`WT` microglia.

```{r}
summary(decideTests(fit))[, c("Het", "Hom")]
```

The top 10 genes with the smallest p-values include well known markers of
microglia activation:

```{r}
topTreat(fit, coef = "Hom")[, c("gene_name", "logFC", "P.Value", "adj.P.Val")]
```

Next we repeat *the same analysis* with the output of the nf-core/rnaseq
workflow.

#### nf-core/rnaseq results

We start with the raw counts contained in the 
`salmon.merged.gene_counts_scaled.rds` file generated by the nf-core/rnaseq
workflow. 

::: {.callout-note  collapse="true"}

The nf-core pipeline returned the versioned ENSEMBL gene identifiers (e.g.)
`ENSMUSG00000000001.4`. Because Xia et al only provided the unversioned
identifiers (e.g. `ENSMUSG00000000001`) we trim the numeric suffix.

:::

We TMM-normalize the data, as before. (This step converts the 
`SummarizedExperiment` into a `DGEList object as well.)

```{r}
count_file <- file.path(work_dir, "salmon.merged.gene_counts_scaled.rds")
se <- readRDS(count_file)
row.names(se) <- sapply(
  strsplit(row.names(se), split = ".", fixed = TRUE), "[[", 1)
stopifnot(all(colnames(se) %in% row.names(sample_anno)))
dge_nfcore <- calcNormFactors(se, method = "TMM")
```

Next, we add the sample metadata

```{r}
#| code-fold: true
dge_nfcore$genes$gene_id <- row.names(dge_nfcore)

dge_nfcore$samples <- data.frame(
  dge_nfcore$samples,
  sample_anno[colnames(dge_nfcore),
              c("sample_title", "animal_id", "sex", "genotype", "batch")],
  workflow = "nfcore"
)
stopifnot(all(colnames(dge) %in% colnames(dge_nfcore)))
dge_nfcore <- dge_nfcore[, colnames(dge)]
```

and fit the same linear model as before

```{r}
#| code-fold: true
design <- model.matrix(~ genotype + sex + batch, data = dge_nfcore$samples)
colnames(design) <- sub("genotype", "", colnames(design))
keep <- filterByExpr(dge_nfcore, design = design, min.count = 25)
fit_nfcore <- voomLmFit(
  dge_nfcore[keep, row.names(design)], 
  design = design,
  block = dge_nfcore$samples$animal_id, 
  sample.weights = TRUE, 
  plot = FALSE
)
fit_nfcore <- treat(fit_nfcore, robust=TRUE)
```

As with the original count data from NCBI GEO, we detect > 450 differentially
expressed genes between `Hom` and `WT` genotypes 
(FDR < 5%, null hypothesis: fold change > 1.2).

```{r}
summary(decideTests(fit_nfcore))[, c("Het", "Hom")]
```

#### Comparing differential expression results

Analyses based on either preprocessing pipeline yield similar numbers of 
differentially expressed genes. But are these _the same genes_ in both sets of
results?

```{r}
#| code-fold: true
common_genes <- intersect(row.names(fit), row.names(fit_nfcore))
results <- cbind(
  decideTests(fit)[common_genes, "Hom"], 
  decideTests(fit_nfcore)[common_genes, "Hom"]
)
colnames(results) <- c("Xia et al", "nf-core")
class(results) <- "TestResults"
summary(results)
```

We can visualize the overlap between the sets of significant genes in a Venn 
diagram (FDR < 5%). The vast majority of differentially expressed genes is 
detected with both quantitation approaches (for both up- and down-regulated
genes.)

```{r}
#| fig-width: 5.5
#| fig-height: 5.5
limma::vennDiagram(results, include = c("up", "down"),
                   counts.col=c("red", "blue"), mar = rep(0,4))
```

For example, the following plots show the normalized expression of a few
highly differentially expressed genes (known markers of active microglia).

```{r}
#| code-fold: true
tt <- rbind(
  topTreat(fit, coef = "Hom", number = Inf)[
    , c("gene_id", "gene_name", "logFC", "P.Value", "adj.P.Val")] %>%
    dplyr::mutate(dataset = "geo"),
   topTreat(fit_nfcore, coef = "Hom", number = Inf)[
     , c("gene_id", "gene_name", "logFC", "P.Value", "adj.P.Val")] %>%
    dplyr::mutate(dataset = "nfcore")
) %>%
  dplyr::mutate(adj.P.Val = signif(adj.P.Val, 2)) %>%
  tidyr::pivot_wider(
    id_cols = c("gene_id", "gene_name"), 
    names_from = "dataset", 
    values_from = "adj.P.Val") %>%
  dplyr::arrange(nfcore) %>%
  as.data.frame() %>%
  tibble::column_to_rownames("gene_id")
print(tt)
```

```{r}
#| code-fold: true
geo <- cpm(dge, normalized.lib.sizes = TRUE) %>%
  as.data.frame() %>%
  cbind(dge$genes) %>%
  pivot_longer(cols = starts_with("SRX"), 
               names_to = "sample_name",
               values_to = "cpm") %>%
  dplyr::left_join(
    tibble::rownames_to_column(dge$samples, "sample_name"),
    by = "sample_name"
  ) %>%
  dplyr::mutate(dataset = "Xia et al")
 
nfcore <- cpm(dge_nfcore, normalized.lib.sizes = TRUE) %>%
  as.data.frame() %>%
  cbind(dge_nfcore$genes) %>%
  pivot_longer(cols = starts_with("SRX"), 
               names_to = "sample_name",
               values_to = "cpm") %>%
  dplyr::left_join(
    tibble::rownames_to_column(dge_nfcore$samples, "sample_name"),
    by = "sample_name"
  ) %>%
  dplyr::mutate(dataset = "nf-core")

cpms <- bind_rows(
  dplyr::select(geo, any_of(intersect(colnames(geo), colnames(nfcore)))),
  dplyr::select(nfcore, any_of(intersect(colnames(geo), colnames(nfcore))))
)
```

```{r}
#| fig-width: 4.25
#| fig-height: 4.25
#| code-fold: true
#| layout-ncol: 2
for (gene in topTreat(fit, coef = "Hom", number = 6)[["gene_id"]]) {
 p <- cpms %>%
    dplyr::filter(gene_id == gene) %>%
    ggplot(aes(x = genotype, y = cpm)) + 
    geom_point(position = position_jitter(width = 0.05), alpha = 0.8) + 
    facet_grid(dataset ~ ., scales = "free") + 
    labs(title = dge$genes[gene, "gene_name"],
         y = "Normalized expression (CPM)",
         x = element_blank(),
         subtitle = sprintf("FDR nf-core: %s, FDR GEO: %s",
                       tt[gene, "nfcore"],
                       tt[gene, "geo"]
                       )
         ) +
   theme_linedraw(14)
 print(p)
}
```

Applying a hard FDR threshold can inflate the number of apparent differences,
e.g. when a gene is close to the significance threshold (see below).

```{r}
p_cor <- cor(
  fit$coefficients[common_genes, "Hom"], 
  fit_nfcore$coefficients[common_genes, "Hom"])
```

The log2 fold estimates for the `Hom` vs `WT` comparison are highly correlated
across the two analysis workflows (Pearson correlation coefficient 
R = `r signif(p_cor, 2)` ):s

```{r}
#| fig-width: 4.5
#| fig-height: 4.5
smoothScatter(
  fit$coefficients[common_genes, "Hom"], 
  fit_nfcore$coefficients[common_genes, "Hom"],
  ylab = "nf-core (log2FC)",
  xlab = "Xia et al (log2FC)",
  main = "Homozygous APP vs WT (effect size)"
)
text(x = 10, y = -2, labels = sprintf("R = %s", signif(p_cor, 2)))
abline(0, 1)
abline(h = 0, v = 0, lty = 2)
```

as are the t-statistics across all examined genes:

```{r}
#| fig-width: 4.5
#| fig-height: 4.5
p_cor <- cor(
  fit$t[common_genes, "Hom"], 
  fit_nfcore$t[common_genes, "Hom"])
smoothScatter(
  fit$t[common_genes, "Hom"], 
  fit_nfcore$t[common_genes, "Hom"],
  ylab = "nf-core (t-statistic)",
  xlab = "Xia et al (t-statistic)",
  main = "Homozygous APP vs WT (t-statistic)")
text(x = 10, y = -2, labels = sprintf("R = %s", signif(p_cor, 2)))
abline(0, 1)
abline(h = 0, v = 0, lty = 2)
```

#### Discordant significance calls

```{r}
# genes detected in GEO, but not significant with nf-core
genes <- row.names(results)[which(abs(results[, 1]) == 1 & results[, 2] == 0)]
```

At FDR < 5% `r length(genes)` genes were reported as significantly 
differentially expressed with the original Xia et al count matrix
but *not* with the output of the nf-core/rnaseq workflow.

As side-by-side comparison of the FDR (`adj.P.Val`) for these genes confirms
that the vast majority display significant close to the 5% threshold in the 
nf-core/rnaseq output as well. (This is in line with the high overall
correlation of the t-statistics observed above.)

#### Examples

Finally, we plot the normalized gene expression estimates for the 
`r length(genes)` discordant genes.

```{r}
#| fig-width: 4.25
#| fig-height: 4.25
#| code-fold: true
#| layout-ncol: 2
for (gene in row.names(tt)) {
 p <- cpms %>%
    dplyr::filter(gene_id == gene) %>%
    ggplot(aes(x = genotype, y = cpm)) + 
    geom_point(position = position_jitter(width = 0.05), alpha = 0.8) + 
    facet_grid(dataset ~ ., scales = "free") + 
    labs(title = dge$genes[gene, "gene_name"],
         y = "Normalized expression (CPM)",
         x = element_blank(),
         subtitle = sprintf("FDR nf-core: %s, FDR GEO: %s",
                       tt[gene, "nfcore"],
                       tt[gene, "geo"]
                       )
         ) +
   theme_linedraw(14)
 print(p)
}
```

### Conclusions

- Differential expression analyses of raw counts obtained with the 
  `nc-core/rnaseq` workflow yields results that are highly concordant with those
  obtained with the raw counts the authors deposited in NCBI GEO.
- With appropriate parameters the `nf-core/rnaseq` workflow can be applied to
  QuantSeq FWD 3'tag RNA-seq data.

## Reproducibility

<details>
<summary>
SessionInfo
</summary>

```{r}
#| echo: false
sessioninfo::session_info()
```

</details>
